<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0,viewport-fit=cover"><title>Vue知识点总结（四）路由实例 | chipmunk</title><meta name="author" content="chipmunk"><meta name="copyright" content="chipmunk"><meta name="format-detection" content="telephone=no"><meta name="theme-color" content="#ffffff"><meta name="description" content="Vue-router路由介绍">
<meta property="og:type" content="article">
<meta property="og:title" content="Vue知识点总结（四）路由实例">
<meta property="og:url" content="http://chipmunk1222.github.io/posts/67b623237968">
<meta property="og:site_name" content="chipmunk">
<meta property="og:description" content="Vue-router路由介绍">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://res.cloudinary.com/dobligy9s/image/upload/v1741589591/Snipaste_2025-03-09_22-56-57_kf5ehs.png">
<meta property="article:published_time" content="2024-10-22T08:41:31.000Z">
<meta property="article:modified_time" content="2025-03-09T06:10:19.890Z">
<meta property="article:author" content="chipmunk">
<meta property="article:tag" content="Vue">
<meta property="article:tag" content="学习笔记">
<meta property="article:tag" content="router">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://res.cloudinary.com/dobligy9s/image/upload/v1741589591/Snipaste_2025-03-09_22-56-57_kf5ehs.png"><link rel="shortcut icon" href="https://res.cloudinary.com/dobligy9s/image/upload/v1741523046/icon_enxtjc.png"><link rel="canonical" href="http://chipmunk1222.github.io/posts/67b623237968"><link rel="preconnect" href="//cdn.jsdelivr.net"/><link rel="preconnect" href="//busuanzi.ibruce.info"/><link rel="stylesheet" href="/css/index.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css" media="print" onload="this.media='all'"><script>
    (() => {
      
    const saveToLocal = {
      set: (key, value, ttl) => {
        if (!ttl) return
        const expiry = Date.now() + ttl * 86400000
        localStorage.setItem(key, JSON.stringify({ value, expiry }))
      },
      get: key => {
        const itemStr = localStorage.getItem(key)
        if (!itemStr) return undefined
        const { value, expiry } = JSON.parse(itemStr)
        if (Date.now() > expiry) {
          localStorage.removeItem(key)
          return undefined
        }
        return value
      }
    }

    window.btf = {
      saveToLocal,
      getScript: (url, attr = {}) => new Promise((resolve, reject) => {
        const script = document.createElement('script')
        script.src = url
        script.async = true
        Object.entries(attr).forEach(([key, val]) => script.setAttribute(key, val))
        script.onload = script.onreadystatechange = () => {
          if (!script.readyState || /loaded|complete/.test(script.readyState)) resolve()
        }
        script.onerror = reject
        document.head.appendChild(script)
      }),
      getCSS: (url, id) => new Promise((resolve, reject) => {
        const link = document.createElement('link')
        link.rel = 'stylesheet'
        link.href = url
        if (id) link.id = id
        link.onload = link.onreadystatechange = () => {
          if (!link.readyState || /loaded|complete/.test(link.readyState)) resolve()
        }
        link.onerror = reject
        document.head.appendChild(link)
      }),
      addGlobalFn: (key, fn, name = false, parent = window) => {
        if (!true && key.startsWith('pjax')) return
        const globalFn = parent.globalFn || {}
        globalFn[key] = globalFn[key] || {}
        if (name && globalFn[key][name]) return
        globalFn[key][name || Object.keys(globalFn[key]).length] = fn
        parent.globalFn = globalFn
      }
    }
  
      
      const activateDarkMode = () => {
        document.documentElement.setAttribute('data-theme', 'dark')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0d0d0d')
        }
      }
      const activateLightMode = () => {
        document.documentElement.setAttribute('data-theme', 'light')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff')
        }
      }

      btf.activateDarkMode = activateDarkMode
      btf.activateLightMode = activateLightMode

      const theme = saveToLocal.get('theme')
    
          theme === 'dark' ? activateDarkMode() : theme === 'light' ? activateLightMode() : null
        
      
      const asideStatus = saveToLocal.get('aside-status')
      if (asideStatus !== undefined) {
        document.documentElement.classList.toggle('hide-aside', asideStatus === 'hide')
      }
    
      
    const detectApple = () => {
      if (/iPad|iPhone|iPod|Macintosh/.test(navigator.userAgent)) {
        document.documentElement.classList.add('apple')
      }
    }
    detectApple()
  
    })()
  </script><script>const GLOBAL_CONFIG = {
  root: '/',
  algolia: {"appId":"T54S9V87DB","apiKey":"87ce764b96c86730c3b0a38a4f064726","indexName":"blog","hitsPerPage":6,"languages":{"input_placeholder":"在此输入搜索内容...","hits_empty":"未找到符合您查询的内容：${query}","hits_stats":"找到 ${hits} 条结果，耗时 ${time} 毫秒"}},
  localSearch: undefined,
  translate: undefined,
  noticeOutdate: {"limitDay":365,"position":"top","messagePrev":"It has been","messageNext":"days since the last update, the content of the article may be outdated."},
  highlight: {"plugin":"highlight.js","highlightCopy":true,"highlightLang":true,"highlightHeightLimit":200,"highlightFullpage":false,"highlightMacStyle":true},
  copy: {
    success: '复制成功',
    error: '复制失败',
    noSupport: '浏览器不支持'
  },
  relativeDate: {
    homepage: false,
    post: false
  },
  runtime: '',
  dateSuffix: {
    just: '刚刚',
    min: '分钟前',
    hour: '小时前',
    day: '天前',
    month: '个月前'
  },
  copyright: undefined,
  lightbox: 'medium_zoom',
  Snackbar: {"chs_to_cht":"已切换为繁体中文","cht_to_chs":"已切换为简体中文","day_to_night":"已切换为深色模式","night_to_day":"已切换为浅色模式","bgLight":"#49b1f5","bgDark":"#1f1f1f","position":"bottom-left"},
  infinitegrid: {
    js: 'https://cdn.jsdelivr.net/npm/@egjs/infinitegrid/dist/infinitegrid.min.js',
    buttonText: '加载更多'
  },
  isPhotoFigcaption: false,
  islazyload: false,
  isAnchor: false,
  percent: {
    toc: true,
    rightside: true,
  },
  autoDarkmode: false
}</script><script id="config-diff">var GLOBAL_CONFIG_SITE = {
  title: 'Vue知识点总结（四）路由实例',
  isPost: true,
  isHome: false,
  isHighlightShrink: false,
  isToc: true,
  postUpdate: '2025-03-09 14:10:19'
}</script><link rel="stylesheet" href="/css/custom.css"  media="defer" onload="this.media='all'"><link rel="stylesheet" href="/css/nav_menu.css"  media="defer" onload="this.media='all'"><link rel="stylesheet" href="/css/progress_bar.css"  media="defer" onload="this.media='all'"><link rel="stylesheet" href="/css/page_wave.css"  media="defer" onload="this.media='all'"><link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css"  media="defer" onload="this.media='all'"><!-- hexo injector head_end start --><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.css" media="print" onload="this.media='all'"><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css" media="print" onload="this.media='all'"><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css" media="print" onload="this.media='all'"><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css" media="defer" onload="this.media='all'"><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css" media="defer" onload="this.media='all'"><script src="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js"></script><!-- hexo injector head_end end --><meta name="generator" content="Hexo 7.3.0"></head><body><div id="loading-box" onclick="document.getElementById(&quot;loading-box&quot;).classList.add(&quot;loaded&quot;)"><div class="loading-bg"><div class="loading-img"></div><div class="loading-image-dot"></div></div></div><script>const preloader = {
  endLoading: () => {
    document.body.style.overflow = 'auto';
    document.getElementById('loading-box').classList.add("loaded")
  },
  initLoading: () => {
    document.body.style.overflow = '';
    document.getElementById('loading-box').classList.remove("loaded")

  }
}
window.addEventListener('load',()=> { preloader.endLoading() })

if (true) {
  document.addEventListener('pjax:send', () => { preloader.initLoading() })
  document.addEventListener('pjax:complete', () => { preloader.endLoading() })
}</script><script>window.paceOptions = {
  restartOnPushState: false
}

btf.addGlobalFn('pjaxSend', () => {
  Pace.restart()
}, 'pace_restart')

</script><link rel="stylesheet" href="/css/progress_bar.css"/><script src="https://cdn.jsdelivr.net/npm/pace-js/pace.min.js"></script><div id="web_bg" style="background-image: url(https://res.cloudinary.com/dobligy9s/image/upload/v1740211489/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_10_zw3vlq.png);"></div><div id="sidebar"><div id="menu-mask"></div><div id="sidebar-menus"><div class="avatar-img is-center"><img src="https://res.cloudinary.com/dobligy9s/image/upload/v1741589610/avatar.v1_rfipna.png" onerror="onerror=null;src='/img/friend_404.gif'" alt="avatar"/></div><div class="site-data is-center"><a href="/archives/"><div class="headline">文章</div><div class="length-num">17</div></a><a href="/tags/"><div class="headline">标签</div><div class="length-num">42</div></a><a href="/categories/"><div class="headline">分类</div><div class="length-num">2</div></a></div><div class="menus_items"><div class="menus_item"><a class="site-page faa-parent animated-hover" href="/"><i class="fa-fw icon-home"></i><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-home"></use></svg><span> 首页</span></a></div><div class="menus_item"><a class="site-page group faa-parent animated-hover hide" href="javascript:void(0);"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-page"></use></svg><span> 文章</span><i class="fas fa-chevron-down"></i></a><ul class="menus_item_child"><li><a class="site-page child faa-parent animated-hover" href="/archives/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-bookshelf">                   </use></svg><span> 归档</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/tags/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-tag">                   </use></svg><span> 标签</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/categories/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-category">                   </use></svg><span> 分类</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/random/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-random">                   </use></svg><span> 随便逛逛</span></a></li></ul></div><div class="menus_item"><a class="site-page group faa-parent animated-hover hide" href="javascript:void(0);"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-coffee"></use></svg><span> 休闲</span><i class="fas fa-chevron-down"></i></a><ul class="menus_item_child"><li><a class="site-page child faa-parent animated-hover" href="/music/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-music">                   </use></svg><span> 音乐馆</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/movies/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-zhuifan">                   </use></svg><span> 追番</span></a></li></ul></div><div class="menus_item"><a class="site-page group faa-parent animated-hover hide" href="javascript:void(0);"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-gift"></use></svg><span> 百宝箱</span><i class="fas fa-chevron-down"></i></a><ul class="menus_item_child"><li><a class="site-page child faa-parent animated-hover" href="/photos/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-photo">                   </use></svg><span> 画廊</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/resources/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-resource">                   </use></svg><span> 资源</span></a></li></ul></div><div class="menus_item"><a class="site-page faa-parent animated-hover" href="/link/"><i class="fa-fw icon-friend"></i><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-friend"></use></svg><span> 友人帐</span></a></div><div class="menus_item"><a class="site-page faa-parent animated-hover" href="/about/"><i class="fa-fw icon-personal"></i><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-personal"></use></svg><span> 关于</span></a></div></div></div></div><div class="post" id="body-wrap"><header class="post-bg fixed nav-visible" id="page-header" style="background-image: url(https://res.cloudinary.com/dobligy9s/image/upload/v1741589591/Snipaste_2025-03-09_22-56-57_kf5ehs.png);"><nav id="nav"><span id="blog-info"><a class="nav-site-title" href="/"><i class="fa-solid fa-house"></i><span class="site-name">chipmunk</span></a><a class="nav-page-title" href="/"><span class="site-name">Vue知识点总结（四）路由实例</span></a></span><div class="mask-name-container"><center id="name-container"><a id="page-name" href="javascript:btf.scrollToDest(0, 500)">PAGE_NAME</a></center></div><div id="menus"><div id="search-button"><span class="site-page social-icon search"><i class="fas fa-search fa-fw"></i><span> 搜索</span></span></div><div class="menus_items"><div class="menus_item"><a class="site-page faa-parent animated-hover" href="/"><i class="fa-fw icon-home"></i><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-home"></use></svg><span> 首页</span></a></div><div class="menus_item"><a class="site-page group faa-parent animated-hover hide" href="javascript:void(0);"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-page"></use></svg><span> 文章</span><i class="fas fa-chevron-down"></i></a><ul class="menus_item_child"><li><a class="site-page child faa-parent animated-hover" href="/archives/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-bookshelf">                   </use></svg><span> 归档</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/tags/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-tag">                   </use></svg><span> 标签</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/categories/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-category">                   </use></svg><span> 分类</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/random/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-random">                   </use></svg><span> 随便逛逛</span></a></li></ul></div><div class="menus_item"><a class="site-page group faa-parent animated-hover hide" href="javascript:void(0);"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-coffee"></use></svg><span> 休闲</span><i class="fas fa-chevron-down"></i></a><ul class="menus_item_child"><li><a class="site-page child faa-parent animated-hover" href="/music/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-music">                   </use></svg><span> 音乐馆</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/movies/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-zhuifan">                   </use></svg><span> 追番</span></a></li></ul></div><div class="menus_item"><a class="site-page group faa-parent animated-hover hide" href="javascript:void(0);"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-gift"></use></svg><span> 百宝箱</span><i class="fas fa-chevron-down"></i></a><ul class="menus_item_child"><li><a class="site-page child faa-parent animated-hover" href="/photos/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-photo">                   </use></svg><span> 画廊</span></a></li><li><a class="site-page child faa-parent animated-hover" href="/resources/"><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-resource">                   </use></svg><span> 资源</span></a></li></ul></div><div class="menus_item"><a class="site-page faa-parent animated-hover" href="/link/"><i class="fa-fw icon-friend"></i><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-friend"></use></svg><span> 友人帐</span></a></div><div class="menus_item"><a class="site-page faa-parent animated-hover" href="/about/"><i class="fa-fw icon-personal"></i><svg class="icon faa-tada" aria-hidden="true"><use xlink:href="#icon-personal"></use></svg><span> 关于</span></a></div></div><div id="toggle-menu"><span class="site-page"><i class="fas fa-bars fa-fw"></i></span></div></div></nav><div id="post-info"><h1 class="post-title">Vue知识点总结（四）路由实例</h1><div id="post-meta"><div class="meta-firstline"><span class="post-meta-date"><i class="far fa-calendar-alt fa-fw post-meta-icon"></i><span class="post-meta-label">发表于</span><time class="post-meta-date-created" datetime="2024-10-22T08:41:31.000Z" title="发表于 2024-10-22 16:41:31">2024-10-22</time><span class="post-meta-separator">|</span><i class="fas fa-history fa-fw post-meta-icon"></i><span class="post-meta-label">更新于</span><time class="post-meta-date-updated" datetime="2025-03-09T06:10:19.890Z" title="更新于 2025-03-09 14:10:19">2025-03-09</time></span></div><div class="meta-secondline"><span class="post-meta-separator">|</span><span class="post-meta-wordcount"><i class="far fa-file-word fa-fw post-meta-icon"></i><span class="post-meta-label">总字数:</span><span class="word-count">2.5k</span><span class="post-meta-separator">|</span><i class="far fa-clock fa-fw post-meta-icon"></i><span class="post-meta-label">阅读时长:</span><span>8分钟</span></span></div></div></div><section class="main-hero-waves-area waves-area"><svg class="waves-svg" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z"></path></defs><g class="parallax"><use href="#gentle-wave" x="48" y="0"></use><use href="#gentle-wave" x="48" y="3"></use><use href="#gentle-wave" x="48" y="5"></use><use href="#gentle-wave" x="48" y="7"></use></g></svg></section></header><main class="layout" id="content-inner"><div id="post"><article class="post-content" id="article-container"><div class="tip cogs"><p>该系列文章主要基于官方Vue教程，对Vue使用及特性等方面做一个较为系统的总结</p>
</div>
<div class="tip bell"><p>Vue官方文档链接<a target="_blank" rel="noopener" href="https://cn.vuejs.org/guide/introduction">Vue.js</a><br>VueRouter官方文档链接<a target="_blank" rel="noopener" href="https://router.vuejs.org/zh/introduction.html">VueRouter</a></p>
</div>
<hr>
<h1 id="路由实例创建"><a href="#路由实例创建" class="headerlink" title="路由实例创建"></a>路由实例创建</h1><p>一般使用脚手架工具创建<code>vue</code>实例的同时都会同步导入<code>VueRouter</code>的<code>npm</code>安装，如果需要单独导入，可使用<code>npm</code>导入：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure></p>
<p>这里同样提供<code>CDN</code>链接：<code>https://unpkg.com/vue-router@4.0.15/dist/vue-router.global.js</code><br><div class="note warning flat"><p><code>VueRouter</code>中<code>router4</code>对应<code>Vue3</code>，<code>router3</code>对应<code>Vue2</code>,故引包时需要格外看清<code>VueRouter</code>的版本，@后跟随的就是版本号</p>
</div></p>
<h2 id="在Vue中创建路由实例-router"><a href="#在Vue中创建路由实例-router" class="headerlink" title="在Vue中创建路由实例(router)"></a>在Vue中创建路由实例(router)</h2><p>接下来分别讲一下在<code>Vue2</code>和<code>Vue3</code>中创建路由实例的方法<br><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>Vue3</button><button type="button" class="tab"><i class="icon"></i>完整代码示例</button><button type="button" class="tab"><i class="icon"></i>Vue2</button></div><div class="tab-contents"><div class="tab-item-content active"><p>在<code>Vue3</code>中使用<code>createRouter api</code>进行路由实例创建</p>
<blockquote>
<ol>
<li>引包：npm install vue-router@4</li>
<li>引入：import {createRouter ，createMemoryHistory}  from ‘vue-router’</li>
<li>安装注册并挂载：createAPP(App).use(router).mount(‘#app’)</li>
<li>创建路由对象：const router = createRoute（{<br>   history：createMemoryHistory<br> routes<br>}）</li>
</ol>
</blockquote></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMemoryHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;./HomeView.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AboutView</span> <span class="keyword">from</span> <span class="string">&#x27;./AboutView.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeView</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutView</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createMemoryHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册插件并挂载</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">  .<span class="title function_">use</span>(router)</span><br><span class="line">  .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p><code>Vue2</code>中多了一步注入的步骤</p>
<blockquote>
<ol>
<li>引包：npm install vue-router@3.6.5(Vue2 为3.x Vue3为4.x)<ol>
<li>引入：import VueRouter from ‘vue-router’</li>
<li>安装注册：Vue.use(VueRouter)</li>
<li>创建路由对象： const router = new VueRouter（{ routes }）</li>
<li>注入：new Vue({<br>  render: h=&gt;h(app)<br>router<br>}).$mount(‘#app’)</li>
</ol>
</li>
</ol>
</blockquote></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></p>
<div class="note info flat"><p>这里在介绍下用<code>use()</code>注册为路由插件后实际上干了啥，首先是引入了<code>RouterView</code>和<code>RouterLink</code>两个组件，用于基本跳转，以及在选项式<code>api</code>中加入了<code>$router</code>和<code>$route</code>实例，在组合式<code>api</code>中加入了<code>useRouter()</code>和<code>useRoute()</code>函数，最后在使用<code>mount()</code>将其挂载到<code>Vue</code>当中去</p>
</div>
<h2 id="路由规则创建-router配置项"><a href="#路由规则创建-router配置项" class="headerlink" title="路由规则创建(router配置项)"></a>路由规则创建(router配置项)</h2><p>上述小节讲述了如何在<code>Vue</code>中创建路由，这一小节讲讲如何创建匹配规则</p>
<p>可以看到在创建的<code>router</code>中是可以添加配置项的，配置项以对象的形式添加</p>
<h3 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h3><p><code>routes</code>是路由的核心配置项，添加了路由导航的详细信息，<code>routes</code>配置项是一个数组，每一个路由页面由一个对象组成，可以使用<code>children</code>配置嵌套路由<br><code>routes</code>配置项一览：</p>
<blockquote>
<ul>
<li><code>path</code>:定义路由路径</li>
<li><code>component</code>:路由对应的组件</li>
<li><code>name</code>:用来命名路由,传入名字对象添加参数属性来替代路径以做到命名路由  </li>
<li><code>redirect</code>:自定义重定向路径</li>
<li><code>alias</code>:路由别名,路由别名定义的路径等同于<code>path</code>中的路径</li>
<li><code>children</code>:定义嵌套路由，规则等同于顶级路由</li>
<li><code>meta</code>:路由元信息，用以将格外信息如标题等附加到路由上</li>
</ul>
</blockquote>
<p>示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>, </span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">HomePage</span>, </span><br><span class="line">  <span class="attr">alias</span>: [<span class="string">&#x27;/start&#x27;</span>, <span class="string">&#x27;/begin&#x27;</span>], </span><br><span class="line">  <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;  <span class="comment">// 只有经过身份验证的用户才能创建帖子</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>在<code>Vue2</code>中可以使用<code>this.$route</code>实例成员获取当前页面的路由信息，在<code>Vue3</code>中使用<code>useRoute()</code>函数获取路由信息</p>
<div class="note warning flat"><p>在最后配置<code>path: &quot;*&quot;</code>用来匹配<code>404</code>页面</p>
</div>
<h3 id="activeLinks"><a href="#activeLinks" class="headerlink" title="activeLinks"></a>activeLinks</h3><p>通过配置<code>linkActiveClass</code>和<code>linkExactActveClass</code>配置项来修改对应导航激活时的类名</p>
<h3 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h3><p><code>history</code>配置项允许我们在不同的历史模式中进行选择</p>
<blockquote>
<ol>
<li><code>hash</code>模式：在具体路径前添加一个<code>#</code>，可以会对<code>SEO</code>造成一定影响，配置<code>createWebHashHistory()</code></li>
<li><code>Memory</code>模式：适合<code>node</code>环境和<code>SSR</code>，使用<code>createMemoryHistory()</code>创建</li>
<li><code>Html5</code>模式：最”正常”的模式，配置<code>createWebHistory()</code>创建</li>
</ol>
</blockquote>
<h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。</p>
<p>具体的做法是将组件的静态导入改为动态导入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserDetails</span> <span class="keyword">from</span> <span class="string">&#x27;./views/UserDetails.vue&#x27;</span></span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserDetails</span> &#125;</span><br><span class="line">    <span class="comment">// 或在路由定义里直接使用它</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>) &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h1 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h1><p>在完成了路由的创建以及配置后，下一步就是如何在具体的页面中使用路由进行跳转，路由跳转的本质是往浏览器的历史记录中添加历史，然后通过在路由中<code>push</code>完成跳转操作，本节将围绕<code>push()</code>、<code>&lt;router-link&gt;</code>以及<code>&lt;router-view&gt;</code>展开<br><div class="note info flat"><p><code>push()</code>是向浏览历史中添加一条记录，还有一种不添加记录的方式，就是<code>replace()</code>方法，方法如其名，直接替换，不添加历史</p>
</div></p>
<h2 id="路由出入口配置-RouterLink、RouterView"><a href="#路由出入口配置-RouterLink、RouterView" class="headerlink" title="路由出入口配置(RouterLink、RouterView)"></a>路由出入口配置(RouterLink、RouterView)</h2><p>在<code>VueRouter</code>中使用<code>RouterLink</code>替代<code>html</code>中的<code>&lt;a&gt;</code>,从而更好地兼容<code>SPA</code>单页应用<br><div class="note primary flat"><p>在最初使用<code>use()</code>注册路由之后，<code>RouterLink</code>和<code>RouterView</code>两个组件就相当于被全局注册了</p>
</div><br><div class="note orange icon-padding flat"><i class="note-icon fas fa-wand-magic"></i><p>在<code>Vue</code>模板中使用<code>RouterLink</code>大驼峰命名法和<code>router-link</code>短横杠命名法都是被允许的，但是在<code>html</code>的<code>DOM</code>中则只能使用短横杠命名法(大驼峰是<code>Vue3</code>后引入的规范，故对于早期版本也有可能会报错)</p>
</div><br>使用<code>&lt;router-link&gt;</code>设置跳转规则使用<code>&lt;router-view&gt;</code>定位路由出口，即跳转后页面的显示位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;url&quot;</span>&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><br>配置路由出口:<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>
<h2 id="路由匹配规则"><a href="#路由匹配规则" class="headerlink" title="路由匹配规则"></a>路由匹配规则</h2><p>路由<code>router</code>使用<code>push()</code>进行跳转，<code>push()</code>被注册到路由实例中，<code>Vue2</code>使用<code>this.$router</code>访问，<code>Vue3</code>中使用<code>useRouter()</code>访问<br><div class="note warning flat"><p>下文中都将使用<code>this.$router</code>和<code>this.$route</code>进行演示，这和那两个函数方法作用上是完全一致的</p>
</div></p>
<h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><p>在路由中可以配置动态<strong>路径参数</strong>将具有相同模式的路由进行分组，从而将具有相同规则的<code>url</code>映射到同一个路由<br>路径参数为<code>:</code><br>在使用<code>&lt;router-link&gt;</code>进行路由跳转时，可以根据路径参数精确匹配</p>
<blockquote>
<p>语法：</p>
<ul>
<li>配置路由：<code>/path/:参数名</code></li>
<li>跳转：<code>to=&quot;/path/:id&quot;</code></li>
<li>获取：<code>this.$route.params</code></li>
</ul>
</blockquote>
<h3 id="查询参数匹配"><a href="#查询参数匹配" class="headerlink" title="查询参数匹配"></a>查询参数匹配</h3><p>使用查询参数可以为路由添加格外信息，相当于参数附加在基础路径上</p>
<blockquote>
<p>语法：</p>
<ul>
<li>跳转：<code>to=&quot;/url/?参数名1=值&amp;参数名2=值&quot;</code></li>
<li>获取：<code>this.$route.query.参数名</code></li>
</ul>
</blockquote>
<h3 id="其他匹配方式"><a href="#其他匹配方式" class="headerlink" title="其他匹配方式"></a>其他匹配方式</h3><p>在使用路由时还有别的路由匹配的方法，比如可以使用正则式定义匹配或者使用<code>hash</code>进行锚点匹配</p>
<p><code>this.$route</code>实例中提供了<code>params</code>表示路径参数，<code>query</code>表示查询规则，<code>hash</code>表示<code>hash</code>值</p>
<p>在路由跳转时也可以以用这些参数，以便更精确定位<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;NotFound&#x27;</span>,</span><br><span class="line">  <span class="comment">// 保留当前路径并删除第一个字符，以避免目标 URL 以 `//` 开头。</span></span><br><span class="line">  <span class="attr">params</span>: &#123; <span class="attr">pathMatch</span>: <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span>.<span class="title function_">substring</span>(<span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>) &#125;,</span><br><span class="line">  <span class="comment">// 保留现有的查询和 hash 值，如果有的话</span></span><br><span class="line">  <span class="attr">query</span>: route.<span class="property">query</span>,</span><br><span class="line">  <span class="attr">hash</span>: route.<span class="property">hash</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="router-link属性"><a href="#router-link属性" class="headerlink" title="router-link属性"></a>router-link属性</h2><p><code>&lt;router-link&gt;</code>组件中还可以添加一些属性，比如<code>to</code>就是配置跳转路径，其余一些属性还可以配置其他内容</p>
<blockquote>
<ol>
<li><code>exact</code>:配置精确匹配，在<code>&lt;router-link&gt;</code>中添加<code>exact</code>后只有当路由精确匹配路径时才会是激活状态</li>
<li><code>router-link-active</code>:模糊匹配状态下，对应导航激活时的默认样式类名</li>
<li><code>router-link-exact-active</code>：精确匹配状态下，对应导航激活时的默认样式类名</li>
</ol>
</blockquote>
<p>在<code>router</code>中可添加配置项<code>linkActiveClass</code>和<code>linkExactActiveClass</code>可以手动配置激活状态下的类名</p>
<h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><p>路由守卫，用于在路由跳转的时候添加某些副作用，根据触发时机可以分为前置守卫或后置守卫，根据守卫范围可分为全局守卫或局部守卫</p>
<h2 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h2><p>可以使用<code>router.beforeEach()</code>创建一个全局前置守卫<br>语法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 返回 false 以取消导航</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>参数：</p>
<ul>
<li><code>to</code>：表示即将进入的目标</li>
<li><code>from</code>：表示离开的对象<br>返回值：</li>
<li><code>false</code>: 表示取消该次跳转</li>
<li><code>&#123;name:&#39;routername&#39;&#125;</code>:表示重定向到目标路由</li>
<li><code>none</code>:没有返回值表示路由是有效的</li>
</ul>
</blockquote>
<h2 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h2><p>不同于前置守卫，后置钩子并不会改变导航本身，它们主要的用途是更改页面标题，分析页面信息等辅助功能<br>语法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 表达式 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h2><p>在具体路由配置项(<code>routes</code>)中定义<code>beforeEnter</code>配置项</p>
<p>该守卫只在进入该路由时触发，不会在<code>params</code>、<code>query</code>、<code>hash</code>改变时触发，即只有跨越配置项时触发<br>定义语法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reject the navigation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><div class="note info flat"><p>在嵌套路由中，如果路由独享守卫被定义在父级路由中，则子级路由间的跳转不会触发路由独享守卫</p>
</div></p>
<h2 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h2><p>可在具体组件内部定义组件内守卫，<code>router</code>提供了三个组件内守卫的<code>api</code>,分别是：</p>
<blockquote>
<ul>
<li><code>beforeRouteEnter</code>:在渲染组件前调用</li>
<li><code>beforeRouteUpdate</code>:组件动态参数改变时调用</li>
<li><code>beforeRouteLeave</code>:离开组件渲染时调用</li>
</ul>
</blockquote>
<p>在组合式<code>api</code>中提供了<code>onBeforeRouteUpdate()</code>和<code>onBeforeRouteLeave()</code>分别添加<code>update</code>和<code>leave</code>守卫</p>
<h2 id="路由守卫触发流程"><a href="#路由守卫触发流程" class="headerlink" title="路由守卫触发流程"></a>路由守卫触发流程</h2><blockquote>
<ol>
<li>导航触发</li>
<li>离开的组件触发<code>beforeRouteLeave</code></li>
<li>全局<code>beforeEach</code>守卫</li>
<li>重用组件的<code>beforeRouteUpdate</code></li>
<li>独享配置项中的<code>beforeEnter</code></li>
<li>解析异步路由组件</li>
<li>进入的组件触发<code>beforeRouteEnter</code></li>
<li>导航确认</li>
<li>全局<code>afterEach</code>钩子</li>
<li>触发<code>DOM</code>更新</li>
</ol>
</blockquote>
<div class="note warning flat"><p>不要在路由守卫中修改具体组件的<code>DOM</code>，如果要做全局性判断，则在外层进行修改，否则在对应组件的生命周期内进行修改，任何路由守卫都不支持或者不建议直接操作导航对象的<code>DOM</code></p>
</div></article><div class="post-copyright"><div class="post-copyright__author"><span class="post-copyright-meta"><i class="fas fa-circle-user fa-fw"></i>文章作者: </span><span class="post-copyright-info"><a href="http://chipmunk1222.github.io">chipmunk</a></span></div><div class="post-copyright__type"><span class="post-copyright-meta"><i class="fas fa-square-arrow-up-right fa-fw"></i>文章链接: </span><span class="post-copyright-info"><a href="http://chipmunk1222.github.io/posts/67b623237968">http://chipmunk1222.github.io/posts/67b623237968</a></span></div><div class="post-copyright__notice"><span class="post-copyright-meta"><i class="fas fa-circle-exclamation fa-fw"></i>版权声明: </span><span class="post-copyright-info">本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来源 <a href="http://chipmunk1222.github.io" target="_blank">chipmunk</a>！</span></div></div><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Vue/">Vue</a><a class="post-meta__tags" href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">学习笔记</a><a class="post-meta__tags" href="/tags/router/">router</a></div><div class="post-share"><div class="social-share" data-image="https://res.cloudinary.com/dobligy9s/image/upload/v1741589591/Snipaste_2025-03-09_22-56-57_kf5ehs.png" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/butterfly-extsrc/sharejs/dist/css/share.min.css" media="print" onload="this.media='all'"><script src="https://cdn.jsdelivr.net/npm/butterfly-extsrc/sharejs/dist/js/social-share.min.js" defer></script></div></div><nav class="pagination-post" id="pagination"><a class="prev-post pull-left" href="/posts/7d0ef5070d8b" title="Vue知识点总结（五）状态管理"><img class="cover" src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211496/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_15_ig6fsq.png" onerror="onerror=null;src='/img/404.jpg'" alt="cover of previous post"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">Vue知识点总结（五）状态管理</div></div></a><a class="next-post pull-right" href="/posts/3abb109d09ad" title="butterfly导航栏魔改"><img class="cover" src="https://res.cloudinary.com/dobligy9s/image/upload/v1741589591/Snipaste_2025-03-09_22-56-57_kf5ehs.png" onerror="onerror=null;src='/img/404.jpg'" alt="cover of next post"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">butterfly导航栏魔改</div></div></a></nav><div class="relatedPosts"><div class="headline"><i class="fas fa-thumbs-up fa-fw"></i><span>相关推荐</span></div><div class="relatedPosts-list"><a href="/posts/224e8d1e5942" title="Vue知识点总结（一）基础认识"><img class="cover" src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211501/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_12_hnxlvk.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2024-11-19</div><div class="title">Vue知识点总结（一）基础认识</div></div></a><a href="/posts/cb7f923f23d8" title="Vue知识点总结（三）组合式api"><img class="cover" src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211496/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_15_ig6fsq.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2024-10-22</div><div class="title">Vue知识点总结（三）组合式api</div></div></a><a href="/posts/ebd28a5f09e4" title="Vue知识点总结（二）选项式api"><img class="cover" src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211496/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_15_ig6fsq.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2024-10-22</div><div class="title">Vue知识点总结（二）选项式api</div></div></a><a href="/posts/7d0ef5070d8b" title="Vue知识点总结（五）状态管理"><img class="cover" src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211496/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_15_ig6fsq.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2024-10-22</div><div class="title">Vue知识点总结（五）状态管理</div></div></a><a href="/posts/0e046010367a" title="MERN全栈聊天项目（二）前端部分"><img class="cover" src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211501/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_12_hnxlvk.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2025-02-21</div><div class="title">MERN全栈聊天项目（二）前端部分</div></div></a></div></div></div><div class="aside-content" id="aside-content"><div class="card-widget card-info is-center"><div class="avatar-img"><img src="https://res.cloudinary.com/dobligy9s/image/upload/v1741589610/avatar.v1_rfipna.png" onerror="this.onerror=null;this.src='/img/friend_404.gif'" alt="avatar"/></div><div class="author-info-name">chipmunk</div><div class="author-info-description"></div><div class="site-data"><a href="/archives/"><div class="headline">文章</div><div class="length-num">17</div></a><a href="/tags/"><div class="headline">标签</div><div class="length-num">42</div></a><a href="/categories/"><div class="headline">分类</div><div class="length-num">2</div></a></div><a id="card-info-btn" target="_blank" rel="noopener" href="https://github.com/xxxxxx"><i class="fab fa-github"></i><span>Follow Me</span></a><div class="card-info-social-icons"><a class="social-icon" href="https://github.com/chipmunk1222" target="_blank" title="Github"><i class="fab fa-github" style="color: #24292e;"></i></a><a class="social-icon" href="mailto:2571403027@qq.com" target="_blank" title="Email"><i class="fas fa-envelope"></i></a></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="fas fa-stream"></i><span>目录</span><span class="toc-percentage"></span></div><div class="toc-content"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%B7%AF%E7%94%B1%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA"><span class="toc-number">1.</span> <span class="toc-text">路由实例创建</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%9C%A8Vue%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%B7%AF%E7%94%B1%E5%AE%9E%E4%BE%8B-router"><span class="toc-number">1.1.</span> <span class="toc-text">在Vue中创建路由实例(router)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99%E5%88%9B%E5%BB%BA-router%E9%85%8D%E7%BD%AE%E9%A1%B9"><span class="toc-number">1.2.</span> <span class="toc-text">路由规则创建(router配置项)</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#routes"><span class="toc-number">1.2.1.</span> <span class="toc-text">routes</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#activeLinks"><span class="toc-number">1.2.2.</span> <span class="toc-text">activeLinks</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#history%E6%A8%A1%E5%BC%8F"><span class="toc-number">1.2.3.</span> <span class="toc-text">history模式</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD"><span class="toc-number">1.2.4.</span> <span class="toc-text">路由懒加载</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D"><span class="toc-number">2.</span> <span class="toc-text">路由匹配</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%B7%AF%E7%94%B1%E5%87%BA%E5%85%A5%E5%8F%A3%E9%85%8D%E7%BD%AE-RouterLink%E3%80%81RouterView"><span class="toc-number">2.1.</span> <span class="toc-text">路由出入口配置(RouterLink、RouterView)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99"><span class="toc-number">2.2.</span> <span class="toc-text">路由匹配规则</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D"><span class="toc-number">2.2.1.</span> <span class="toc-text">动态路由匹配</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E5%8C%B9%E9%85%8D"><span class="toc-number">2.2.2.</span> <span class="toc-text">查询参数匹配</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%85%B6%E4%BB%96%E5%8C%B9%E9%85%8D%E6%96%B9%E5%BC%8F"><span class="toc-number">2.2.3.</span> <span class="toc-text">其他匹配方式</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#router-link%E5%B1%9E%E6%80%A7"><span class="toc-number">2.3.</span> <span class="toc-text">router-link属性</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB"><span class="toc-number">3.</span> <span class="toc-text">路由守卫</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB"><span class="toc-number">3.1.</span> <span class="toc-text">全局前置守卫</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%85%A8%E5%B1%80%E5%90%8E%E7%BD%AE%E9%92%A9%E5%AD%90"><span class="toc-number">3.2.</span> <span class="toc-text">全局后置钩子</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E5%AE%88%E5%8D%AB"><span class="toc-number">3.3.</span> <span class="toc-text">路由独享守卫</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%BB%84%E4%BB%B6%E5%86%85%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB"><span class="toc-number">3.4.</span> <span class="toc-text">组件内路由守卫</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB%E8%A7%A6%E5%8F%91%E6%B5%81%E7%A8%8B"><span class="toc-number">3.5.</span> <span class="toc-text">路由守卫触发流程</span></a></li></ol></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="fas fa-history"></i><span>最新文章</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/posts/46eabdbceb5a" title="MERN全栈聊天项目（三）项目部署"><img src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211502/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_13_jcfzta.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="MERN全栈聊天项目（三）项目部署"/></a><div class="content"><a class="title" href="/posts/46eabdbceb5a" title="MERN全栈聊天项目（三）项目部署">MERN全栈聊天项目（三）项目部署</a><time datetime="2025-03-11T01:13:43.000Z" title="发表于 2025-03-11 09:13:43">2025-03-11</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/dffb0498c717" title="Vercel静态页面部署与域名配置教程"><img src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211502/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_11_ssezw0.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="Vercel静态页面部署与域名配置教程"/></a><div class="content"><a class="title" href="/posts/dffb0498c717" title="Vercel静态页面部署与域名配置教程">Vercel静态页面部署与域名配置教程</a><time datetime="2025-02-21T04:28:56.000Z" title="发表于 2025-02-21 12:28:56">2025-02-21</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/0e046010367a" title="MERN全栈聊天项目（二）前端部分"><img src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211501/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_12_hnxlvk.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="MERN全栈聊天项目（二）前端部分"/></a><div class="content"><a class="title" href="/posts/0e046010367a" title="MERN全栈聊天项目（二）前端部分">MERN全栈聊天项目（二）前端部分</a><time datetime="2025-02-21T04:28:56.000Z" title="发表于 2025-02-21 12:28:56">2025-02-21</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/5ff8966f15ce" title="algolia搜索功能配置"><img src="https://res.cloudinary.com/dobligy9s/image/upload/v1741589589/Snipaste_2025-03-09_22-55-10_zyvy5v.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="algolia搜索功能配置"/></a><div class="content"><a class="title" href="/posts/5ff8966f15ce" title="algolia搜索功能配置">algolia搜索功能配置</a><time datetime="2025-02-21T04:28:56.000Z" title="发表于 2025-02-21 12:28:56">2025-02-21</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/4574d8a5cdb5" title="MERN全栈聊天项目（一）后端部分"><img src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211496/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_15_ig6fsq.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="MERN全栈聊天项目（一）后端部分"/></a><div class="content"><a class="title" href="/posts/4574d8a5cdb5" title="MERN全栈聊天项目（一）后端部分">MERN全栈聊天项目（一）后端部分</a><time datetime="2025-01-11T04:28:56.000Z" title="发表于 2025-01-11 12:28:56">2025-01-11</time></div></div></div></div></div></div></main><footer id="footer" style="background: transparent;"><div id="footer-wrap"><div class="copyright">&copy;2024 - 2025 By chipmunk</div></div></footer></div><div id="rightside"><div id="rightside-config-hide"><button id="readmode" type="button" title="阅读模式"><i class="fas fa-book-open"></i></button><button id="darkmode" type="button" title="日间和夜间模式切换"><i class="fas fa-adjust"></i></button><button id="hide-aside-btn" type="button" title="单栏和双栏切换"><i class="fas fa-arrows-alt-h"></i></button></div><div id="rightside-config-show"><button id="rightside-config" type="button" title="设置"><i class="fas fa-cog fa-spin"></i></button><button class="close" id="mobile-toc-button" type="button" title="目录"><i class="fas fa-list-ul"></i></button><button id="go-up" type="button" title="回到顶部"><span class="scroll-percent"></span><i class="fas fa-arrow-up"></i></button></div></div><div><script src="/js/utils.js"></script><script src="/js/main.js"></script><script src="https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js"></script><script src="https://cdn.jsdelivr.net/npm/instant.page/instantpage.min.js" type="module"></script><script src="https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js"></script><div class="js-pjax"><script>(() => {
  const loadMathjax = () => {
    if (!window.MathJax) {
      window.MathJax = {
        tex: {
          inlineMath: [['$', '$'], ['\\(', '\\)']],
          tags: 'none',
        },
        chtml: {
          scale: 1.1
        },
        options: {
          enableMenu: false,
          renderActions: {
            findScript: [10, doc => {
              for (const node of document.querySelectorAll('script[type^="math/tex"]')) {
                const display = !!node.type.match(/; *mode=display/)
                const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display)
                const text = document.createTextNode('')
                node.parentNode.replaceChild(text, node)
                math.start = {node: text, delim: '', n: 0}
                math.end = {node: text, delim: '', n: 0}
                doc.math.push(math)
              }
            }, '']
          }
        }
      }
      
      const script = document.createElement('script')
      script.src = 'https://cdn.jsdelivr.net/npm/mathjax/es5/tex-mml-chtml.min.js'
      script.id = 'MathJax-script'
      script.async = true
      document.head.appendChild(script)
    } else {
      MathJax.startup.document.state(0)
      MathJax.texReset()
      MathJax.typesetPromise()
    }
  }

  btf.addGlobalFn('encrypt', loadMathjax, 'mathjax')
  window.pjax ? loadMathjax() : window.addEventListener('load', loadMathjax)
})()</script></div><script async src="//at.alicdn.com/t/c/font_4732727_1m21a74zx4o.js"></script><script src="/js/badage.js"  defer></script><script src="/js/nav.js" defer></script><script src="https://cdn.jsdelivr.net/npm/pjax/pjax.min.js"></script><script>(() => {
  const pjaxSelectors = ["head > title","#config-diff","#body-wrap","#rightside-config-hide","#rightside-config-show",".js-pjax"]

  window.pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
  })

  const triggerPjaxFn = (val) => {
    if (!val) return
    Object.values(val).forEach(fn => fn())
  }

  document.addEventListener('pjax:send', () => {
    // removeEventListener
    btf.removeGlobalFnEvent('pjaxSendOnce')
    btf.removeGlobalFnEvent('themeChange')

    // reset readmode
    const $bodyClassList = document.body.classList
    if ($bodyClassList.contains('read-mode')) $bodyClassList.remove('read-mode')

    triggerPjaxFn(window.globalFn.pjaxSend)
  })

  document.addEventListener('pjax:complete', () => {
    btf.removeGlobalFnEvent('pjaxCompleteOnce')
    document.querySelectorAll('script[data-pjax]').forEach(item => {
      const newScript = document.createElement('script')
      const content = item.text || item.textContent || item.innerHTML || ""
      Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
      newScript.appendChild(document.createTextNode(content))
      item.parentNode.replaceChild(newScript, item)
    })

    triggerPjaxFn(window.globalFn.pjaxComplete)
  })

  document.addEventListener('pjax:error', e => {
    if (e.request.status === 404) {
      pjax.loadUrl('/404.html')
    }
  })
})()</script><script async data-pjax src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script><div id="algolia-search"><div class="search-dialog"><nav class="search-nav"><span class="search-dialog-title">搜索</span><button class="search-close-button"><i class="fas fa-times"></i></button></nav><div class="search-wrap"><div id="algolia-search-input"></div><hr/><div id="algolia-search-results"><div id="algolia-hits"></div><div id="algolia-pagination"></div><div id="algolia-info"><div class="algolia-stats"></div><div class="algolia-poweredBy"></div></div></div></div></div><div id="search-mask"></div><script src="https://cdn.jsdelivr.net/npm/algoliasearch/dist/algoliasearch-lite.umd.min.js"></script><script src="https://cdn.jsdelivr.net/npm/instantsearch.js/dist/instantsearch.production.min.js"></script><script src="/js/search/algolia.js"></script></div></div><!-- hexo injector body_end start --><script data-pjax>
  function butterfly_footer_beautify_injector_config(){
    var parent_div_git = document.getElementById('footer-wrap');
    var item_html = '<div id="workboard"></div><p id="ghbdages"><a class="github-badge" target="_blank" href="https://hexo.io/" style="margin-inline:5px" data-title="博客框架为Hexo_v6.2.0" title=""><img src="https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo" alt=""/></a><a class="github-badge" target="_blank" href="https://butterfly.js.org/" style="margin-inline:5px" data-title="主题版本Butterfly_v4.3.1" title=""><img src="https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender" alt=""/></a><a class="github-badge" target="_blank" href="https://vercel.com/" style="margin-inline:5px" data-title="本站采用多线部署，主线路托管于Vercel" title=""><img src="https://img.shields.io/badge/Hosted-Vercel-brightgreen?style=flat&amp;logo=Vercel" alt=""/></a><a class="github-badge" target="_blank" href="https://dashboard.4everland.org/" style="margin-inline:5px" data-title="本站采用多线部署，备用线路托管于4EVERLAND" title=""><img src="https://img.shields.io/badge/Hosted-4EVERLAND-22DDDD?style=flat&amp;logo=IPFS" alt=""/></a><a class="github-badge" target="_blank" href="https://github.com/" style="margin-inline:5px" data-title="本站项目由Github托管" title=""><img src="https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub" alt=""/></a><a class="github-badge" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" style="margin-inline:5px" data-title="本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可" title=""><img src="https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris" alt=""/></a></p>';
    console.log('已挂载butterfly_footer_beautify')
    parent_div_git.insertAdjacentHTML("beforeend",item_html)
    }
  var elist = 'null'.split(',');
  var cpage = location.pathname;
  var epage = 'all';
  var flag = 0;

  for (var i=0;i<elist.length;i++){
    if (cpage.includes(elist[i])){
      flag++;
    }
  }

  if ((epage ==='all')&&(flag == 0)){
    butterfly_footer_beautify_injector_config();
  }
  else if (epage === cpage){
    butterfly_footer_beautify_injector_config();
  }
  </script><script async src="/js/bdage.js"></script><script data-pjax>
  function butterfly_swiper_injector_config(){
    var parent_div_git = document.getElementById('recent-posts');
    var item_html = '<div class="recent-post-item" style="height: auto;width: 100%"><div class="blog-slider swiper-container-fade swiper-container-horizontal" id="swiper_container"><div class="blog-slider__wrp swiper-wrapper" style="transition-duration: 0ms;"><div class="blog-slider__item swiper-slide" style="width: 750px; opacity: 1; transform: translate3d(0px, 0px, 0px); transition-duration: 0ms;"><a class="blog-slider__img" onclick="pjax.loadUrl(&quot;posts/066586315941&quot;);" href="javascript:void(0);" alt=""><img width="48" height="48" src="https://res.cloudinary.com/dobligy9s/image/upload/v1741589589/Snipaste_2025-03-09_22-55-10_zyvy5v.png" alt="" onerror="this.src=https://unpkg.zhimg.com/akilar-candyassets/image/loading.gif; this.onerror = null;"/></a><div class="blog-slider__content"><span class="blog-slider__code">2024-10-31</span><a class="blog-slider__title" onclick="pjax.loadUrl(&quot;posts/066586315941&quot;);" href="javascript:void(0);" alt="">Markdown语法总结与butterfly外挂标签</a><div class="blog-slider__text">Markdown基本语法以及butterfly常用外挂标签介绍</div><a class="blog-slider__button" onclick="pjax.loadUrl(&quot;posts/066586315941&quot;);" href="javascript:void(0);" alt="">详情       </a></div></div><div class="blog-slider__item swiper-slide" style="width: 750px; opacity: 1; transform: translate3d(0px, 0px, 0px); transition-duration: 0ms;"><a class="blog-slider__img" onclick="pjax.loadUrl(&quot;posts/ff004d07ce61&quot;);" href="javascript:void(0);" alt=""><img width="48" height="48" src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211496/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_15_ig6fsq.png" alt="" onerror="this.src=https://unpkg.zhimg.com/akilar-candyassets/image/loading.gif; this.onerror = null;"/></a><div class="blog-slider__content"><span class="blog-slider__code">2025-01-02</span><a class="blog-slider__title" onclick="pjax.loadUrl(&quot;posts/ff004d07ce61&quot;);" href="javascript:void(0);" alt="">计算机网络基础</a><div class="blog-slider__text">对大学计算机网络基础的总结</div><a class="blog-slider__button" onclick="pjax.loadUrl(&quot;posts/ff004d07ce61&quot;);" href="javascript:void(0);" alt="">详情       </a></div></div><div class="blog-slider__item swiper-slide" style="width: 750px; opacity: 1; transform: translate3d(0px, 0px, 0px); transition-duration: 0ms;"><a class="blog-slider__img" onclick="pjax.loadUrl(&quot;posts/88c1b7481808&quot;);" href="javascript:void(0);" alt=""><img width="48" height="48" src="https://res.cloudinary.com/dobligy9s/image/upload/v1741589589/Snipaste_2025-03-09_22-55-10_zyvy5v.png" alt="" onerror="this.src=https://unpkg.zhimg.com/akilar-candyassets/image/loading.gif; this.onerror = null;"/></a><div class="blog-slider__content"><span class="blog-slider__code">2024-11-19</span><a class="blog-slider__title" onclick="pjax.loadUrl(&quot;posts/88c1b7481808&quot;);" href="javascript:void(0);" alt="">浅谈数据分析（二）echarts数据可视化</a><div class="blog-slider__text">详解echarts的使用以及可视化大屏制作技巧</div><a class="blog-slider__button" onclick="pjax.loadUrl(&quot;posts/88c1b7481808&quot;);" href="javascript:void(0);" alt="">详情       </a></div></div><div class="blog-slider__item swiper-slide" style="width: 750px; opacity: 1; transform: translate3d(0px, 0px, 0px); transition-duration: 0ms;"><a class="blog-slider__img" onclick="pjax.loadUrl(&quot;posts/0e046010367a&quot;);" href="javascript:void(0);" alt=""><img width="48" height="48" src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211501/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_12_hnxlvk.png" alt="" onerror="this.src=https://unpkg.zhimg.com/akilar-candyassets/image/loading.gif; this.onerror = null;"/></a><div class="blog-slider__content"><span class="blog-slider__code">2025-02-21</span><a class="blog-slider__title" onclick="pjax.loadUrl(&quot;posts/0e046010367a&quot;);" href="javascript:void(0);" alt="">MERN全栈聊天项目（二）前端部分</a><div class="blog-slider__text">来源于油管的全栈聊天项目，应用了如今全栈开发中的MERN架构，即，mongodb+express+react+nodejs</div><a class="blog-slider__button" onclick="pjax.loadUrl(&quot;posts/0e046010367a&quot;);" href="javascript:void(0);" alt="">详情       </a></div></div><div class="blog-slider__item swiper-slide" style="width: 750px; opacity: 1; transform: translate3d(0px, 0px, 0px); transition-duration: 0ms;"><a class="blog-slider__img" onclick="pjax.loadUrl(&quot;posts/cb7f923f23d8&quot;);" href="javascript:void(0);" alt=""><img width="48" height="48" src="https://res.cloudinary.com/dobligy9s/image/upload/v1740211496/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_15_ig6fsq.png" alt="" onerror="this.src=https://unpkg.zhimg.com/akilar-candyassets/image/loading.gif; this.onerror = null;"/></a><div class="blog-slider__content"><span class="blog-slider__code">2024-10-22</span><a class="blog-slider__title" onclick="pjax.loadUrl(&quot;posts/cb7f923f23d8&quot;);" href="javascript:void(0);" alt="">Vue知识点总结（三）组合式api</a><div class="blog-slider__text">Vue选项式api专栏分析</div><a class="blog-slider__button" onclick="pjax.loadUrl(&quot;posts/cb7f923f23d8&quot;);" href="javascript:void(0);" alt="">详情       </a></div></div></div><div class="blog-slider__pagination swiper-pagination-clickable swiper-pagination-bullets"></div></div></div>';
    console.log('已挂载butterfly_swiper')
    parent_div_git.insertAdjacentHTML("afterbegin",item_html)
    }
  var elist = 'undefined'.split(',');
  var cpage = location.pathname;
  var epage = 'all';
  var flag = 0;

  for (var i=0;i<elist.length;i++){
    if (cpage.includes(elist[i])){
      flag++;
    }
  }

  if ((epage ==='all')&&(flag == 0)){
    butterfly_swiper_injector_config();
  }
  else if (epage === cpage){
    butterfly_swiper_injector_config();
  }
  </script><script defer src="https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js"></script><script defer data-pjax src="https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js"></script><script async src="//at.alicdn.com/t/font_2032782_8d5kxvn09md.js"></script><!-- hexo injector body_end end --></body></html>