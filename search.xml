<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MERN全栈聊天项目（二）前端部分</title>
      <link href="/2025/02/21/MERN%E5%85%A8%E6%A0%88%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86/"/>
      <url>/2025/02/21/MERN%E5%85%A8%E6%A0%88%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><p><code>cd</code>前端文件夹，通过<code>vite</code>创建前端<code>react</code>项目<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd frontend</span><br><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><br>根据需求选择创建<code>react</code>项目</p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 全栈 </tag>
            
            <tag> express </tag>
            
            <tag> react </tag>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MERN全栈聊天项目（一）后端部分</title>
      <link href="/2025/01/11/MERN%E5%85%A8%E6%A0%88%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E5%90%8E%E7%AB%AF%E9%83%A8%E5%88%86/"/>
      <url>/2025/01/11/MERN%E5%85%A8%E6%A0%88%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E5%90%8E%E7%AB%AF%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h1><p>引入<code>node</code>后端需要的依赖<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd backend</span><br><span class="line"></span><br><span class="line">npm i express mongoose dotenv jsonwentoken bcryptjs cookie-parser </span><br><span class="line">cloudinary socket.io  </span><br><span class="line"></span><br><span class="line">npm i nodemon -D</span><br></pre></td></tr></table></figure><br>下面将简单介绍下这些依赖在项目中的作用，后续将详细介绍如何在项目中使用它们</p><ol><li><code>express:</code>用于创建<code>node</code>服务器</li><li><code>mongoose:</code>用于连接后端和<code>mongodb</code>数据库</li><li><code>dotenv:</code>用于全局注入全局变量</li><li><code>jsonwebtoken:</code>使用<code>JWT</code>进行权限验证，提供一套<code>JWT</code>密钥生成工具</li><li><code>bcryptjs:</code>用于加密密码</li><li><code>cookieparser:</code>解析<code>cookie</code></li><li><code>cloudinary:</code>一款图床工具</li><li><code>sockie.io:</code>用于建立双端实时通信</li><li><code>nodemon:``node</code>的热更新工具，只在开发环境中使用</li></ol><h1 id="搭建服务端框架"><a href="#搭建服务端框架" class="headerlink" title="搭建服务端框架"></a>搭建服务端框架</h1><p>使用<code>node</code>+<code>express</code>搭建服务端应用，简单描述下后端视角下的数据流向，即：前端<code>request</code>-&gt;后端接收-&gt;数据处理与数据库交换-&gt;返回<code>respond</code>。知道这个数据流能帮我们更好地明确项目各部分架构。</p><h2 id="使用express框架构建服务器"><a href="#使用express框架构建服务器" class="headerlink" title="使用express框架构建服务器"></a>使用express框架构建服务器</h2><p>下面我们来介绍下<code>express</code>框架下服务端的三个模块，第一部分为主模块，存放入口程序；第二部分为中间件模块，提供一系列中间件<code>middleware</code>，提供一些额外功能，第三部分为主控路由模块，提供对外接口，包括每个接口的数据处理等</p><h2 id="express入口程序"><a href="#express入口程序" class="headerlink" title="express入口程序"></a>express入口程序</h2><p><code>express</code>的入口程序也可称为整个<code>node</code>后端的入口程序</p><p>创建<code>index.js</code></p><p>在这里主要实现的功能就三个，一是引入需要的<code>express</code>中间件，二是引入需要创建的接口，最后再设置监听的端口并连接数据库，代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> authRoutes <span class="keyword">from</span> <span class="string">&quot;./routes/auth.route.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;dotenv/config&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> cookieParser <span class="keyword">from</span> <span class="string">&quot;cookie-parser&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connectDB &#125; <span class="keyword">from</span> <span class="string">&quot;./lib/db.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api/auth&quot;</span>, authRoutes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">5001</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listening on port:&quot;</span>, <span class="variable constant_">PORT</span>)</span><br><span class="line">  <span class="title function_">connectDB</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>其中，引入的中间件分别为<code>express.json</code>和<code>cookiePaeser</code>，其作用分别是自动解析<code>req</code>中的<code>json</code>数据以及解析<code>cookie</code>，然后再使用路由模块化的方式创建格局清晰的路由监听</p><h2 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h2><p><strong>为什么需要模块化？</strong><br>路由模块化的作用是将分属不同功能的路由区分开来，各司其职，从而方便维护管理<br>通过<code>express.Router()</code>即可创建模块化路由，随后便可以在模块中创建单独的路由了<br>使用相同的<code>Express.use()</code>方式即可在主文件中注入模块</p><p>创建<code>route</code>文件夹，再在其中创建模块，比如用户模块就用<code>auth.route.js</code>命名，这样文件的结构就非常清晰了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; signup, login, logout, updateProfile, checkAuth &#125; <span class="keyword">from</span> <span class="string">&quot;../controllers/auth.controller.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; protectRoute &#125; <span class="keyword">from</span> <span class="string">&quot;../middleware/auth.middleware.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/signup&quot;</span>, signup);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, login);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/logout&quot;</span>, logout);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&quot;/update-profile&quot;</span>,protectRoute, updateProfile);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/check&quot;</span>, protectRoute,checkAuth);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h2 id="单独接口定制"><a href="#单独接口定制" class="headerlink" title="单独接口定制"></a>单独接口定制</h2><p>在单独接口定制中，我们则需要思考每一个具体接口所要实现的功能，如果需要，则通过连接并操作数据库从而得到结果</p><p>每一个接口处理方法都是一个函数，同时，对于某些接口的处理还可以设置多个方法，或者说添加“中间件”，如上述模块中最后两个接口都用到了中间件，用来做<code>jwt</code>验证，使用中间件后需要用<code>next()</code>来保证下一步跳转</p><p><code>auth.route.js</code>中的具体代码如下，代码解析放到后续讲解</p><p>一般将主控函数放到<code>auth.controller.js</code>文件中，将中间件函数放到<code>auth.middleware.js</code>文件中，从而使代码结构更加清晰<br><code>auth.controller.js</code>中代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bcrypt <span class="keyword">from</span> <span class="string">&quot;bcrypt&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&quot;../models/user.model.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; generateToken &#125; <span class="keyword">from</span> <span class="string">&quot;../lib/utils.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">signup</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; fullName, email, password &#125; = req.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!fullName || !email || !password) &#123;</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;All fields are required&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (password.<span class="property">length</span> &lt; <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">.<span class="title function_">status</span>(<span class="number">400</span>)</span><br><span class="line">.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Password must be at least 6 characters long&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; email &#125;);</span><br><span class="line"><span class="keyword">if</span> (user) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;User already exists&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.<span class="title function_">genSalt</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> hashedPassword = <span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(password, salt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newUser = <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line">fullName,</span><br><span class="line">email,</span><br><span class="line"><span class="attr">password</span>: hashedPassword,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (newUser) &#123;</span><br><span class="line"><span class="keyword">await</span> newUser.<span class="title function_">save</span>();</span><br><span class="line"><span class="title function_">generateToken</span>(newUser.<span class="property">_id</span>, res);</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line"><span class="attr">_id</span>: newUser.<span class="property">_id</span>,</span><br><span class="line"><span class="attr">fullName</span>: newUser.<span class="property">fullName</span>,</span><br><span class="line"><span class="attr">email</span>: newUser.<span class="property">email</span>,</span><br><span class="line"><span class="attr">profilePic</span>: newUser.<span class="property">profileImage</span>,</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;invalid user data&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Server error&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; password, email &#125; = req.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; email &#125;);</span><br><span class="line"><span class="keyword">if</span> (!user) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;invalid creditials&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isPasswordCorrect = <span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(password, user.<span class="property">password</span>);</span><br><span class="line"><span class="keyword">if</span> (!isPasswordCorrect) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;invalid creditials&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">generateToken</span>(user.<span class="property">_id</span>, res);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">_id</span>: user.<span class="property">_id</span>,</span><br><span class="line">      <span class="attr">fullName</span>: user.<span class="property">fullName</span>,</span><br><span class="line">      <span class="attr">email</span>: user.<span class="property">email</span>,</span><br><span class="line">      <span class="attr">profilePic</span>: user.<span class="property">profileImage</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Server error&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">logout</span> = (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">res.<span class="title function_">cookie</span>(<span class="string">&quot;jwt&quot;</span>, <span class="string">&quot;&quot;</span>, &#123;</span><br><span class="line"><span class="attr">maxAge</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Logout successful&quot;</span> &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Server error&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">updateProfile</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">const</span> &#123;profileImage&#125; = req.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">if</span>(!profileImage)&#123;</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Profile image is required&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userId = req.<span class="property">user</span>.<span class="property">_id</span>;</span><br><span class="line"><span class="keyword">const</span> uploadResponse = <span class="keyword">await</span> cloudinary.<span class="property">uploader</span>.<span class="title function_">upload</span>(profileImage);</span><br><span class="line"><span class="keyword">const</span> updatedUser = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(userId, &#123;<span class="attr">profileImage</span>:uploadResponse.<span class="property">secure_url</span>&#125;, &#123;<span class="attr">new</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(updatedUser);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error in update profile&quot;</span>, error);</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Server error&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">checkAuth</span> = (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(req.<span class="property">user</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Server error&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>auth.middleware.js</code>中代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;../models/user.model.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">protectRoute</span> = <span class="keyword">async</span> (<span class="params">req, res, next</span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">cookies</span>.<span class="property">jwt</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!token)&#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Unauthorized - No token found&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(token, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>)</span><br><span class="line">    <span class="keyword">if</span>(!decoded)&#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Unauthorized - Invalid token&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findById</span>(decoded.<span class="property">userId</span>).<span class="title function_">select</span>(<span class="string">&quot;-password&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(!user) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;User not found&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="property">user</span> = user</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;route protect error&quot;</span>, error)</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Server error&quot;</span> &#125;) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h1><p>数据库相关操作与全栈项目数据流中的数据处理部分紧密联系，绝大多数服务端接口都要涉及与数据库的交互</p><p>该项目中使用<code>mongodb</code>数据库，使用<code>mongoose</code>来连接数据库和本地代码</p><h2 id="数据库的连接"><a href="#数据库的连接" class="headerlink" title="数据库的连接"></a>数据库的连接</h2><p><code>mongoose</code>插件极大地简化了数据库连接的流程，整个过程中往往只需要项目集群的用户名、密码即可完成连接</p><p>顺带一提另一个插件<code>dotenv</code>，这是个极其方便的插件，用于以键值对的方式将一些变量注入到全局，只需要创建一个<code>.env</code>文件，再在入口文件中引入一次（<code>import &#39;dotenv/config&#39;</code>），后续即可在全局使用<code>process.env.key</code>访问全局变量</p><p>回到<code>mongoose</code>插件的介绍上，我们使用<code>dotenv</code>注入<code>mongoURI</code>的全局变量，随后即可创建连接<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MONGODB_URI = mongodb+srv://&lt;username&gt;:&lt;password&gt;@cluster0.8gafz.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=Cluster0</span><br></pre></td></tr></table></figure><br>创建<code>lib/db.js</code>用于存放连接数据库的工具函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">&quot;mongoose&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">connectDB</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> conn = <span class="keyword">await</span> mongoose.<span class="title function_">connect</span>(process.<span class="property">env</span>.<span class="property">MONGODB_URI</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MongoDB connected:&quot;</span> + conn.<span class="property">connection</span>.<span class="property">host</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后在入口文件中调用即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connectDB &#125; <span class="keyword">from</span> <span class="string">&quot;./lib/db.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listening on port:&quot;</span>, <span class="variable constant_">PORT</span>)</span><br><span class="line">  <span class="title function_">connectDB</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="视图-模型创建"><a href="#视图-模型创建" class="headerlink" title="视图-模型创建"></a>视图-模型创建</h2><p>这里要先简单介绍一下<code>mongodb</code>这个数据库了，<code>mongodb</code>是一个典型的非关系型数据库，区别与关系型数据库，如<code>MYSQL</code>、<code>postgresql</code>等，<code>mongodb</code>使用文档而不是<code>Schema</code>视图进行结构化存储，这使得<code>mongodb</code>的数据结构可以灵活变化</p><p>但使用<code>mongoose</code>时仍要定义<code>Schema</code>视图，以确保数据的一致性、完整性，并且更加清晰地定义数据结构</p><p>在创建完数据库的连接之后，接下来就是要建立视图-模型的关系了<br>在<code>model/user.model.js</code>中创建关于<code>User</code>的视图和模型<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">&quot;mongoose&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">email</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fullName</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">password</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">minlength</span>: <span class="number">6</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">profileImage</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123; <span class="attr">timestamps</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;User&quot;</span>, userSchema);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">User</span>;</span><br></pre></td></tr></table></figure><br>随后，在需要用到该数据库的地方引入<code>User</code>模型，即可对数据库进行相应操作，具体操作还需查看<a href="https://mongoosejs.com/docs/api/model.html">mongoose官方文档</a></p><h1 id="安全保障和身份验证"><a href="#安全保障和身份验证" class="headerlink" title="安全保障和身份验证"></a>安全保障和身份验证</h1><p>接下来详细介绍下有关用户登录注册的几个接口中的重要细节和知识点</p><h2 id="密码的哈希加密"><a href="#密码的哈希加密" class="headerlink" title="密码的哈希加密"></a>密码的哈希加密</h2><p>在需要创建用户登录验证的系统中，在账号创建时常常需要传递用户输入的信息，如账号、密码、邮件等，其中密码虽被称为”密”码，但仍存在安全风险，因此，系统还需对其进行<code>hash</code>加密，以此确保安全性</p><p>使用<code>bcrypt.js</code>实现使用盐（<code>salt</code>）实现对密码的<code>hash</code>加密<br>在注册时创建加密密码，具体过程代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.<span class="title function_">genSalt</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> hashedPassword = <span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(password, salt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newUser = <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line">  fullName,</span><br><span class="line">  email,</span><br><span class="line">  <span class="attr">password</span>: hashedPassword,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>在登陆时对其进行比较，从而验证密码安全性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPasswordCorrect = <span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(password, user.<span class="property">password</span>);</span><br><span class="line"><span class="keyword">if</span> (!isPasswordCorrect) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;invalid creditials&quot;</span> &#125;);</span><br></pre></td></tr></table></figure></p><h2 id="jwt鉴权"><a href="#jwt鉴权" class="headerlink" title="jwt鉴权"></a>jwt鉴权</h2><p>上面介绍了使用<code>bcrypt.js</code>进行安全保障，接下来就讲讲使用<code>jwt</code>进行身份验证</p><p>简单介绍下<code>jwt</code>，<code>jwt(json web token)</code>是一种用户会话存储机制，用于保存和追踪用户的登录信息，确保用户的身份及来源合法<br>通过使用<code>jwt</code>可以防止未授权的访问风险和潜在的安全风险，理论上来说，用户每次向后端发送请求都应该包含<code>token</code>，而确保用户身份的最佳方式就是在用户注册或登录时创建<code>token</code>并将其存放在客户端中</p><p>于是，<code>jwt</code>的实现就应该分为两个部分，一是在用户登录或注册时刷新<code>token</code>并存储在本地（后端表现为返回<code>token</code>），二是在某些需要验证用户身份的接口中验证<code>token</code></p><p>使用<code>jsonwebtoken</code>依赖来实现<code>jwt</code>的生成与验证<br>生成<code>token</code>时需要传入用户负载（<code>payload</code>）和密钥（<code>secretKey</code>）以及一些配置项，详见<a href="https://jsonwebtoken.nodejs.cn/#install">官方配置项</a><br>在<code>lib/utils.js</code>中创建<code>token</code>生成函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&quot;jsonwebtoken&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">generateToken</span> = (<span class="params">userId,res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123; userId &#125;, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>, &#123;</span><br><span class="line">    <span class="attr">expiresIn</span>: <span class="string">&quot;7d&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&quot;jwt&quot;</span>, token, &#123;</span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">secure</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">sameSite</span>: <span class="string">&quot;strict&quot;</span>,</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>验证<code>token</code>时，需要传入待验证的<code>token</code>，密钥以及配置项</p><p>这里还有一个细节，<code>express</code>并不能直接解析请求中的<code>cookie</code>，因此需要使用<code>cookie-parser</code>中间件来直接解析<code>cookie</code></p><p>在<code>middleware/auth.middleware.js</code>中创建用于<code>token</code>验证的中间件<br>至于为什么要用中间件来验证<code>token</code>而在插件文件夹中创建<code>token</code>，这里面涉及到另一个细节，那就是验证完<code>token</code>后将除密码之外的部分传给下一个环节，代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;../models/user.model.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">protectRoute</span> = <span class="keyword">async</span> (<span class="params">req, res, next</span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">cookies</span>.<span class="property">jwt</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!token)&#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Unauthorized - No token found&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(token, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>)</span><br><span class="line">    <span class="keyword">if</span>(!decoded)&#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Unauthorized - Invalid token&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findById</span>(decoded.<span class="property">userId</span>).<span class="title function_">select</span>(<span class="string">&quot;-password&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(!user) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;User not found&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="property">user</span> = user</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;route protect error&quot;</span>, error)</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Server error&quot;</span> &#125;) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 全栈 </tag>
            
            <tag> express </tag>
            
            <tag> react </tag>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统基础</title>
      <link href="/2025/01/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/01/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>从操作系统层次架构的角度讲述操作系统各个模块的基础知识</p></div><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="操作系统定义与结构"><a href="#操作系统定义与结构" class="headerlink" title="操作系统定义与结构"></a>操作系统定义与结构</h2><p>操作系统是沟通底层硬件与用户的桥梁，通过操作系统，用户得以调度系统资源、管理系统。操作系统总体架构大致可分为用户——应用程序——操作系统——硬件几个层次。其中，操作系统主要实现的功能包括内核管理、进程管理、<code>CPU</code>调度、进程同步与死锁、存储系统与虚拟内存、系统接口等部分</p><h2 id="操作系统服务"><a href="#操作系统服务" class="headerlink" title="操作系统服务"></a>操作系统服务</h2><p>依据其要实现的目标，操作系统提供如下服务：</p><ul><li><strong>UI</strong>：提供一系列用户交互接口，包括命令行<code>cli</code>，图形界面<code>GUI</code></li><li><strong>Program execution</strong>：系统需要调度内存中的程序并执行它</li><li><strong>I/O operation</strong>：对外接设备以及文件的I/O读写</li><li><strong>文件系统模拟</strong>：操作系统需要读写文件系统，管理文件权限</li><li><strong>进程调度</strong>：操作系统需要创建调度进程在系统文件中进行信息交换</li><li><strong>错误检测</strong>：操作系统需要能够检测出错误并修改错误</li><li><strong>resource allocation</strong>：资源配置，对多用户的资源配置</li><li><strong>Accounting</strong>：资源调度统计</li><li><strong>Protecting and security</strong>：权限管理</li></ul><div class="note info flat"><p>以上服务可分为两个层面，分别为用户层的UI接口和操作系统层的具体调用逻辑，用户处理信息时分为<code>System call</code>用做在UI界面和系统内部交流的接口，以及程序运行<code>Program execution</code>，即实际上程序内部如何运行调度</p></div><div class="tip bolt"><p><code>System call</code>：获取系统相关信息的调用，例如创建文件，读写文件等，都需要调用<code>system call</code>接口，如<code>open()</code>，<code>write()</code>，<code>chmod()</code>等接口都属于<code>system call</code>的范畴</p></div><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><p>操作系统基于其功能与服务，体现了如下4个特征：</p><ol><li><strong>并发</strong>：两个或多个事件在同一时间间隔内发生，用以在单核<code>CPU</code>中同时运行多个程序</li><li><strong>共享</strong>：系统中的资源可供内存中多个并发执行的进程同时使用(共享访问硬盘资源)</li><li><strong>虚拟化</strong>：把物理实体变为逻辑上的对应物（主要体现在内存管理层面的虚拟内存部分），通过动态分配程序运行空间，从而使得同时打开的内存大于实际内存</li><li><strong>异步</strong>：异步使用系统资源，解决同步等待导致进程调度缓慢的问题</li></ol><h2 id="MS-DOS分层架构"><a href="#MS-DOS分层架构" class="headerlink" title="MS-DOS分层架构"></a>MS-DOS分层架构</h2><p><code>MS-DOS</code>分层架构是如今操作系统中最流行的架构方式<br>依据功能结构不同，将操作系统分为多层，从内到外包括：</p><ol><li><strong><code>BIOS</code>层</strong>：最底层的硬件控制层</li><li><strong><code>DOS</code>内核</strong>：<code>MS-DOS</code>核心文件，包含操作系统基本功能，如内核管理，文件管理等</li><li><strong>命令解释器层</strong>：提供用户和系统内部交流的渠道</li><li><strong>系统应用层</strong>：可以通过命令调用的外部应用</li><li><strong>外部设备层</strong>：外接设备<br>通过分层模块化设计，使得操作系统各层之间不互相干扰，增强系统的灵活性，可维护性，可拓展性，同时，核心小巧，资源占用少，运行高效</li></ol><h2 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h2><h3 id="什么是内核？"><a href="#什么是内核？" class="headerlink" title="什么是内核？"></a>什么是内核？</h3><p>内核是操作系统中执行指令的部分，而内核程序则是操作系统中执行机器指令的系统。现代操作系统一般会有两种状态，分别为用户态和内核态，用户态为常态，用来存储用户信息以及权限等，内核态拥有管理员权限，用来执行一些底层指令</p><h3 id="内核状态切换"><a href="#内核状态切换" class="headerlink" title="内核状态切换"></a>内核状态切换</h3><ul><li><strong>内核态(<code>kernel(0)</code>)</strong>：运行内核程序，此时可以执行特权指令</li><li><strong>用户态(<code>user(1)</code>)</strong>：运行用户程序，只能执行非内核程序</li><li><strong>程序状态字寄存器(<code>PSW</code>)</strong>：用来管理内核态和用户态的切换</li></ul><p><strong>切换方式：</strong></p><ul><li>内核态-&gt;用户态：执行一条修改PSW标志位的特权指令</li><li>用户态-&gt;内核态：由“中断“引发，硬件自动完成变态过程</li></ul><div class="note warning flat"><p>当用户执行完需要的操作后应从内核态切换为用户态</p></div><p>切换为内核态之后就拥有了一系列高级权限，可以执行更多操作，例如：</p><blockquote><ul><li>设置计时器</li><li>清空内存</li><li>关闭中断</li><li>修改设备状态表</li><li>访问I/O设备</li></ul></blockquote><h3 id="微内核（Microkernel）"><a href="#微内核（Microkernel）" class="headerlink" title="微内核（Microkernel）"></a>微内核（Microkernel）</h3><p>微内核是指将操作系统的核心功能缩减到最小，只在内核中保留最基本的资源管理功能，如进程调度，内存管理等，将其余功能移动到用户态中<br><strong>这种设计具有如下好处</strong>：</p><ul><li><strong>易于拓展</strong>：由于核心功能小，故易于拓展</li><li><strong>容易移植</strong>：容易将微内核移动到其他架构中</li><li><strong>更可靠</strong>：模块化设计使每个模块各司其职，故更加可靠，减小出错概率</li><li><strong>安全性高</strong>：由于大部分功能运行在用户态，故减小了系统被攻击的概率<br>但缺点是需要频繁在不同状态间进行切换，故内核状态切换过于缓慢</li></ul><div class="note warning flat"><p>微内核同属一种操作系统结构，除了<code>MS-DOS</code>和微内核结构外，操作系统还提供了一些可以实现的结构，如单核结构，即将所有主要功能都集中在一块大的内核中</p></div><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>要讨论进程的概念就要理解进程与程序之间的关系：</p><ul><li><strong><code>Program</code>程序</strong>：程序是存储在系统磁盘中的一系列可执行文件（<code>passive entity</code>）</li><li><strong><code>Process</code>进程</strong>：进程是活动实体（<code>active entity</code>），具体指定要执行的下一条指令的程序计数器和与其相关联的资源</li></ul><h2 id="进程的组成部分"><a href="#进程的组成部分" class="headerlink" title="进程的组成部分"></a>进程的组成部分</h2><ul><li><strong>进程编码</strong>：<code>PID</code></li><li><strong>当前活动</strong>：包括程序计数器，进程寄存器</li><li><strong>进程栈</strong>：包括函数参数、返回地址、局部变量</li><li><strong>数据段</strong>：全局变量</li><li><strong>进程堆</strong>：为进程动态分配的堆</li></ul><div class="note info flat"><p><code>PCB</code>:进程控制块，记录进程相关信息，包括进程状态，程序计数器，进程调度策略，块内存限制，打开的文件，日志等信息</p></div><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><p>进程执行具有一个执行周期，周期执行对应状态转换，进程有如下状态：</p><ul><li><code>new</code>：进程创建时</li><li><code>running</code>：指令运行</li><li><code>waiting</code>：进程等待某些事件的发生，如<code>I/O</code>操作或某些完成信号</li><li><code>ready</code>：进程准备完成，等待被分配给处理器执行</li><li><code>terminate</code>：进程执行完毕<br><code>waiting</code>状态只能到<code>ready</code>状态才可以进行下一步操作<br><code>running</code>状态可以到<code>waiting</code>、<code>ready</code>、<code>terminate</code>任意状态</li></ul><h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><p>进程调度要实现的目的：</p><ol><li>最大化<code>CPU</code>利用率，快速进行进程间的切换</li><li>在众多进程中选择可靠的进程作为下一个<code>CPU</code>执行进程</li><li>维持进程的调度队列<ul><li><strong>调度队列如下</strong>：</li><li><strong>长程队列（<code>job queue</code>）</strong>：系统中所有进程的集合</li><li><strong>就绪队列（<code>ready queue</code>）</strong>：系统中准备好执行的进程队列，包含两个指针，分别指向队列的头和尾（的<code>PCB</code>）</li><li><strong>等待队列（<code>waiting queue</code>）</strong>：等待执行的进程队列</li><li><strong>设备队列（<code>device queue</code>）</strong>：等待<code>I/O</code>设备的进程队列</li></ul></li></ol><ul><li>进程切换的本质是上下文切换（<code>context switch</code>），通过<code>PCB</code>中记录的信息完成</li><li><p>进程切换的方法是就绪队列中指针的切换</p></li><li><p>进程切换步骤</p><ol><li>保存（<code>save</code>）当前进程状态</li><li>选择下一个要运行的进程</li><li>恢复（<code>restore</code>）新进程状态</li><li>切换内存空间</li><li>更新调度队列</li></ol></li></ul><h2 id="Scheduler调度程序"><a href="#Scheduler调度程序" class="headerlink" title="Scheduler调度程序"></a>Scheduler调度程序</h2><h3 id="进程调度类型"><a href="#进程调度类型" class="headerlink" title="进程调度类型"></a>进程调度类型</h3><ul><li><strong>长程调度（<code>long-term scheduler</code>）</strong>：选择将哪些进程丢进<code>ready queue</code>中</li><li><strong>短程调度（<code>short-term scheduler</code>）</strong>：选择下一个使用CPU资源执行的进程</li><li><strong>中程调度（<code>middle-term schduler</code>）</strong>：负责内存和磁盘的交换，负责将内存中的资源移到磁盘中以让新的资源进入</li></ul><h3 id="CPU-scheduler调度器"><a href="#CPU-scheduler调度器" class="headerlink" title="CPU scheduler调度器"></a>CPU scheduler调度器</h3><p>理想状态下，<code>CPU</code>调度器在<code>ready queue</code>中选择进程并调用<code>CPU</code>执行这项进程<br><strong>调度的目标</strong>：</p><ol><li><strong>提高CPU利用率</strong>：尽量减少<code>CPU</code>空闲时间</li><li><strong>提高系统吞吐量</strong>：在单位时间内完成更多工作</li><li><strong>降低响应时间</strong>：确保交互式系统快速响应用户需求</li><li><strong>保证公平性</strong>：确保所有进程公平分配<code>CPU</code>资源</li></ol><p><strong>调度类型</strong>：</p><ul><li><strong>抢占式调度</strong>：在任意节点启用中断机制，优先级高的进程抢占优先级低的进程</li><li><strong>非抢占式调度</strong>：无中断机制，实现简单</li></ul><p><strong>调度算法</strong>：</p><ol><li><strong>先来先服务（<code>FCFS</code>调度）</strong>：顾名思义，按照进程先后顺序先进先出</li><li><strong>最短优先（<code>SJF</code>调度）</strong>：活动时间最短的进程优先进入</li><li><strong>优先级调度（<code>Priority</code>调度）</strong>：按照优先级排列，数字越小，优先级越高，可以动态决定资源调用</li><li><strong>时间片轮转（<code>RR</code>调度）</strong>：设定一个时间片大小，按照这个时间片进行进程轮转调度</li><li><strong>多级反馈队列（<code>Multiple Feedback Queue</code>）</strong>：使用多个队列，每个队列有其适合的调度算法，按需定制</li></ol><p><strong>平均周转时间</strong>：完成时间-到达时间<br><strong>平均等待时间</strong>：完成时间-到达时间-执行时间</p><h1 id="进程同步和死锁"><a href="#进程同步和死锁" class="headerlink" title="进程同步和死锁"></a>进程同步和死锁</h1><h2 id="进程同步中的相关概念"><a href="#进程同步中的相关概念" class="headerlink" title="进程同步中的相关概念"></a>进程同步中的相关概念</h2><ul><li><strong>临界区（<code>critical section</code>）</strong>：临界区是指访问共享资源的代码段，同时只有一个进程可以进入该区域</li><li><strong>互斥（<code>mutual exclusion</code>）</strong>：如果临界区已经被某个进程占用了，互斥保证没有其他资源可以进入这段临界区</li><li><strong>锁（<code>lock</code>）</strong>：通过<code>acquire</code>和<code>release</code>创建和释放临界区</li><li><strong>信号量（<code>semaphore</code>）</strong>：一个计数器，用于控制对临界区的访问</li></ul><h2 id="计数信号量"><a href="#计数信号量" class="headerlink" title="计数信号量"></a>计数信号量</h2><ul><li>通过两个原子操作<code>P</code>和<code>V</code>控制信号量<code>S</code>从而实现进程互斥，<code>P</code>表示<code>S--</code>，<code>V</code>表示<code>S++</code>，当<code>S&lt;=0</code>时，进程阻塞，<code>S&gt;0</code>时进程启用，于是有如下结论</li><li>当<code>S=0</code>，表示刚好无资源可用</li><li><code>S&gt;0</code>时<code>S</code>的值表示可用进程数</li><li><code>S&lt;0</code>,<code>S</code>的绝对值表示阻塞的进程数</li></ul><h2 id="死锁Dead-Lock"><a href="#死锁Dead-Lock" class="headerlink" title="死锁Dead Lock"></a>死锁Dead Lock</h2><p>死锁是指在多任务或多线程操作系统中多个进程因为相互等待而导致无法继续执行的状态。死锁会导致系统资源的浪费和性能下降</p><p><strong>死锁的条件</strong>：</p><ul><li><strong>互斥（<code>mutual exclusion</code>）</strong>：至少有一个资源是非共享的</li><li><strong>保持和等待（<code>hold and wait</code>）</strong>：一个进程至少已经持有一个资源并在等待其他进程的运行</li><li><strong>非抢占（<code>no preemption</code>）</strong>：已经执行的资源不会被抢占</li><li><strong>环路等待（<code>circle wait</code>）</strong>：存在一个进程链，使得每个进程都在等待别的进程的资源释放</li></ul><p><strong>死锁预防</strong>：</p><ul><li><strong>破坏互斥条件</strong>：使资源共享</li><li><strong>破坏<code>hold and wait</code></strong>：要求进程请求资源时不持有其他资源</li><li><strong>破坏“非抢占”</strong>：允许资源抢占</li><li><strong>破坏“环路”</strong>：要求所有资源按序分配，避免环路形成</li></ul><p><strong>死锁避免</strong>：<br>使用银行家算法（<code>banker algorithm</code>）进行死锁避免<br>计算每个进程的所需资源，比较可用空间，给出进程执行的一个有效序列</p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p>每一个进程都需要一块专属的物理地址空间，这就是内存，而为保证进程能够正确运行就需要内存间互不干扰，这就是内存保护机制。（<code>address proptection</code>），包括地址空间和内存隔离</p><h2 id="程序运行三种绑定时间"><a href="#程序运行三种绑定时间" class="headerlink" title="程序运行三种绑定时间"></a>程序运行三种绑定时间</h2><ul><li><strong>编译时绑定（<code>compile time binding</code>）</strong>：编译时绑定内存，生成绝对内存代码</li><li><strong>加载时绑定（<code>load time binding</code>）</strong>：在编译时不知道内存位置，需要生成可重定位的代码</li><li><strong>执行时绑定（<code>execute time binding</code>）</strong>：程序执行时动态分配内存段</li></ul><h2 id="内存地址类型"><a href="#内存地址类型" class="headerlink" title="内存地址类型"></a>内存地址类型</h2><ul><li><strong>逻辑地址（<code>logical address</code>）</strong>：由CPU生成，逻辑地址，也被称为虚拟地址</li><li><strong>物理地址（<code>physical address</code>）</strong>：内存单元中的地址</li></ul><h2 id="内存保护机制的实现"><a href="#内存保护机制的实现" class="headerlink" title="内存保护机制的实现"></a>内存保护机制的实现</h2><h3 id="分页（paging）"><a href="#分页（paging）" class="headerlink" title="分页（paging）"></a>分页（paging）</h3><p><strong>定义</strong>：分页是一种内存管理技术，将物理内存分为固定大小的块，称为页框（<code>page frame</code>），将逻辑内存分为大小相同的块，称为页（<code>paging</code>），用页表（<code>page table</code>）将逻辑地址映射到物理地址</p><ul><li><strong>页面大小（<code>page size</code>）</strong>：一张页面的大小，可用来求页面数量</li><li><strong>页号（<code>page number</code>）</strong>：地址所在的逻辑页号，在页表中根据页号映射物理地址</li><li><strong>偏移量（<code>offset</code>）</strong>：由页面大小决定，决定在一张页中的位置</li></ul><h3 id="分段（segmentation）"><a href="#分段（segmentation）" class="headerlink" title="分段（segmentation）"></a>分段（segmentation）</h3><p>分段是另一种内存管理技术，将程序和数据分为若干段，每个段包括起始地址和段长，更符合程序的自然结构，区别于分页技术，分段中各个段的段长是可控的，因此可以按照需要分配</p><h3 id="分页vs分段"><a href="#分页vs分段" class="headerlink" title="分页vs分段"></a>分页vs分段</h3><ul><li>分页大小是固定的，分段不是固定的</li><li>分页有助于内存管理，分段有助于从程序员的视角看待问题</li><li>一个使用页表管理，一个使用段表管理</li><li>分页不易出现碎片化，分段容易出现内存碎片（<code>fragmentation</code>）</li></ul><h3 id="几种页表结构"><a href="#几种页表结构" class="headerlink" title="几种页表结构"></a>几种页表结构</h3><ul><li><strong><code>single-level page table</code>（单级页表）</strong>：简单的线性数组，每个条目对应一个页面</li><li><strong><code>multi-level page table</code>（多级页表）</strong>：采用分级结构，第一级页表指向第二级页表，依次类推</li><li><strong><code>inverted page table</code>（倒置页表）</strong>：只有一个表，每个条目对应一个物理帧</li><li><strong><code>hash page table</code>（哈希页表）</strong>：通过哈希页表进行虚拟地址到物理地址的映射</li></ul><h2 id="TLB页面访问加速"><a href="#TLB页面访问加速" class="headerlink" title="TLB页面访问加速"></a>TLB页面访问加速</h2><p><code>TLB</code>是一种高速缓存，用来存储最近使用过的页面条目，当<code>CPU</code>重新调度某个页面时，其会先在<code>TLB</code>上寻找，从而加快页表查找效率和命中率</p><h1 id="虚拟内存管理"><a href="#虚拟内存管理" class="headerlink" title="虚拟内存管理"></a>虚拟内存管理</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>虚拟内存是一种内存管理技术，它使得每个进程都拥有一个虚拟的地址空间。这些虚拟地址空间可以独立于物理内存进行分配和管理。</p><p>虚拟内存通过硬件和软件的结合，使得程序员可以编写在有限内存资源上运行的大程序，而不必担心物理内存的限制。<br><div class="note info flat"><p>虚拟地址空间限度取决于<code>CPU</code>逻辑地址容量</p></div></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>虚拟内存通过地址转换机制，将虚拟地址映射到物理地址。地址转换通常由内存管理单元（<code>MMU</code>）在硬件层面完成。<code>MMU</code>使用页表将虚拟地址翻译为物理地址。<br>简而言之，动态使用物理地址，通过展示页面的切换完成</p><ul><li>页：虚拟内存和物理内存都划分为固定大小的块，称为页。默认情况下，每页的大小是<code>4KB</code>。</li><li>页表：页表是存储虚拟地址到物理地址映射关系的数据结构。每个进程都有一个页表，用于管理其虚拟地址空间。</li></ul><h3 id="页表机制"><a href="#页表机制" class="headerlink" title="页表机制"></a>页表机制</h3><p>通过虚拟地址到物理地址的映射，当<code>CPU</code>访问虚拟地址时，自动将其转化为物理地址</p><ul><li><strong>虚拟地址</strong>：包含页号和偏移量</li><li><strong>页表结构</strong>：存储从虚拟地址到物理地址映射关系的数据结构</li><li><strong>地址转换</strong>：由内存管理单元（<code>MMU</code>）完成，<code>MMU</code>查找页表并将其翻译为物理地址</li></ul><h3 id="转化规则"><a href="#转化规则" class="headerlink" title="转化规则"></a>转化规则</h3><ul><li><strong>提取页号和偏移量</strong>：从虚拟地址中提取出页号和页内偏移量</li><li><strong>查找页表</strong>：查找页号对应页表项，找到物理内存页框号</li><li><strong>计算物理地址</strong>：物理页框号+偏移量 = 最终物理地址</li></ul><div class="note warning flat"><p>验证规则：当虚拟页号小于页表中的<code>limit</code>限制，则转化无法完成</p></div><h2 id="页面调度策略"><a href="#页面调度策略" class="headerlink" title="页面调度策略"></a>页面调度策略</h2><p>决定物理内存和磁盘间的资源调度<br><div class="note primary flat"><p>下列样例中，页面访问序列表示虚拟内存序列，数字表示页面编号，将其替换到物理内存中，下面例子默认页面窗格大小为3</p></div><br><div class="note info flat"><p>加载页面的过程称为页面错误（缺页<code>fault</code>）</p></div></p><h3 id="OPT算法：活跃替换（Optimal-Page-Replacement）"><a href="#OPT算法：活跃替换（Optimal-Page-Replacement）" class="headerlink" title="OPT算法：活跃替换（Optimal Page Replacement）"></a>OPT算法：活跃替换（Optimal Page Replacement）</h3><ul><li>理想最优算法，选择那些在未来最长时间内不会被访问的页面（需要预先知道页面访问频率，故只存在于理想情况）替换</li><li><strong>示例</strong>：<ul><li>页面访问序列为：7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2</li><li>替换过程：2-&gt;7(7页面出现次数最少)</li></ul></li></ul><h3 id="FIFO算法：先进先出（First-In-First-Out）"><a href="#FIFO算法：先进先出（First-In-First-Out）" class="headerlink" title="FIFO算法：先进先出（First In, First Out）"></a>FIFO算法：先进先出（First In, First Out）</h3><ul><li>先进先出算法，不考虑页面是否被访问过</li><li>会造成<code>belady</code>异常现象</li><li>重复出现时不会刷新时间戳</li><li><strong>示例</strong>：<ul><li>页面访问序列为：7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2</li><li>替换过程：2-&gt;7（7最先进入，最先替换）</li></ul></li></ul><h3 id="LRU算法：频率替换（Least-Recently-Used）"><a href="#LRU算法：频率替换（Least-Recently-Used）" class="headerlink" title="LRU算法：频率替换（Least Recently Used）"></a>LRU算法：频率替换（Least Recently Used）</h3><ul><li>选择最近使用最少的页面</li><li>选择方式是从当前节点往前数最晚到达的节点</li><li><strong>示例</strong>：<ul><li>页面访问序列为：7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2</li><li>替换过程：2-&gt;7（目前频率都为0，依序选择7）</li></ul></li><li>实现<code>LRU</code>算法的两种方式<ul><li><strong><code>Counter</code>计时器法</strong>：为每个页面添加一个计时器，每当调用该页面时启用计时器，根据页面计时器大小决定替换的页面</li><li><strong><code>Stack</code>堆栈法</strong>：维护一个栈数据结构，每当有新页面调用时，将其移动到栈顶，从而刷新页面最后访问时间，以此寻找最后调用页面</li></ul></li></ul><h3 id="clock算法：时钟算法（second-choice-algorithm）"><a href="#clock算法：时钟算法（second-choice-algorithm）" class="headerlink" title="clock算法：时钟算法（second choice algorithm）"></a>clock算法：时钟算法（second choice algorithm）</h3><ul><li>添加一个对页面的指针，指针依序遍历物理内存，遍历则-1，每次访问页面时指针引用值＋1，找到引用值为0时便替换，并将指针后移</li><li><strong>示例</strong>：<ul><li>页面访问序列为：7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2</li><li>替换过程：2-&gt;7（开始全为1，遍历一轮全为0）</li><li>0-&gt;0(替换后0引用值为1，其他都为0)</li><li>3-&gt;1（依此类推）</li></ul></li></ul><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>用以存储文件和目录信息，对磁盘中的文件资源进行定位与查找</p><p><strong>文件系统地址分配方法</strong>：</p><ul><li><strong>连续分配法（<code>contiguous allocation</code>）</strong>：每个文件在磁盘上占用连续的块，需要起始块号和长度，容易产生外部碎片，扩展困难</li><li><strong>链表分配法（<code>linked allocation</code>）</strong>：使用链表进行块之间的分配，不易产生外部碎片，容易扩展，顺序访问速度慢</li><li><strong>索引分配法（<code>index allocation</code>）</strong>：为每个文件分配一个索引块，之后只需要在索引块中寻找文件即可，访问速度快且避免外部碎片但需要格外占用空间<ul><li><strong>多级索引</strong>：采用多块索引块依次指向目标文件</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 大学课程 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础</title>
      <link href="/2025/01/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/01/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>对大学的计算机网络基础做一个总结</p></div><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="因特网的构成"><a href="#因特网的构成" class="headerlink" title="因特网的构成"></a>因特网的构成</h2><p>用一句话来总结因特网就是主机（<code>host</code>）/端系统（<code>end-system</code>）之间通过通信链路（<code>communication link</code>）或分组交换机（<code>packet switch</code>）建立起的互联网，下面简单描述下因特网中的相关概念：</p><blockquote><ol><li>端系统：使用因特网的设备（包括用户以及服务器）</li><li>通信链路：由光纤、铜线等组成的物理媒介(导引型媒介)，空气，局域网(非导引型媒介)</li><li>分组交换机(<code>packet switch</code>)：数据传递的中介，包括路由器、链路层交换机（<code>link-layer switch</code>）</li><li>传输速率（<code>bit/s</code>/<code>bps</code>）：链路间传输数据的速率</li><li>分组：数据传输过程中以段为单位，并为每段加上一个首部字节，每一段称为一组，端系统通过分组交换资源</li><li><code>ISP</code>(<code>Internet server provider</code>)：因特网服务提供商，提供因特网服务的供应商</li><li>协议：规定在两个或多个通讯实体间的数据交换格式</li><li>网络边缘：具体用户用户使用的英特网设备，使用接入网连接到边缘路由器</li><li>网络核心：由互联因特网端系统的分组交换机和链路构成的网状网络</li></ol></blockquote><div class="note warning flat"><p>一般来说，路由器为网络与网络进行交换的节点，交换机等设备是网络内节点</p></div><h2 id="网络边缘vs网络核心"><a href="#网络边缘vs网络核心" class="headerlink" title="网络边缘vs网络核心"></a>网络边缘vs网络核心</h2><h3 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h3><ul><li><strong>定义</strong>：主机，应用程序等具体面向客户的因特网设备</li><li><strong>构成</strong>：<ul><li>端系统(主机)：运行的应用程序，如<code>web</code>等</li><li>客户/服务器模式：客户端向服务器请求数据，资源</li><li>对等(<code>peer-peer</code>)模式：没有专门的服务器，每个主机都是提供商与接收者</li></ul></li><li><strong>目标</strong>：在端系统之间传递数据</li><li><strong>握手</strong>：在数据传递之前做好准备</li><li><code>TCP(transmission control protocol)：</code>传输控制协议<ul><li>可靠、按顺序地传递数据</li><li>流量控制：传送方不会淹没接收方</li><li>拥塞控制：当网络拥堵时，发送方降低发送速率</li><li>服务：<code>HTTP(web)</code>、<code>FTP</code>(文件传送)、<code>telnet</code>(远程登录)、<code>SMTP(email)</code></li></ul></li><li><code>UDP(user datagram protocol)：</code>用户数据报协议<ul><li>不可靠数据传输，无链接，无流量控制，无拥塞控制</li><li>服务：流媒体、远程会议、<code>DNS</code>、<code>internet</code>电话</li></ul></li></ul><h3 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h3><ul><li><strong>定义</strong>：路由器的网状结构。</li><li><strong>目标</strong>：实现网络端到端数据传输的具体实现</li><li><strong>方式</strong>：分为电路交换和分组交换两种</li></ul><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>电路交换</button><button type="button" class="tab"><i class="icon"></i>分组交换</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><strong>方式</strong>：预留一条专有电路</li><li><strong>特点</strong>：独享资源，浪费资源，保证性能 （为每个用户预留资源）</li><li><strong>电路交换方式</strong>：<ul><li><strong>频分</strong>(<code>FDM</code>)：每条通讯独享一个频率段</li><li><strong>时分</strong>(<code>TDM</code>)：所有通讯按照时间插入推进，用时隙数描述不同时间片段数</li></ul></li><li><strong>使用场景</strong>：建立连接时间长，浪费片数较多，不适用于计算机通信</li></ul></div><div class="tab-item-content"><ul><li><strong>方式</strong>：以分组为单位存储、转发，不再将网络资源分为一个个片，传输时使用全部带宽</li><li><strong>特点</strong>：报文被切分为分组时，会在分组切片上加上分组头部，用于识别分组</li><li><strong>单位</strong>：<ul><li>分组每次移动称为一跳(<code>hop</code>)</li><li>链路速率R</li><li>分组长度L</li></ul></li><li><strong>分组延时</strong>：由于分组交换需要每组完整进入后续节点，故存在等待延时L/R s(一次)</li><li><strong>排队</strong>:如果到达速率&gt;输出速率，分组就会排队等待传输，如果路由器缓存用完了，分组就会被抛弃</li><li><strong>转发</strong>：将分组从路由器的输入链路转移到输出链路</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note info flat"><ol><li>同样的网络资源，分组交换允许更多用户使用网络资源(电路交互预留资源造成极大浪费)</li><li>分组交换适合于突发式数据传输</li><li>分组交换过度使用会导致网络堵塞</li></ol></div><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><ul><li><strong>定义</strong>：节点和节点传输之间所造成的延迟</li><li><strong>时延的类型：</strong><ul><li><strong>节点处理时延</strong>（$d_{proc}$）：交换器内部导向的时延</li><li><strong>排队时延</strong>（$d_{queue}$）：分组等待交换器处理的时延</li><li><strong>传输时延</strong>（$d_{trans}$）：分组在交换器之间传播完整性等待的时延L/R</li><li><strong>传播时延</strong>（$d_{prop}$）：在物理媒介中信息传播的时延d/s (物理长度/传输速度)</li><li>总时延为四者之和</li></ul></li><li><strong>排队时延和丢包：</strong></li><li><strong>流量强度：</strong><code>aL/R</code>，<code>a</code>:分组/s，<code>L</code>:每组数据量(<code>bit</code>)，<code>R</code>:传输速率(<code>bps</code>)<ul><li>当流量强度&gt;1：输入数据量大于输出数据量，具有排队时延，且会趋向无穷大</li></ul></li><li><strong>丢包</strong>：实际设计中具有排队容量，当流量强度&gt;1，数据量超过排队流量后，更多的分组会被丢弃，这个过程被称为丢包</li><li><strong>吞吐量</strong>：系统间传输的宏观时间，分为瞬时吞吐量和平均吞吐量，平均吞吐量由链路中速率最小的一方决定，该链路被称为瓶颈链路</li></ul><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><blockquote><ol><li>第一层网络结构：由第一层提供商<code>ISP</code>向全球用户提供网络服务</li><li>第二层网络结构：更小型(区域性)的第二层<code>ISP</code></li><li>第三层网络结构：层层递进的网络结构</li><li>第四层网络结构：引入对等(<code>peer</code>)概念，用网络交换点(<code>IXP</code>)实现不同层级的对等</li><li>第五层网络结构：在对等的基础上引入第一层内容提供商</li></ol></blockquote><h2 id="因特网自顶向下协议栈"><a href="#因特网自顶向下协议栈" class="headerlink" title="因特网自顶向下协议栈"></a>因特网自顶向下协议栈</h2><p>传统五层协议栈：</p><blockquote><ol><li>应用层：网络应用（<code>HTTP</code>、<code>FTP</code>、<code>SMTP</code>、<code>DNS</code>），单位：报文(<code>message</code>)</li><li>传输层：主机之间的数据传输（<code>TCP</code>、<code>UDP</code>），单位：报文段(<code>segment</code>)、<code>TCP/UDP</code>数据报</li><li>网络层：数据从源主机到路由（<code>IP</code>、路由协议），单位：分组<code>packet</code></li><li>链路层：相邻网络节点之间的数据传输（点对点协议<code>PPP</code>、<code>wifi</code>），单位：帧(<code>frame</code>)</li><li>物理层：在物理媒介上传输数据，单位：位(<code>bit</code>)</li></ol></blockquote><p><code>OIS7</code>层网络模型：<br>在传统模型基础上增加了表示层：用于数据加密、数据压缩等；以及会话层：实现数据交换的同步，检查，恢复</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><div class="note warning flat"><p>网络核心的分层结构有一个明显的特点，就是上层结构只由下层作为基础，层层递进。也就是说，网络核心的网络层及以下并不在应用层起作用，应用层的软件交互是由传输层实现的</p></div><h2 id="应用层体系结构"><a href="#应用层体系结构" class="headerlink" title="应用层体系结构"></a>应用层体系结构</h2><blockquote><ul><li>客户-服务器体系：一个<code>always-open</code>主机作为服务器，为客户提供服务</li><li><code>P2P</code>体系：对等体系，无需中间商交互，直接共享信息</li></ul></blockquote><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><ul><li><strong>通信方式</strong>：进程通过套接字(<code>soket</code>)的软件接口向网络发送或接收报文，其中，报文在网络传输层通过<code>TCP</code>或<code>UDP</code>进行数据传递</li><li><strong>寻址方式</strong>：通过寻找(服务器)主机<code>IP</code>地址和端口号进行进程寻址</li></ul><h2 id="应用程序服务质量指标"><a href="#应用程序服务质量指标" class="headerlink" title="应用程序服务质量指标"></a>应用程序服务质量指标</h2><blockquote><ol><li>可靠数据传输：数据传输时的分组丢失情况</li><li>吞吐量：进程间进行数据交互的速率<code>bps</code></li><li>定时：时间限制，保证每个字节数据到达时间之间的间隔，参考视频加载</li><li>安全性：加解密，保证运输协议能提供一种或多种安全服务</li></ol></blockquote><h2 id="因特网提供的运输层服务"><a href="#因特网提供的运输层服务" class="headerlink" title="因特网提供的运输层服务"></a>因特网提供的运输层服务</h2><ul><li><strong><code>TCP/IP</code>服务</strong>：面向连接服务和可靠的数据传输，默认端口号<code>80</code><ul><li><strong>特点：</strong><ol><li>面向连接：数据报文流动前，<code>TCP</code>让服务器和客户端交换运输层的控制信息，这就是握手，在握手过后，一个<code>TCP</code>连接就建立了</li></ol></li></ul><ol><li>可靠的数据传输：通信进程能够依靠 <code>TCP</code>, 无差错、按适当顺序交付所有发送的数据。没有数据冗余和丢失</li><li>拥塞控制机制：当传输过程出现拥塞时停止传输</li></ol><ul><li><strong>SSL(Secure Socket Layer)/TLS</strong>:安全套接字层，用以在应用层加强<code>TCP</code>，对套接字进行加解密</li></ul></li><li><strong><code>UDP</code>服务</strong>：仅提供最小服务的轻量级运输协议，不保证数据完整性，没有握手过程，没有拥塞机制</li></ul><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><ul><li><strong>定义</strong>:运行在不同端系统上时的报文交换形式，包括报文交换类型，报文语法，字段语义，进程间发送和响应报文的规则</li><li>常见类别有<code>SMTP</code>（电子邮件）<code>Telnet</code>（远程终端访问）<code>Http</code>（<code>web</code>、流式多媒体）<code>FTP</code>（文件传输）<code>SIP</code>、<code>RTP</code>（因特网电话）</li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p><strong>概述</strong>：<code>http</code>协议全称超文本传输协议，确定服务器客户端结构，明确报文类型，报文由对象构成，<code>html</code>页面，图片等都可被称为一个对象。运输层使用<code>TCP</code>进行数据传输。<br><strong>非持续连接</strong>：</p><ol><li><code>HTTP</code>客户端在<code>80</code>端口号发起一个到服务器的<code>TCP</code>连接，在客户端和服务器上分别有一个<code>socket</code>与该连接相关联，服务器接收连接并返回给客户端</li><li><code>HTTP</code>客户端向服务器发送请求</li><li><code>HTTP</code>服务器获取请求，检索<code>URL</code>并返回响应报文</li><li><code>HTTP</code>服务器进程通知<code>TCP</code>关闭<code>TCP</code>连接</li><li><code>HTTP</code>客户端接收报文，<code>TCP</code>连接关闭</li><li>对每个请求文件重复1~5操作</li></ol><p>其中，一次往返被称为一个往返时间<code>RTT</code>，总往返时间为：2 * RTT+传输时间</p><p><strong>持续连接</strong>：</p><ul><li><strong>特点</strong>：服务器返回响应后仍保持TCP连接，相同客户端和服务器的后续请求和响应报文通过相同连接传递，从而节省建立TCP连接的时间</li><li><strong>非流水持续方式</strong>：只有上一个请求响应后进行下一个请求</li><li><strong>流水持续方式</strong>：请求持续发送，无需等待，<code>http1.1</code>默认方式</li></ul><h2 id="DNS域名解析系统"><a href="#DNS域名解析系统" class="headerlink" title="DNS域名解析系统"></a>DNS域名解析系统</h2><ul><li>主要目的：1、进行主机域名到<code>IP</code>地址的解析2、主机别名和规范名字的转换（别名——正规名字——<code>IP</code>地址）</li><li><code>DNS</code>域名结构：倒树级结构，逐层向上直到树根——主机域名.三级域.(二级域).顶级域</li><li><code>DNS</code>查询：<ul><li>本地服务器：当主机发起一个DNS查询时，查询被送到本地服务器完成</li><li>递归查询：从本地服务器到根服务器，由根服务器从树根到顶级域，逐层往树叶查找</li><li>迭代查询：由本地服务器从根服务器开始逐层查询，减少根服务器负载</li></ul></li><li><code>DNS</code>缓存：当服务器使用了一个映射，就将该映射缓存起来，从而提高查询效率</li><li><code>DDoS</code>攻击：对根服务器进行流量轰炸，从而使查询阻塞</li></ul><h2 id="文件分发模式"><a href="#文件分发模式" class="headerlink" title="文件分发模式"></a>文件分发模式</h2><ul><li><strong>文件分发模式</strong>：</li><li><strong><code>C/S</code>模式</strong>：由服务器进行资源传输，每个客户端独立接收，需要上传N份文件<ul><li>分发耗时：$D<em>{C/S}&gt;=max(NF/d</em>{up},F/d_{min})$，服务器上传N份文件，上传时间为NF/d，客户端并行下载，故F/d决定下载耗时，总耗时由N决定，线性增加</li></ul></li><li><strong><code>P2P</code>模式</strong>：除了服务器上载，所有客户端节点都可以上载，故随着客户量增多，总耗时增加速率变缓<ul><li>分发耗时：$D_{P2P}$ &gt;= max{F/us,,F/dmin,,NF/(us + $\sum$ui)}</li></ul></li></ul><h2 id="视频流化服务和CDN"><a href="#视频流化服务和CDN" class="headerlink" title="视频流化服务和CDN"></a>视频流化服务和CDN</h2><ul><li><strong>多媒体流化技术</strong>：<ul><li>服务端将视频文件分割成多个块，</li><li>每个块独立存储，编码于不同码率</li><li>告示文件：提供不同块的<code>URL</code></li><li>客户端先获取告示文件，根据告示文件动态请求不同的块从而实现流化播放</li></ul></li><li><strong><code>CDN</code></strong>：内容分发网络<ul><li>通过将内容缓存到离用户较近的服务器节点上，提高内容访问速度和可靠性。</li></ul></li></ul><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>传输层的职责是负责主机间的数据传输，提供可靠的数据传输服务和流量控制<br>其中涉及到的协议如下：</p><blockquote><ol><li><code>TCP</code>(传输控制协议)：为调用它的应用程序提供了一种可靠的、 面向连接的服务，拥有拥塞控制、流量控制等机制，对数据完整传输交付有良好适应性</li><li><code>UDP</code>(用户数据报协议)：提供了一种不可靠、无连接的服务，无拥塞控制、流量控制，会有数据损失，但也因此数据传输较快，适用于对数据完整度要求不高的服务</li><li><code>IP</code>(网际协议)：网络层通信协议，为主机之间提供逻辑通信，尽力交付服务</li></ol></blockquote><div class="note info flat"><p>基于分层网络结构”只关注当前层和服务提供层”的理念，传输层只关心当前层次中的点对点数据传输</p></div><h2 id="多路复用与多路分解"><a href="#多路复用与多路分解" class="headerlink" title="多路复用与多路分解"></a>多路复用与多路分解</h2><ul><li><strong>定义</strong>：将网络层提供的主机与主机的交付服务延伸到应用进程到进程的交付服务。(进程与本机之间的交互)</li><li><strong>多路复用的要求</strong>：1、源端口号2、目标端口号，总计<code>32bits</code></li><li><strong>端口号</strong>：分别由<code>16bits</code>二进制数组成，数据范围在<code>0~65535</code>之间<ul><li>一般情况下端口号<code>1~1023</code>被分配给系统应用使用</li></ul></li><li><strong>分解服务</strong>：当报文到达主机时，运输层检查报文段中的目的端口号，并将它定向到相应的套接字</li></ul><h2 id="可靠数据传输-rdt"><a href="#可靠数据传输-rdt" class="headerlink" title="可靠数据传输(rdt)"></a>可靠数据传输(rdt)</h2><ul><li><strong>定义</strong>：保证不出错，不丢失的数据传输方式</li><li><strong>确认阶段</strong>：接收方对分组进行校验，如果数据正确，返回<code>ACK</code>；数据错误，返回<code>NAK</code>，发送方根据放回结果决定下一个发送对象，如果为<code>NAK</code>，重新发送一个分组，直到收到<code>ACK</code></li><li><strong>顺序控制（停止-等待协议）</strong>：<ul><li><code>rdt2.1</code>：增加<code>0，1</code>状态量，在分组中加入序列号(<code>0,1</code>)以两个分组为一个校验阶段，从而防止<code>ACK</code>重复递交导致数据重复，确保数据顺序正确；</li><li><code>rdt2.2</code>：无<code>NAK</code>协议，用最后接收正确分组的<code>ACK</code>替代<code>NAK</code>，从而减少确认信息</li><li><code>rdt3.0</code>：增加超时重传机制，通过重传解决丢包问题</li><li><code>rdt</code>的缺陷：发送方——接收方之间停止等待时间(<code>RTT</code>)占比过大，导致资源利用率过低</li></ul></li><li><strong>流水线协议</strong>：<ul><li><strong>定义</strong>：允许发送方在未得到对方确认的情况下一次性发送多个分组的协议</li><li><strong>方法</strong>：<ul><li>增加序号范围，用多个<code>bit</code>表示分组序号</li><li>增加缓冲区，发送方用以等待重传，接收方用于将接受的乱序数据排序交付</li></ul></li><li><strong>滑动窗口协议</strong>：<ul><li><strong>发送窗口</strong>：在未接收的情况下一次发送多个分组，窗口大小由发送缓冲区大小决定，当确认接收后，窗口向后滑动</li><li><strong>接收窗口</strong>：大小由缓冲区大小确定，按顺序移动，只有低序号的分组到来，窗口才向后移动</li></ul></li></ul></li><li><strong>两种通用的流水线协议</strong>：<ul><li><strong><code>GBN</code>协议</strong>：<ul><li><strong>实现</strong>：接收方缓冲区大小为1，顺序接收分组；</li><li><strong>重传</strong>：设置一个定时器，时间到达重传所有未确认分组</li><li><strong>异常处理</strong>：当接收数据失败时，发送方重新发送整个缓冲区的分组</li><li><strong>特点</strong>：简单，所需资源少，出错回退代价大，适用于出错率低</li></ul></li><li><strong><code>SR</code>协议</strong>：<ul><li><strong>实现</strong>：接收方缓冲区大小&gt;1，允许乱序接收分组</li><li><strong>重传</strong>：为每个分组保持一个定时器，单独发送未确认分组</li><li><strong>异常处理</strong>：某个分组接收失败时，单独重发该分组</li><li><strong>特点</strong>：出错时重传代价小，所需资源多</li></ul></li></ul></li></ul><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><ul><li><strong><code>TCP</code>实现</strong>：点对点，可靠的数据传输，拥塞控制，发送和接收缓存，全双工数据流动，面向连接，有拥塞控制（<code>http/https</code>协议底层是依靠<code>TCP</code>传输协议）</li><li><strong><code>TCP</code>报文段结构</strong>：<ul><li>源端口号(<code>16bits</code>)</li><li>目标端口号(<code>16bits</code>)</li><li>序号(<code>32bit</code>)：报文段首字节在字节流中的编号</li><li>确认号(<code>32bit</code>)：已经确认接收的报文段编号,即<code>ACK</code>号<div class="note warning flat"><p>确认号是目标端口期望获取的第一个字段<code>id</code>，因此确认号和序列号首位编号是一样的</p></div></li></ul></li><li><strong><code>TCP</code>往返延时(<code>RTT</code>)和超时</strong>：<ul><li>超时时间根据估算时间和采样时间动态设置</li><li><strong><code>TCP</code>快速重传</strong>:<ul><li><strong>原理</strong>：如果发送方连续收到3个冗余的<code>ACK</code>，重传最小序号的段</li><li><strong>作用</strong>：在计时器超时之前重发报文段，从而增加传输效率</li></ul></li></ul></li><li><strong><code>TCP</code>流量控制</strong>:<ul><li>由接收方控制发送方，不让发送方发送数据太多，导致缓冲区溢出</li></ul></li><li><strong><code>TCP</code>连接管理</strong>:<ul><li><strong>握手</strong>：在正式交换数据前，发送方和接收方握手建立通信关系</li><li><strong>2次握手的隐患</strong>：超时后继续建立连接，导致服务器维护被废弃的半连接，浪费资源</li><li><strong>3次握手本质</strong>：发送方向接收方请求连接，接收方接收连接并向发送方发送反请求，发送方接收反请求并向请求方返回响应结果，接收方接收响应，连接建立</li><li><strong>关闭连接</strong>：把<code>TCP</code>连接看成两个半连接，一方向另一方发起请求关闭信息，关闭对向连接</li></ul></li><li><strong><code>TCP</code>拥塞机制</strong>：<ul><li><strong>拥塞定义</strong>：太多的数据需要网络传输，超过了网络的处理能力</li><li><strong>拥塞表现</strong>：<ul><li>分组丢失</li><li>分组经历较长的延时</li></ul></li><li><strong>拥塞检测</strong>：超时检测</li><li><strong>控制拥塞</strong>：<ul><li><strong>慢启动阶段(<code>AIMD</code>)</strong>：初始<code>cwnd</code>为1，每收到<code>ACK</code>后，<code>cwnd</code>翻倍</li><li><strong>拥塞避免阶段</strong>：当达到上次拥塞时值的一半，进入拥塞避免状态，线性增加<code>cwnd</code></li><li><strong>快速恢复阶段</strong>：当丢包之后，立即重传丢失的数据段，<code>cwnd</code>减半，后线性增加</li></ul></li></ul></li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><ul><li><p><strong>网络层功能</strong>：将分组从一台主机传到另一台主机，处理路由间的转发和链路间路由选择的功能，简而言之，负责从源主机到目标主机的路由间的最佳路径选择（转发和路径选择）</p><blockquote><p>路径选择分为两个模块，分别是数据平面和控制平面，数据平面负责数据包的封装和发送过程；控制平面则负责网络设备的管理和配置，包括路由选择和策略控制等，包括维护路由表等宏观控制</p></blockquote></li><li><p><strong>数据平面</strong>：</p><ul><li><strong>定义</strong>：主要负责实际的数据包转发和处理</li><li><strong>功能</strong>：<ul><li><strong>数据包转发</strong>：根据转发表，将接收到的数据转发到下一个节点</li><li><strong>数据包处理</strong>：包括数据包处理，过滤，加解密等操作</li><li><strong>流量管理</strong>：通过流量整形和优先级队列管理流量</li></ul></li></ul></li><li><strong>控制平面</strong>：<ul><li><strong>定义</strong>：控制平面负责网络的整体控制逻辑和管理任务，通过维护和更新路由信息来指导数据平面的操作</li><li><strong>功能</strong>：<ul><li><strong>路由选择</strong>：根据网络拓扑和路由协议维护网络</li><li><strong>拓扑发现</strong>：通过协议交换信息，了解网络拓扑结构</li><li><strong>配置和管理</strong>：设置和管理网络设备配置，确保网络正常运行</li></ul></li></ul></li></ul><h2 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h2><ul><li><strong>定义</strong>：数据分片源于链路层对数据的最大荷载，依据链路层最大传输单元（<code>MTU</code>）将数据包截成多端数据包在路由之间传输</li><li><strong>结构</strong>：<code>IP</code>字段分为<code>IP</code>首部和荷载，首部固定为<code>20byte</code>，实际要分段的是荷载</li><li>偏移量单位取每段数据包大小/8</li><li><code>MF</code>标志标识最后一段，用(<code>0/1</code>)标识</li><li><strong>样例</strong>：<ul><li>若数据报为<code>4000byte</code>，<code>MTU</code>为<code>1500</code>，则每个字段有<code>20byte</code>首部长度</li><li>实际要处理的数据包大小为<code>3980byte</code>，每段最大长度为<code>1480byte</code></li><li>每一段偏移量为<code>185（1480/8）</code></li><li>前两段<code>MF</code>为1标识非最后，最后一段以0标识结尾</li></ul></li></ul><h2 id="网际协议："><a href="#网际协议：" class="headerlink" title="网际协议："></a>网际协议：</h2><ul><li><strong>定义</strong>：互联网通信的基石，负责将数据包从源地址传送到目标地址</li><li><strong>功能</strong>：<ul><li><strong>地址分配和路由选择</strong>：为每个设备分配一个唯一的<code>IP</code>地址，通过路由表和路由算法决定数据包的传输路径</li><li><strong>数据包封装和拆封</strong>：<code>IP</code>将上层协议的数据封装为数据包，在数据包首部添加源地址和目标地址，接收数据包时将其拆封并返回给上层协议</li><li><strong>分片和重组</strong>：当数据包超过最大传输单元时，<code>IP</code>将其分为更小的片段传输，接收端将其重组为完整数据包</li><li><strong>错误检测和报告</strong>：通过首部校验和字段检验数据包的传输错误，若检测到错误，<code>IP</code>协议会报告错误信息</li></ul></li><li><strong><code>IPv4</code></strong>：<ul><li><code>IPv4</code>协议由<code>32</code>位二进制数据构成，如（<code>192.168.1.1</code>），每段<code>0-255</code>(8位)，四段</li><li><code>IP</code>地址用来标识并定位主机，</li><li><code>IP</code>地址的分配规则采用子网掩码的形式，即一个厂商用具有相同开头的<code>IP</code>地址集进行划分，以此类推，直到分配到每一个用户机，子网掩码即一个网络组中共有的那部分位数</li><li><code>CIDR</code>即上述分配方法，是一种灵活的<code>IP</code>地址分配方法如（<code>192.168.1.0/24</code>）前24位表示子网掩码，即(<code>/24</code>子网掩码)，具体子网掩码是将其前<code>24</code>位设为1，其余位设为0</li><li>分配地址时，子网掩码是固定不变的，分配范围为到子网掩码不变情况下的最大范围</li><li><code>IPv6</code>为<code>IPv4</code>的升级版，共有<code>128bit</code>构成</li><li>广播地址：一段数据段最后两位为广播地址（最后一个<code>bit</code>）<div class="note info flat"><p><code>IPv6</code>的出现是为了解决<code>IPv4</code>数量不够的问题，<code>IPv6</code>共有<code>128</code>位</p></div></li></ul></li></ul><h2 id="路由选择算法"><a href="#路由选择算法" class="headerlink" title="路由选择算法"></a>路由选择算法</h2><ul><li><strong>链路状态(<code>link-state</code>)路由算法</strong><ul><li><strong>常见实例</strong>：<code>Dijkstra</code>算法和<code>Prim</code>算法</li><li>每个路由器都维护整个网络拓扑结构，并根据收集到的信息构建全局拓扑图</li><li>算法复杂度高，网络开销大，避免出现路由环</li></ul></li><li><strong>距离向量(<code>distance-vector</code>)路由算法</strong><ul><li>每个路由器都维护一张路由表，用来记录到每个网络的最短距离，称为距离向量表</li><li>每个路由器都只需存储和处理相邻路由器的距离信息，容易出现路由环</li></ul></li></ul><h1 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><ul><li><strong>功能</strong>：用于将网络层的数据包封装为数据帧，每个帧包含源地址目的地址以及校验信息，并且在接收数据包时能够解封数据包，使用<code>MAC</code>地址来标识网络中的唯一设备<h2 id="多路访问"><a href="#多路访问" class="headerlink" title="多路访问"></a>多路访问</h2>分为时分多路复用（<code>TDM</code>）和频分多路复用（<code>FDM</code>）<br>广播通信的四种理想特征：效率、公平性、低延迟、可拓展性<h2 id="CRC循环冗余校验"><a href="#CRC循环冗余校验" class="headerlink" title="CRC循环冗余校验"></a>CRC循环冗余校验</h2>通过<code>CRC</code>算法进行数据错误校验，具体步骤如下：</li></ul><ol><li>对数据D进行拓展（补0），位数为多项式G位数-1，如$x^4+x+1$：10011，位数为4（R的位数也为4）</li><li>使用模2除法对D和G求余数R，模二除法只在相减过程中求异或</li><li>将数据D最后一个个位翻转并将余数与D拼合，组成新的数据帧</li><li>将新的数据帧最后一位反转对G模2运算求余</li><li>若余数R为0，则标识无错误，否则出错</li></ol><h2 id="交换机转发和过滤"><a href="#交换机转发和过滤" class="headerlink" title="交换机转发和过滤"></a>交换机转发和过滤</h2><ul><li><strong>实现</strong>：交换机通过广播的形式转发信息，通过维护一张交换机表实现过滤和转发</li><li>交换机表记录交换机MAC地址和接口号，每次转发帧时在路由表中记录源地址的接口和MAC地址</li></ul><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p>最底层的物理光纤对数据的传输，就不多赘述了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 大学课程 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈数据分析（二）echarts数据可视化</title>
      <link href="/2024/11/19/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89echart%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2024/11/19/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89echart%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>本篇主要讲述使用echarts制作可视化大屏的一些技巧，同时将其用作数据分析中的数据可视化部分</p></div><h1>简介</h1><p>数据可视化的目的是将一串冰冷的数据用图形或图表的方式展示出来，以便更有效和直观地传达技术。通过数据可视化的方式，抽象离散的数据将更容易被解析识别</p><h1>可视化适配方案</h1><div class="note info flat"><p>大屏可视化像素适配一般使用分辨率自适应的方式，响应式的分辨率适配一般用于需要指定设备的需求</p></div><h2 id="获取DPR（Device-Pixel-Ratio）">获取DPR（Device Pixel Ratio）</h2><p><code>DPR</code>即设备像素比率，具体指<code>css</code>像素与设备物理像素的比率，例如，<code>DPR</code>为<code>2</code>则表示一个<code>css</code>像素由<code>2*2</code>个物理像素构成。</p><p>获取<code>DPR</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="设置全局字体大小">设置全局字体大小</h2><p>监听窗口<code>DOM</code>加载完成后根据获取的<code>dpr</code>设置全局字体大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setBodyFontSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">body</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="number">12</span> * dpr + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, setBodyFontSize);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setBodyFontSize</span>();</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>由于<code>css</code>像素一致而不同设备的物理像素不同，因此，将<code>css</code>像素转化为设备像素，从而使不同<code>dpr</code>设备上的用户有相同的使用体验</p></div><h2 id="设置rem单位">设置rem单位</h2><p>比较<code>px</code>、<code>em</code>、<code>rem</code></p><blockquote><p><code>px</code>:绝对像素单位，由<code>css</code>本身决定的像素单位<br><code>em</code>：相对于父元素字体大小的单位，一般用于相对计算，可以继承叠加，因此当嵌套层数变多后就会难以控制<br><code>rem</code>：相对于<code>html</code>根元素字体大小的单位，容易计算和统一控制</p></blockquote><p>由此可见，<code>rem</code>自然是最适合做可视化大屏的单位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docEl = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setRemUnit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> rem = docEl.<span class="property">clientWidth</span> / <span class="number">24</span>;</span><br><span class="line">  docEl.<span class="property">style</span>.<span class="property">fontSize</span> = rem + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setRemUnit</span>();</span><br></pre></td></tr></table></figure><p>首先将屏幕宽度分为<code>24</code>份用于容器布局，即<code>1rem</code>对应屏幕宽度的<code>1/24</code>，然后调整根节点字体大小，灵活适应不同分辨率的屏幕</p><h2 id="监听屏幕大小的变化">监听屏幕大小的变化</h2><p>监听<code>resize</code>事件，当屏幕大小变化时，实时重新计算<code>rem</code>大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(<span class="string">&quot;resize&quot;</span>, setRemUnit);</span><br><span class="line">window.addEventListener(<span class="string">&quot;pageshow&quot;</span>, function(e) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">    setRemUnit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note info flat"><p><code>pageshow</code>表示页面打开时触发，<code>e.persisted</code>表示页面资源从缓存中加载时触发</p></div><h2 id="检测0-5px支持">检测0.5px支持</h2><p>用于在高分辨率设备上使图表更加细致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (dpr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> fakeBody = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;body&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> testElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  testElement.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;.5px solid transparent&quot;</span>;</span><br><span class="line">  fakeBody.<span class="title function_">appendChild</span>(testElement);</span><br><span class="line">  docEl.<span class="title function_">appendChild</span>(fakeBody);</span><br><span class="line">  <span class="keyword">if</span> (testElement.<span class="property">offsetHeight</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    docEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hairlines&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  docEl.<span class="title function_">removeChild</span>(fakeBody);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flexible-js完整代码">flexible.js完整代码</h2><details class="folding-tag" blue><summary> 点击查看完整代码 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 来自 https://github.com/amfe/lib-flexible/blob/2.0/index.js</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">flexible</span>(<span class="params"><span class="variable language_">window</span>, <span class="variable language_">document</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line">  <span class="comment">// 获取当前显示设备的物理像素分辨率与CSS像素分辨率之比;</span></span><br><span class="line">  <span class="keyword">var</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据分辨率调整全局字体大小</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setBodyFontSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// html已完成加载，则立即调整字体大小，否则等待html加载完成再调整字体大小</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">body</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="number">12</span> * dpr + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 监听DOMContentLoaded 事件——当初始的 HTML 文档被完全加载和解析完成之后触发，无需等待样式表</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, setBodyFontSize);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setBodyFontSize</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据屏幕宽度，重置1rem的长度为当前屏幕宽度的1/10</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setRemUnit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rem = docEl.<span class="property">clientWidth</span> / <span class="number">24</span>;</span><br><span class="line">    <span class="comment">// 1rem的值永远为根元素的字体大小，所以此处通过调整全局字体大小来重置rem</span></span><br><span class="line">    docEl.<span class="property">style</span>.<span class="property">fontSize</span> = rem + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setRemUnit</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听resize事件——屏幕大小发生变化时触发</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, setRemUnit);</span><br><span class="line">  <span class="comment">// 监听pageshow事件——显示页面时触发</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;pageshow&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 若是浏览器中点击后退时显示页面，则重置rem</span></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">persisted</span>) &#123;</span><br><span class="line">      <span class="title function_">setRemUnit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检测是否支持0.5px</span></span><br><span class="line">  <span class="keyword">if</span> (dpr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fakeBody = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;body&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> testElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    testElement.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;.5px solid transparent&quot;</span>;</span><br><span class="line">    fakeBody.<span class="title function_">appendChild</span>(testElement);</span><br><span class="line">    docEl.<span class="title function_">appendChild</span>(fakeBody);</span><br><span class="line">    <span class="keyword">if</span> (testElement.<span class="property">offsetHeight</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      docEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hairlines&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    docEl.<span class="title function_">removeChild</span>(fakeBody);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>              </div>            </details><h1>echarts使用技巧</h1><p><code>echarts</code>官方说明文档<a href="https://echarts.apache.org/handbook/zh/get-started">echarts</a></p><h2 id="引入echarts">引入echarts</h2><p>通过<code>CDN</code>或<code>npm</code>引入<code>echarts</code>资源包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/echarts@5.5.1/dist/echarts.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>或使用<code>npm</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br><span class="line"></span><br><span class="line"><span class="comment">//在项目中</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//在原生html文件中</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/dist/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  <span class="comment">//本地资源包地址</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>使用<code>echarts</code>时需要调用生成函数，在原生<code>html</code>中可以使用立即执行函数调用，在<code>vue</code>中可以在<code>mounted()</code>生命周期钩子中调用初始化函数</p></div><h2 id="初始化echarts表格">初始化echarts表格</h2><p>准备好一个<code>dom</code>元素，并初始化一个<code>echarts</code>实例</p><div class="note info flat"><p>在框架如<code>vue</code>中可以使用<code>ref</code>获取<code>dom</code>实例</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>图表绑定的<code>dom</code>元素需要给一个确定的宽高</p></div><h2 id="设置表格配置项">设置表格配置项</h2><p>为<code>echarts</code>表格添加配置项，使其符合使用需求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    <span class="comment">// backgroundColor: &#x27;#000&#x27;,</span></span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">        <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">        <span class="attr">formatter</span>: <span class="string">&#x27;&#123;b&#125;: &#123;c&#125;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">visualMap</span>: &#123;</span><br><span class="line">        <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">max</span>: <span class="number">70</span>,</span><br><span class="line">        <span class="attr">left</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">        <span class="attr">text</span>: [<span class="string">&#x27;High&#x27;</span>,<span class="string">&#x27;Low&#x27;</span>],           <span class="comment">// 文本，默认为数值文本</span></span><br><span class="line">        <span class="attr">calculable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">textStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">  </span><br><span class="line">        <span class="attr">inRange</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: [<span class="string">&#x27;#F9FC91&#x27;</span>, <span class="string">&#x27;#FFBF3F&#x27;</span>, <span class="string">&#x27;#F62929&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">geo</span>: &#123;</span><br><span class="line">        <span class="attr">map</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">        <span class="attr">roam</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">zoom</span>: <span class="number">1.2</span>,</span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">            <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">            <span class="attr">normal</span>: &#123;</span><br><span class="line">                <span class="attr">areaColor</span>: <span class="string">&#x27;#e6f4f1&#x27;</span>,</span><br><span class="line">                <span class="attr">borderColor</span>: <span class="string">&#x27;#404a59&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                <span class="attr">areaColor</span>: <span class="string">&#x27;#2a333d&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">light</span>: &#123; <span class="attr">main</span>: &#123; <span class="attr">intensity</span>: <span class="number">1</span>, <span class="attr">shadow</span>: <span class="literal">true</span>, <span class="attr">shadowQuality</span>: <span class="string">&#x27;high&#x27;</span> &#125; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">            <span class="attr">map</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">            <span class="attr">geoIndex</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">data</span>: [&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;United States&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">62</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;China&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">21</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;United Kingdom&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">16</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Japan&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">8</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;France&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">7</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Italy&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">6</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Germany&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">5</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;South Korea&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">5</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Canada&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">4</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;New Zealand&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Taiwan&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;India&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Switzerland&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Mexico&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Lebanon&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Cyprus&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Qatar&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Poland&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Spain&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Iran&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Denmark&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Sweden&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">1</span>&#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myChart.<span class="title function_">setOption</span>(option);</span><br></pre></td></tr></table></figure><h2 id="echarts常见配置项一览">echarts常见配置项一览</h2><div class="tip cogs"><p>详情参照<code>echarts</code>官方配置项文档<a href="https://echarts.apache.org/zh/option.html">echarts配置项</a></p></div><h3 id="标题（title）">标题（title）</h3><p>标题可以设置主标题、副标题、标题的位置、文本样式等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;主标题&#x27;</span>,            <span class="comment">// 主标题文本</span></span><br><span class="line">    <span class="attr">subtext</span>: <span class="string">&#x27;副标题&#x27;</span>,         <span class="comment">// 副标题文本</span></span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>,            <span class="comment">// 标题的位置，可选值：&#x27;left&#x27;, &#x27;center&#x27;, &#x27;right&#x27;</span></span><br><span class="line">    <span class="attr">textStyle</span>: &#123;               <span class="comment">// 主标题文本样式</span></span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span>,</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">subtextStyle</span>: &#123;            <span class="comment">// 副标题文本样式</span></span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#aaa&#x27;</span>,</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">14</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提示框（tooltip）">提示框（tooltip）</h3><p>提示框用于鼠标悬停时设置数据点展示信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tooltip</span>: &#123;</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,           <span class="comment">// 触发类型，可选值：&#x27;item&#x27;, &#x27;axis&#x27;, &#x27;none&#x27;</span></span><br><span class="line">    <span class="attr">axisPointer</span>: &#123;             <span class="comment">// 坐标轴指示器配置项</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;shadow&#x27;</span>         <span class="comment">// 指示器类型，可选值：&#x27;line&#x27;, &#x27;shadow&#x27;, &#x27;none&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">formatter</span>: <span class="string">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&#x27;</span>  <span class="comment">// 提示框格式化文本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图例（legend）">图例（legend）</h3><p>图例用于显示图表数据系列的标示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">legend</span>: &#123;</span><br><span class="line">    <span class="attr">orient</span>: <span class="string">&#x27;vertical&#x27;</span>,        <span class="comment">// 布局方向，可选值：&#x27;horizontal&#x27;, &#x27;vertical&#x27;</span></span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;left&#x27;</span>,              <span class="comment">// 图例位置</span></span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;销量&#x27;</span>]             <span class="comment">// 图例数据项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网格（grid）">网格（grid）</h3><p>设置表格的内边距以及布局</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">grid</span>: &#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,                <span class="comment">// 网格左边距</span></span><br><span class="line">    <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,               <span class="comment">// 网格右边距</span></span><br><span class="line">    <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,              <span class="comment">// 网格下边距</span></span><br><span class="line">    <span class="attr">containLabel</span>: <span class="literal">true</span>         <span class="comment">// 是否包含坐标轴的刻度标签</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="坐标轴（xAxis和yAxis）">坐标轴（xAxis和yAxis）</h3><p>设置图表的 X 轴和 Y 轴，包含类型、数据、轴线样式等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,          <span class="comment">// 坐标轴类型，可选值：&#x27;category&#x27;, &#x27;value&#x27;, &#x27;time&#x27;, &#x27;log&#x27;</span></span><br><span class="line">    <span class="attr">boundaryGap</span>: <span class="literal">false</span>,        <span class="comment">// 坐标轴两边留白策略</span></span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>],  <span class="comment">// 坐标轴数据</span></span><br><span class="line">    <span class="attr">axisLine</span>: &#123;                <span class="comment">// 坐标轴轴线配置</span></span><br><span class="line">        <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,             <span class="comment">// 坐标轴类型</span></span><br><span class="line">    <span class="attr">axisLine</span>: &#123;                <span class="comment">// 坐标轴轴线配置</span></span><br><span class="line">        <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据系列（series）">数据系列（series）</h3><p>图表配置核心，配置具体的数据和图表类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series</span>: [&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,              <span class="comment">// 系列名称</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,               <span class="comment">// 图表类型，可选值：&#x27;line&#x27;, &#x27;bar&#x27;, &#x27;pie&#x27;, &#x27;scatter&#x27;, 等</span></span><br><span class="line">    <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>],  <span class="comment">// 系列数据</span></span><br><span class="line">    <span class="attr">itemStyle</span>: &#123;               <span class="comment">// 数据点样式</span></span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#3398DB&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="视觉映射（visualMap）">视觉映射（visualMap）</h3><p>数据范围映射关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">visualMap</span>: &#123;</span><br><span class="line">    <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">    <span class="attr">text</span>: [<span class="string">&#x27;高&#x27;</span>, <span class="string">&#x27;低&#x27;</span>],        <span class="comment">// 文本，默认为数值文本</span></span><br><span class="line">    <span class="attr">calculable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">inRange</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: [<span class="string">&#x27;#50a3ba&#x27;</span>, <span class="string">&#x27;#eac763&#x27;</span>, <span class="string">&#x27;#d94e5d&#x27;</span>]  <span class="comment">// 映射颜色范围</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具栏（toolbox）">工具栏（toolbox）</h3><p>提供数据视图、下载图片、动态类型切换等多种附加功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toolbox</span>: &#123;</span><br><span class="line">    <span class="attr">feature</span>: &#123;</span><br><span class="line">        <span class="attr">saveAsImage</span>: &#123;         <span class="comment">// 保存为图片</span></span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;保存&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">dataView</span>: &#123;            <span class="comment">// 数据视图</span></span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;数据视图&#x27;</span>,</span><br><span class="line">            <span class="attr">readOnly</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">magicType</span>: &#123;           <span class="comment">// 动态类型切换</span></span><br><span class="line">            <span class="attr">type</span>: [<span class="string">&#x27;line&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">restore</span>: &#123;             <span class="comment">// 还原</span></span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;还原&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">dataZoom</span>: &#123;            <span class="comment">// 数据区域缩放</span></span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">                <span class="attr">zoom</span>: <span class="string">&#x27;区域缩放&#x27;</span>,</span><br><span class="line">                <span class="attr">back</span>: <span class="string">&#x27;缩放还原&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态修改图表大小">动态修改图表大小</h2><p>配置完表格后的最后一步就是监听屏幕分辨率变化，动态设置表格大小<br>在配置函数最后加上这么一段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  myChart.<span class="title function_">resize</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="示例结果展示">示例结果展示</h2><p>基于<code>Python</code>爬虫数据，使用<code>echarts</code>制作的豆瓣<code>top100</code>电影票房分析可视化大屏</p><p><img src="/img/src/echarts.png" alt="code" title="top100电影"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据分析 echarts 可视化大屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点总结（一）基础认识</title>
      <link href="/2024/11/19/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/"/>
      <url>/2024/11/19/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>该系列文章主要基于官方Vue教程，对Vue使用及特性等方面做一个较为系统的总结</p></div><div class="tip bell"><p>官方文档链接<a href="https://cn.vuejs.org/guide/introduction">Vue.js</a></p></div><hr><h1>Vue概述</h1><h2 id="框架的作用">框架的作用</h2><div class="note info flat"><p>vue是一套构建用户界面的javascript框架，基于html，css，javascript构建，提供一套声明式的，组件化的编程模型。</p></div><p>前端开发框架的本质作用是简化开发，其优势是提供了一系列模块化语法，只需遵守这些语法就可以涵盖大量日常开发的需求，使用开发框架具有如下特点：</p><ul><li>组件化开发：将代码拆分为独立的、可复用的组件，总而便于管理</li><li>状态管理：提供强大的数据管理流，从而帮助开发者管理数据状态</li><li>虚拟<code>DOM</code>：使用虚拟<code>DOM</code>构建<code>DOM</code>树，能够减少实际对<code>DOM</code>的操作次数，从而提高开发效率</li><li>响应式数据绑定：提供一系列响应式数据绑定<code>api</code>，实现数据与视图的同步</li><li>单页应用(<code>SPA</code>)：使用框架非常适合构建单页应用，可以在不刷新页面的前提下实现页面更新</li></ul><div class="note orange icon-padding flat"><i class="note-icon fas fa-wand-magic"></i><p>vue是一个框架，也是一个生态，符合大部分前端开发需求。</p></div><h2 id="渐进式框架">渐进式框架</h2><h3 id="什么是渐进式框架？">什么是渐进式框架？</h3><div class="tip sync"><p>渐进式框架即在开发过程中可以被渐进集成的框架，这意味着<code>Vue</code>项目将不需要在开始就规划好所有功能，而是可以慢慢根据需求进行集成，这对于逐渐膨胀的前端开发而言是非常有利的</p></div><h3 id="渐进式框架的特点">渐进式框架的特点</h3><blockquote><ol><li>无需构建步骤，渐进式增强静态html</li><li>在任何页面中作为<code>web components</code>嵌入</li><li>单页应用（<code>SPA</code>）</li><li>全栈、服务端渲染（<code>SSR</code>）</li><li><code>jamestack</code>、静态站点生成（<code>SSG</code>）</li><li>开发桌面端、移动端、WebGL，甚至是命令行终端中的界面</li></ol></blockquote><div class="note primary modern"><p>使用<code>Vue</code>可以渐进式地集成上述功能</p></div> <h2 id="Vue代码风格">Vue代码风格</h2><p>选项式<code>api</code>与组合式<code>api</code></p><p>两种风格的<code>api</code>可以实现相同的功能，但是语言风格不同</p><div class="note blue icon-padding flat"><i class="note-icon fas fa-gear"></i><p>选项式<code>api</code>适合解决需要不断拓展的需求</p></div><div class="note purple icon-padding flat"><i class="note-icon fas fa-sitemap"></i><p>组合式<code>api</code>更适合解决完整的单页开发</p></div><p>两种<code>api</code>底层系统相同，都能解决大部分问题。</p><p>但两种<code>api</code>都有一个共性，即<code>Vue</code>项目不关注<code>dom</code>是怎么变化的，而是关注数据，并将数据同步到视图中</p><h1>Vue实例创建</h1><h2 id="创建一个vue应用">创建一个vue应用</h2><div class="note primary flat"><p>主流有两种脚手架工具，分别是<code>vue-cli</code>与<code>vite</code>，相对来说<code>vite</code>的构建效率要大于<code>vue-cli</code>，不过开发中两者都很常见</p></div><blockquote><ol><li>构建<code>Vue</code>项目<br>使用<code>vue-cli</code>构建</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-new-vue-project</span><br></pre></td></tr></table></figure><p>使用<code>Vite</code>构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create/init vue@latest</span><br></pre></td></tr></table></figure><ol start="2"><li>安装依赖，启动服务器</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run serve/dev</span><br></pre></td></tr></table></figure><ol start="3"><li>发布到生产环境</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="构建一个vue实例">构建一个vue实例</h2><div class="note primary flat"><p>如果直接使用<code>CDN</code>而不是<code>npm</code>创建<code>vue</code>实例，可以直接通过<code>url</code>引入<code>createApp</code>,这种方式一般用于对<code>html</code>做静态提升</p></div><div class="note warning flat"><p>在早期也有通过<code>new Vue</code>创建<code>Vue</code>实例的，但引入了<code>createApp</code>后更倾向于这种方式</p></div><blockquote><ol><li>准备一个根模板容器</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建导入构造对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>挂载构造对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>一个页面可以创建多个<code>vue</code>实例，如果你正在使用<code>Vue</code>来增强服务端渲<code>HTML</code>，并且只想要<code>Vue</code>去控制一个大型页面中特殊的一小部分，应避免将一个单独<code>Vue</code>应用实例挂载到整个页面上，而是应该创建多个小的应用实例，将它们分别挂载到所需的元素上去。</p></div><h1>Vue核心概念</h1><p><code>Vue</code>构建网页的具体流程如下:</p><blockquote><ol><li>实例创建:通过<code>createApp</code>创建一个<code>Vue</code>实例</li></ol></blockquote><ol start="2"><li>选项注入:使用选项或组合式api注入数据和方法</li><li>创建虚拟<code>DOM</code>:模板编译生成虚拟<code>DOM</code>树</li><li>挂载:将虚拟<code>DOM</code>树挂载到真实<code>DOM</code>树上</li><li>渲染:数据变化时,通过<code>DOM diff</code>算法更新真实<code>DOM</code>树</li></ol><h2 id="选项注入">选项注入</h2><p>创建<code>Vue</code>实例后,下一步便是对选项进行注入,<code>Vue2</code>的选项式<code>api</code>即将数据抽象为具体的如<code>data</code>,<code>computed</code>,<code>method</code>等选项或方法进行注入<code>Vue</code>实例中<br>在<code>Vue3</code>中则是将数据封装进<code>setup</code>方法中,通过<code>ref</code>,<code>reactive</code>等来定义响应式状态</p><h2 id="虚拟DOM">虚拟DOM</h2><p><code>vue</code>模板并不是真实的<code>DOM</code>，而是虚拟<code>DOM</code>，虚拟<code>DOM</code>本质上是一个字符串，<code>vue</code>内部会根据虚拟<code>DOM</code>生成真实<code>DOM</code>（<code>vnode</code>树），这个过程被称为<code>vue</code>渲染，通过虚拟<code>DOM</code>节点的对比修改数据，从而提高效率，<code>vue</code>渲染使用<code>render()</code>函数的返回值生成<code>vnode</code>，从而创建真实<code>DOM</code></p><div class="note info flat"><p>虽然<code>Vue2</code>和<code>Vue3</code>整体构建方法类似,但<code>Vue3</code>中通过算法的优化大大提升了构建效率</p></div><h1>Vue特性</h1><h2 id="插值表达式">插值表达式</h2><p>最基本的数据绑定形式,响应式双大括号中的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125; &lt;/span&gt;</span><br></pre></td></tr></table></figure><h2 id="样式作用域-scoped">样式作用域 scoped</h2><p>通过<code>hash</code>映射对组件样式进行约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>样式作用域不仅影响当前组件,还会影响子组件的根元素</p></div><h2 id="深层选择器-deep">深层选择器 :deep()</h2><p>处于<code>scoped</code>样式中的选择器如果想要做更“深度”的选择，也即：影响到子组件，可以使用<code>:deep()</code>这个伪类：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="selector-class">.a</span> :<span class="built_in">deep</span>(.b) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="组件递归">组件递归</h2><p>一个单文件组件可以通过它的文件名被其自己所引用。例如：名为 <code>FooBar.vue</code> 的组件可以在其模板中用 <code>&lt;FooBar/&gt;</code> 引用它自己</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">Comment</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; comment.text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;comment.replies&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Comment</span> <span class="attr">v-for</span>=<span class="string">&quot;reply in comment.replies&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;reply.id&quot;</span> <span class="attr">:comment</span>=<span class="string">&quot;reply&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Comment&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">comment</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">required</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="动态参数">动态参数</h2><p>动态参数允许你在模板中动态绑定事件或者方法，使用动态参数可以做到动态修改属性名！(不是属性的值)，具体实现方式是使用<code>[]</code>来绑定属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">注意，参数表达式有一些约束，</span><br><span class="line">参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释</span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 简写 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>还可以绑定方法名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-<span class="attr">on</span>:[eventName]=<span class="string">&quot;doSomething&quot;</span>&gt; ... &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 简写 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>使用动态参数时，需保证表达式的值为一个字符串且不支持<code>null</code>，此外，空格可引号都是不被允许的</p></div><h1>Vue基本指令</h1><h2 id="v-html-v-text">v-html/v-text</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细信息</button><button type="button" class="tab"><i class="icon"></i>语法参考</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><code>v-text</code>用以动态设置元素文本内容</li><li><code>v-html</code>用以动态设置元素<code>innerhtml</code>,包括<code>DOM</code>元素</li></ul></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;!-- 等同于 --&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-html=&quot;html&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="v-show-v-if">v-show/v-if</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细信息</button><button type="button" class="tab"><i class="icon"></i>语法参考</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li>两者都用来控制元素的显示与隐藏</li><li><code>v-if</code>是真实地按条件渲染,即&quot;真实地&quot;控制元素的重建与销毁</li><li><code>v-show</code>则只是相当于控制元素的<code>display</code>属性为<code>none</code>,相当于从页面中移除,在<code>DOM</code>树中仍保有一席之地</li><li>因此,<code>v-show</code>用来控制需要经常变动的元素,而<code>v-if</code>处理变动较少的元素</li></ul></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&quot;type === &#x27;A&#x27;&quot;&gt;</span><br><span class="line">  A</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;type === &#x27;B&#x27;&quot;&gt;</span><br><span class="line">  B</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;type === &#x27;C&#x27;&quot;&gt;</span><br><span class="line">  C</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">  Not A/B/C</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note warning flat"><p>还有一个老生常谈的问题了,就是<code>v-if</code>不能和<code>v-for</code>在一起使用,由于<code>v-if</code>比<code>v-for</code>的优先级更高。这意味着<code>v-if</code>的条件将无法访问到<code>v-for</code>作用域内遍历的值</p></div><h2 id="v-on">v-on</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细信息</button><button type="button" class="tab"><i class="icon"></i>语法参考</button><button type="button" class="tab"><i class="icon"></i>事件修饰符</button><button type="button" class="tab"><i class="icon"></i>按键修饰符</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li>我们可以使用<code>v-on</code>指令 (简写为 @) 来监听<code>DOM</code>事件，并在事件触发时执行对应的 <code>JavaScript</code></li><li><code>v-on</code>可以处理内联事件或方法事件</li></ul></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">&lt;button @click=<span class="string">&quot;count++&quot;</span>&gt;<span class="title class_">Add</span> <span class="number">1</span>&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;Vue.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`Hello <span class="subst">$&#123;name.value&#125;</span>!`</span>)</span><br><span class="line">  <span class="comment">// `event` 是 DOM 原生事件</span></span><br><span class="line">  <span class="keyword">if</span> (event) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button @click=<span class="string">&quot;greet&quot;</span>&gt;<span class="title class_">Greet</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li><code>.stop</code>:单击事件时停止传递</li><li><code>.prevent</code>:提交表单时不会刷新页面,相当于<code>event.preventDefault()</code></li><li><code>.capture</code>:当事件涉及子组件穿透时优先处理父组件</li><li><code>.self</code>:当事件的<code>event.target</code>指向自身(不来自子元素)时才触发</li><li><code>.once</code>:点击事件最多触发一次</li><li><code>.passive</code>:保证滚动事件的默认行为立即发生</li></ol><div class="note info flat"><p>修饰符遵从链式调用原则</p></div></div><div class="tab-item-content"><ol><li><code>vue</code>为一些系统按键提供了别名,如<code>.enter</code>,<code>.delete</code>,<code>.space</code>,<code>.esc</code>,<code>.space</code>,<code>.up</code>,<code>.down</code>,<code>.left</code>,<code>.right</code>,<code>.ctrl</code>,<code>.alt</code>,<code>.shift</code>等</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">Alt</span> + <span class="title class_">Enter</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.enter</span>=<span class="string">&quot;clear&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="title class_">Ctrl</span> + 点击 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>.exact</code>修饰符:可使用<code>.exact</code>修饰符来指定当单独按键被按下时才触发事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 当按下 <span class="title class_">Ctrl</span> 时，即使同时按下 <span class="title class_">Alt</span> 或 <span class="title class_">Shift</span> 也会触发 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 仅当按下 <span class="title class_">Ctrl</span> 且未按任何其他键时才会触发 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>鼠标按键修饰符<code>.left</code>,<code>.right</code>,<code>.middle</code></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="v-bind">v-bind</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细信息</button><button type="button" class="tab"><i class="icon"></i>语法参考</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><code>v-bind</code>,简写为<code>:</code>,在<code>vue</code>中用作数据绑定</li><li>常用作绑定类和内联样式或者对<code>vue</code>内置参数进行绑定,如<code>key</code>和<code>props</code></li><li><code>v-bind</code>可以绑定数组,对象,支持一次绑定多个参数</li></ul></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isActive = <span class="title function_">ref</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> hasError = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">&lt;div</span><br><span class="line">  <span class="keyword">class</span>=<span class="string">&quot;static&quot;</span></span><br><span class="line">  :<span class="keyword">class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span><br><span class="line">&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="v-for">v-for</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细信息</button><button type="button" class="tab"><i class="icon"></i>语法参考</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><code>v-for</code>用于基于数组来渲染一个列表</li><li>模板语法: <code>v-for = &quot;(value,key?,index) in items&quot;</code></li><li>参数示意:<code>value</code>表示数组的值, <code>key</code>(可选)表示数组的键,<code>index</code>(可选)表示数组的索引</li><li>为<code>v-for</code>绑定一个唯一的<code>:key</code>来确保跟踪每个项</li></ul></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;Jane Doe&#x27;</span>,</span><br><span class="line">  <span class="attr">publishedAt</span>: <span class="string">&#x27;2016-04-10&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(value, key, index) in myObject&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="v-model">v-model</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细信息</button><button type="button" class="tab"><i class="icon"></i>原型拆解</button><button type="button" class="tab"><i class="icon"></i>语法参考</button><button type="button" class="tab"><i class="icon"></i>修饰符参数</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><code>v-model</code>本质是一个语法糖,用于简化将表单内容同步到<code>Javascript</code>中的相应变量这一步骤</li><li><code>v-model</code>会绑定文本类型,如<code>&lt;input&gt;</code>,<code>&lt;textarea&gt;</code>的<code>value</code>属性,并监听<code>input</code>事件</li><li><code>v-model</code>会根据文本类型自动调整绑定方式,例如,对<code>ckeckbox</code>可以绑定一个数组,用以存储所有多选的值</li></ul></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  :value=<span class="string">&quot;text&quot;</span></span><br><span class="line">  @input=<span class="string">&quot;event =&gt; text = event.target.value&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将等同于</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> checkedNames = <span class="title function_">ref</span>([])</span><br><span class="line"></span><br><span class="line">&lt;div&gt;<span class="title class_">Checked</span> <span class="attr">names</span>: &#123;&#123; checkedNames &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jack&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;john&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;john&quot;</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mike&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mike&quot;</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li><code>.lazy</code>:<code>v-model</code>会在每次<code>change</code>事件触发后(文本框失去焦点,多选框选择等)更新数据</li><li><code>.number</code>:把输入自动转化为数字,会在输入框有<code>type=number</code>时自动启用</li><li><code>.trim</code>:自动去除用户输入两端的空格</li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="自定义指令">自定义指令</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细信息</button><button type="button" class="tab"><i class="icon"></i>语法参考</button><button type="button" class="tab"><i class="icon"></i>指令钩子</button><button type="button" class="tab"><i class="icon"></i>钩子参数</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li>除了<code>Vue</code>内置的一系列指令外,<code>Vue</code>还允许你注册自定义的指令</li><li>在<code>&lt;script setup&gt;</code>语法糖中，任何以<code>v</code>开头的驼峰式命名的变量都可以被用作一个自定义指令,如<code>vFocus</code>即可以在模板中以 <code>v-focus</code>的形式使用</li><li>在没有<code>&lt;script setup&gt;</code>中，可以配置<code>derective</code>配置项定义自定义指令</li><li>可以使用<code>app.derective()</code>全局定义指令</li><li>自定义指令由一个包含生命周期钩子对象组成，预定义的钩子函数触发，根据内含的参数创建方法</li></ul></div><div class="tab-item-content"><details class="folding-tag" blue><summary> 方法一(script setup) </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// 在模板中启用 v-focus</span></span><br><span class="line"><span class="keyword">const</span> vFocus = &#123;</span><br><span class="line">  <span class="attr">mounted</span>: <span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 方法二（配置项） </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="comment">// 在模板中启用 v-focus</span></span><br><span class="line">    <span class="attr">focus</span>: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 方法三（全局注册） </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使 v-focus 在所有组件中都可用</span></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>              </div>            </details></div><div class="tab-item-content"><div class="note warning flat"><p>在<code>vue2</code>中会使用<code>insert()</code>表示绑定，用<code>update()</code>表示更新,这些在<code>vue3</code>中被替换成了生命周期钩子，便于记忆</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDirective = &#123;</span><br><span class="line">  <span class="comment">// 在绑定元素的 attribute 前</span></span><br><span class="line">  <span class="comment">// 或事件监听器应用前调用</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面会介绍各个参数的细节</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在元素被插入到 DOM 前调用</span></span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params">el, binding, vnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都挂载完成后调用</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el, binding, vnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件更新前调用</span></span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都更新后调用</span></span><br><span class="line">  <span class="title function_">updated</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载前调用</span></span><br><span class="line">  <span class="title function_">beforeUnmount</span>(<span class="params">el, binding, vnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载后调用</span></span><br><span class="line">  <span class="title function_">unmounted</span>(<span class="params">el, binding, vnode</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>为简化自定义指令，由于大部分情况下自定义指令由<code>mounted</code>和<code>updated</code>触发,故简化形式可直接传入一个函数表示这两种情况</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这会在 `mounted` 和 `updated` 时都调用</span></span><br><span class="line">  el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ul><li><p><code>el</code>：指令绑定到的元素。这可以用于直接操作<code>DOM</code>。</p></li><li><p><code>binding</code>：一个对象，包含以下属性。</p><ul><li><code>value</code>：传递给指令的值。例如在<code>v-my-directive</code>=“1 + 1” 中，值是 2。</li><li><code>oldValue</code>：之前的值，仅在 <code>beforeUpdate</code> 和 <code>updated</code> 中可用。无论值是否更改，它都可用。</li><li><code>arg</code>：传递给指令的参数 (如果有的话)。例如在 <code>v-my-directive:foo</code> 中，参数是 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象 (如果有的话)。例如在 <code>v-my-directive.foo.bar</code> 中，修饰符对象是 <code>{ foo: true, bar: true }</code>。</li><li><code>instance</code>：使用该指令的组件实例。</li><li><code>dir</code>：指令的定义对象。</li></ul></li><li><p><code>vnode</code>：代表绑定元素的底层 VNode。</p></li><li><p><code>prevVnode</code>：代表之前的渲染中指令所绑定元素的<code>VNode</code>。仅在 <code>beforeUpdate</code> 和 <code>updated</code> 钩子中可用。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="attr">example</span>:foo.<span class="property">bar</span>=<span class="string">&quot;baz&quot;</span>&gt;</span><br><span class="line"><span class="comment">//对于上述指令，binding参数为如下对象</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">arg</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  <span class="attr">modifiers</span>: &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="attr">value</span>: <span class="comment">/* `baz` 的值 */</span>,</span><br><span class="line">  <span class="attr">oldValue</span>: <span class="comment">/* 上一次更新时 `baz` 的值 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Vue 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法总结与butterfly外挂标签</title>
      <link href="/2024/10/31/Markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ebtf%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
      <url>/2024/10/31/Markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ebtf%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>本文主要记述Markdown的基本语法以及店长的butterfly外挂标签插件中常用部分的基本使用和演示，用于熟悉博客文章的撰写</p></div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><details class="folding-tag" blue><summary> 章前哔哔 </summary>              <div class='content'>              <blockquote><p>不知道你有没有经历过这样一段心路历程，废了好大的劲终于把博客的基本配置做完了，兴致冲冲地准备动手写博客了，回过头来却发现，博客的语法要怎么写来着？<br>由于先前一直有用<code>obsidian</code>做学习笔记的习惯，我自以为已经具备了写博客的前提条件，但实际上手才发现其中的差别还是相当大的，一个是用<code>obsidian</code>做笔记只要面向自己就可以了，不用在意格式规划啥的，一切只需要自己能看懂就好，这和博客的需求是完全不同的，更不用说<code>butterfly</code>要写出优雅的博客还要关注各种外挂标签啥的。<br>因此打算自己写一篇作为对<code>markdown</code>以及<code>butterfly</code>外观标签的总结，也就当熟悉博客的写法了。</p></blockquote><div class="note warning flat"><p>注：本文仅供熟悉博客文章使用，故外挂标签部分介绍并不全面，仅给出部分比较常用的部分，如有具体需求，建议参考原文，具体教程链接均在文前给出</p></div>              </div>            </details><details class="folding-tag" blue><summary> 点击查看参考教程 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">作者</th><th style="text-align:center">教程原帖</th></tr></thead><tbody><tr><td style="text-align:center">Fomalhaut</td><td style="text-align:center"><a href="https://www.fomal.cc/posts/2013454d.html">Markdown语法与外挂标签写法汇总</a></td></tr><tr><td style="text-align:center">店长Akilar</td><td style="text-align:center"><a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus</a></td></tr><tr><td style="text-align:center">Jerry</td><td style="text-align:center"><a href="https://butterfly.js.org/posts/ceeb73f/?highlight=note">Butterfly 文档(四) 标签外挂</a></td></tr></tbody></table></div>              </div>            </details><hr><h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><div class="tip cogs"><p><code>Markdown</code>为<code>hexo</code>集成的标记语言，可以直接使用，<code>butterfly</code>外挂标签则为<code>butterfly</code>插件，需要手动导入</p></div><div class="note warning flat"><p>当然，<code>butterfly</code>的外挂标签插件只能供<code>butterfly</code>主题使用，别的主题还需使用专门的插件</p></div><div class="note purple icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>注意：在原生<code>Markdown</code>（如表格）中使用某些外挂标签可能存在兼容性问题，例如显示闭合标签等问题，仍需要自己调整</p></div><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>见文章标题</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><div class="note info flat"><p>没什么好多讲的，唯一值得注意的地方就是不要随便缩进</p></div><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button><button type="button" class="tab"><i class="icon"></i>要点注意</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I really like using Markdown.</span><br><span class="line"></span><br><span class="line">I think I&#x27;ll use it to format all of my documents from now on.</span><br><span class="line"></span><br><span class="line">&gt; 我是引用语法，我引用了我自己</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>I really like using Markdown.</p><p>I think I’ll use it to format all of my documents from now on.</p><blockquote><p>我是引用语法，我引用了我自己</p></blockquote></div><div class="tab-item-content"><ul><li>1、段落保持顶格缩进，不要在段前使用space空格和tab换行符进行缩进</li><li>2、换行相当于使用html中的&lt;\br&gt;标签进行渲染，避免在结尾使用\符号</li><li>3、Markdown支持两个或多个空格进行换行</li><li>4、引用语法支持嵌套使用</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><div class="tip key"><p>善用不同形式的代码块来标识用途</p></div><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>配置参数</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 旧代码行</span><br><span class="line">+ 新代码行 </span><br><span class="line">未更改的代码行</span><br><span class="line">! 修改的代码行</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>使用diff来标识区分代码块，+标识添加，-标识删除，！标识修改</li><li>使用编程语言来表示对应编程语言代码块</li></ol></div><div class="tab-item-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- 旧代码行</span></span><br><span class="line"><span class="addition">+ 新代码行 </span></span><br><span class="line">未更改的代码行</span><br><span class="line"><span class="addition">! 修改的代码行</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="文字强调"><a href="#文字强调" class="headerlink" title="文字强调"></a>文字强调</h2><div class="note warning flat"><p>行内文字在外挂标签中有更优的写法，反正不到万不得已不要用html嵌入</p></div><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button><button type="button" class="tab"><i class="icon"></i>要点注意</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线演示&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">文字**加粗**演示</span><br><span class="line"></span><br><span class="line">文字*斜体*演示</span><br><span class="line"></span><br><span class="line">文本`高亮`演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line">// 使用html标签实现特定字体设置</span><br><span class="line">&lt;font size = 5&gt;5号字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;</span><br><span class="line">&lt;font color=blue&gt;蓝色&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=MistyRose&gt;这里的背景色是：MistyRosen，此处输入任意想输入的内容&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><font size = 5>5号字</font><font face="黑体">黑体</font><font color=blue>蓝色</font><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table></div><div class="tab-item-content"><ul><li>1、使用星号*或下划线_均可实现加粗或斜体</li><li>2、如要同时使用加粗和斜体，使用三个标识符</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. First item</span><br><span class="line">2. Second item</span><br><span class="line">3. Third item</span><br><span class="line">    1. Indented item</span><br><span class="line">    2. Indented item</span><br><span class="line">4. Fourth item</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>First item</li><li>Second item</li><li>Third item<ol><li>Indented item</li><li>Indented item</li></ol></li><li>Fourth item</li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button><button type="button" class="tab"><i class="icon"></i>要点注意</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- First item</span><br><span class="line">- Second item</span><br><span class="line">- Third item</span><br><span class="line">    - Indented item</span><br><span class="line">    - Indented item</span><br><span class="line">- Fourth item</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ul><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ul></div><div class="tab-item-content"><ul><li>1、使用+*-均可实现无序列表</li><li>2、若要在列表中插入非列表段落，缩进4个空格或一个制表符，否则将被当作列表</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签示例</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button><button type="button" class="tab"><i class="icon"></i>要点注意</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">----</span><br><span class="line"></span><br><span class="line">****</span><br><span class="line"></span><br><span class="line">------------</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><hr><hr><hr></div><div class="tab-item-content"><ul><li>1、为兼容性考虑，在分割线前后加一段空白段落</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签示例</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button><button type="button" class="tab"><i class="icon"></i>要点注意</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [Markdown语法](https://markdown.com.cn)。</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>这是一个链接 <a href="https://markdown.com.cn">Markdown语法</a>。</p></div><div class="tab-item-content"><ul><li>在链接URL后面增加title可实现鼠标悬浮时出现提示词</li><li>链接文本可使用文本增强符强调</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签示例</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![这是图片](/img/bg4.jpg &quot;Magic Gardens&quot;)</span><br><span class="line"></span><br><span class="line">[![这是带链接的图片](/img/bg4.jpg &quot;Magic Gardens&quot;)](https://markdown.com.cn)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p><img src="/img/bg4.jpg" alt="这是图片" title="Magic Gardens"></p><p><a href="https://markdown.com.cn"><img src="/img/bg4.jpg" alt="这是带链接的图片" title="Magic Gardens"></a></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签示例</button><button type="button" class="tab"><i class="icon"></i>渲染结果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#默认表格</span><br><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br><span class="line"></span><br><span class="line">#自定义对齐表格</span><br><span class="line">| Syntax(right) | Description(center) |</span><br><span class="line">| --------: | :-----------: |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><div class="table-container"><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:right">Syntax(right)</th><th style="text-align:center">Description(center)</th></tr></thead><tbody><tr><td style="text-align:right">Header</td><td style="text-align:center">Title</td></tr><tr><td style="text-align:right">Paragraph</td><td style="text-align:center">Text</td></tr></tbody></table></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h1 id="butterfly外挂标签"><a href="#butterfly外挂标签" class="headerlink" title="butterfly外挂标签"></a>butterfly外挂标签</h1><div class="note info flat"><p>引自店长的外挂标签插件，标签<code>npm</code>引入和配置详情见店长<a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus</a></p></div><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">2. 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">3. 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">4. 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">5. 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">6. 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><div class="tip sync"><p>对Markdown行内样式的补充，可以更简洁地修改行内样式</p></div><div class="note info flat"><p>基本使用技巧就是注意字体、颜色、大小和对齐方式四个属性</p></div><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>参数配置</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>字体：logo，code</li><li>颜色：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span></li><li>大小：small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐：left, center, right</li></ol></div><div class="tab-item-content"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line">- 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><div class="note success flat"><p>对段落文本的扩展，使用方式和场景基本等同于行内文本</p></div><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line">- 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h2><div class="note info flat"><p>在外挂标签中，<code>note</code>算得上是最常用的模块之一了，插件提供了两种<code>note</code>的配置语法，第一种为butterfly自带语法，可基于主题配置文件进行配置，第二种为外部引入图标方式，支持自定义引入<code>font-awesome V5</code>图标</p></div><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>通用配置</button><button type="button" class="tab"><i class="icon"></i>语法格式</button><button type="button" class="tab"><i class="icon"></i>参数配置</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><div class="note primary modern"><p>通用配置用以修改默认参数，不过使用时建议还是对每个引用框都手动进行配置</p></div><p>修改主题配置文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content"><details class="folding-tag" blue><summary> 方式一 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 方式二 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></div><div class="tab-item-content"><details class="folding-tag" blue><summary> 方式一 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>class</td><td>【可选】标识，不同的标识有不同的配色</td></tr></tbody></table></div><p>（ default / primary / success / info / warning / danger ）|<br>|no-icon|【可选】不显示 icon|<br>|style|【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）|</p>              </div>            </details><details class="folding-tag" blue><summary> 方式二 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>class</td><td>【可选】标识，不同的标识有不同的配色</td></tr></tbody></table></div><p>（ default / blue / pink / red / purple / orange / green ）|<br>|no-icon|【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )|<br>|style|【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）|</p>              </div>            </details></div><div class="tab-item-content"><details class="folding-tag" blue><summary> 方法一 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div></li><li><p><code>modern</code>样式</p><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div></li><li><p><code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div></li><li><p><code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div></li><li><p><code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div></li></ol>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p> <div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div> <div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div> <div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div> <div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div> <div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div> <div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div> <div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p><code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p><code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p><code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p><code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div></li></ol>              </div>            </details></div><div class="tab-item-content"><details class="folding-tag" blue><summary> 方法一 </summary>              <div class='content'>              <ol><li><code>simple</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><code>modern</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><code>flat</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><code>disabled</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><code>no-icon</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><code>simple</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><code>modern</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><code>flat</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><code>disabled</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><code>no-icon</code>样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><div class="tip cogs"><p>在大多数情况下上标标签和引用<code>note</code>的功能相似，两者基本可以无缝切换</p></div><div class="note warning flat"><p>另外值得注意的一点是<code>note</code>引用自定义图标是直接引入，需要加引号；而上标标签<code>tip</code>则是控制类型，因此无需加引号</p></div><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>参数配置</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标：支持fontawesome</li></ol></div><div class="tab-item-content"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, /img/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="时间线-TimeLine"><a href="#时间线-TimeLine" class="headerlink" title="时间线 TimeLine"></a>时间线 TimeLine</h2><div class="note warning flat"><p>为避免原生butterfly与外挂标签插件的冲突，本时间线引用的是原生butterfly的教程<a href="https://butterfly.js.org/posts/ceeb73f/?highlight=note#Timeline">TimeLine</a></p></div><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>参数配置</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line"></span><br><span class="line">xxxxx</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line"></span><br><span class="line">xxxxx</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>title：标题</li><li>color：时间线颜色</li></ol></div><div class="tab-item-content"><div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,pink %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>100%宽度<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></li><li>50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li><li>25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li></ol></div><div class="tab-item-content"><ol><li>100%宽度<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br></pre></td></tr></table></figure></li><li>50%宽度<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li><li>25%宽度<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>配置参数</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>颜色：blue, cyan, green, yellow, red</li><li>状态：open表示默认打开</li></ol></div><div class="tab-item-content"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line">- haha</span><br><span class="line">- hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha &lt;span&gt;&lt;img src=&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27; style=&#x27;height:24px&#x27;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>参数配置</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>Unique name :<br>选项卡块标签的唯一名称，不带逗号。<br>将在#id中用作每个标签及其索引号的前缀。<br>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。<br>仅当前帖子/页面的URL必须是唯一的！</li><li>[index]:<br>活动选项卡的索引号。<br>如果未指定，将选择第一个标签（1）。<br>如果index为-1，则不会选择任何选项卡。<br>可选参数。</li><li>[Tab caption]:<br>当前选项卡的标题。<br>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。<br>如果未指定标题，但指定了图标，则标题将为空。<br>可选参数。</li><li>[@icon]:<br>FontAwesome图标名称（全名，看起来像“ fas fa-font”）<br>可以指定带空格或不带空格；<br>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.<br>可选参数。</li></ol></div><div class="tab-item-content"><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">test1 1</button><button type="button" class="tab">test1 2</button><button type="button" class="tab">test1 3</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="数据图标-icon"><a href="#数据图标-icon" class="headerlink" title="数据图标 icon"></a>数据图标 icon</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>标签语法</button><button type="button" class="tab"><i class="icon"></i>参数配置</button><button type="button" class="tab"><i class="icon"></i>样式预览</button><button type="button" class="tab"><i class="icon"></i>示例源码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol></div><div class="tab-item-content"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-ox_chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-rabbit_mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-snake_si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-goat_wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-rooster_you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-boar_hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Butterfly Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点总结（三）组合式api</title>
      <link href="/2024/10/22/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E5%90%88%E5%BC%8Fapi/"/>
      <url>/2024/10/22/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E5%90%88%E5%BC%8Fapi/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>该系列文章主要基于官方Vue教程，对Vue使用及特性等方面做一个较为系统的总结</p></div><div class="tip bell"><p>官方文档链接<a href="https://cn.vuejs.org/guide/introduction">Vue.js</a></p></div><hr><h1>效率提升</h1><div class="note primary flat"><p>写这篇文章时突然意识到一点，<code>Vue3</code>和<code>Vue2</code>只是版本号差别，然而我们常常会把<code>Vue2</code>和选项式<code>api</code>绑定，把<code>Vue3</code>绑定组合式<code>api</code>,这其实是一个单纯的误区，因为Vue3几乎仍然完全兼容选项式<code>api</code>，所以<code>Vue</code>版本和<code>api</code>的使用方式是两个完全独立的概念</p></div><div class="tip success"><p>澄清了版本并不决定api的使用方式，我们就可以继续本节话题了，Vue3的更新带来了许多构建效率上的提升，在这种提升下，Vue3的客户端构建效率相比Vue2提升了约1.3~2倍，SSR构建效率提升了2~3倍，下面将给出具体的效率提升方法</p></div><h2 id="静态提升">静态提升</h2><p>先来回顾下<code>Vue</code>渲染的机制，我们都知道<code>Vue</code>渲染节点靠的是虚拟<code>DOM</code>，也就是构建<code>vnode</code>，当<code>render</code>函数运行时会遍历整个<code>DOM</code>树，并据此构建真实的<code>DOM</code>树，这个过程被称为&quot;挂载&quot;，而当某个节点发生变化，渲染器会比较虚拟<code>DOM</code>树并找出它们间的差别，这个过程被称为&quot;更新&quot;</p><details class="folding-tag" blue><summary> 点击查看模板渲染流程图 </summary>              <div class='content'>              <p><img src="/img/src/render.png" alt="虚拟DOM渲染" title="虚拟DOM渲染"></p>              </div>            </details><p>下面来讲讲什么是静态提升方法，首先我们要知道什么是静态元素，所谓静态元素就是那些固定写死在模板中的元素，这些元素不会在页面中响应式地发生变化，因此，我们不需要实时监听这些元素，这样就能节省下比对这些节点的消耗</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情示例</button><button type="button" class="tab"><i class="icon"></i>源码分析</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> &lt;!-- 需提升 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> &lt;!-- 需提升 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; dynamic &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这段代码中<code>foo</code>和<code>bar</code>两个<code>div</code>都是完全静态的，因此没有必要在渲染时重新比对它们，<code>Vue</code>编辑器会自动将这两个<code>DOM</code>节点提取到<code>render</code>函数之外，从而避免重复比对</p></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createElementVNode <span class="keyword">as</span> _createElementVNode, createCommentVNode <span class="keyword">as</span> _createCommentVNode, toDisplayString <span class="keyword">as</span> _toDisplayString, openBlock <span class="keyword">as</span> _openBlock, createElementBlock <span class="keyword">as</span> _createElementBlock &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createElementBlock</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, [</span><br><span class="line">    _cache[<span class="number">0</span>] || (_cache[<span class="number">0</span>] = <span class="title function_">_createElementVNode</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;foo&quot;</span>, -<span class="number">1</span> <span class="comment">/* HOISTED */</span>)),</span><br><span class="line">    <span class="title function_">_createCommentVNode</span>(<span class="string">&quot; hoisted &quot;</span>),</span><br><span class="line">    _cache[<span class="number">1</span>] || (_cache[<span class="number">1</span>] = <span class="title function_">_createElementVNode</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;bar&quot;</span>, -<span class="number">1</span> <span class="comment">/* HOISTED */</span>)),</span><br><span class="line">    <span class="title function_">_createCommentVNode</span>(<span class="string">&quot; hoisted &quot;</span>),</span><br><span class="line">    <span class="title function_">_createElementVNode</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, <span class="title function_">_toDisplayString</span>(_ctx.<span class="property">dynamic</span>), <span class="number">1</span> <span class="comment">/* TEXT */</span>)</span><br><span class="line">  ]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the console for the AST</span></span><br></pre></td></tr></table></figure><p>从<code>Vue</code>源码中我们可以看到<code>foo</code>和<code>bar</code>两个<code>div</code>节点被添加了格外参数<code>-1</code>用以表示其被提取到渲染函数之外，而动态节点<code>dynamic</code>则被标识为<code>1</code>表示其是文本类型</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="动态标记更新（patch-flag）">动态标记更新（patch flag）</h2><p>在静态提升中我们了解到了对于静态节点<code>Vue</code>编译器会将其提出到渲染函数之外，其实现方法是创建节点时添加一个参数，比如<code>-1</code>就标识静态提升</p><p>然而把参数仅用作判断节点是否为静态节点是否有些太浪费了呢，实际上这个参数的用途确实不止于此，参数可以标识更多信息，比如动态绑定的类、<code>Props</code>参数，甚至一个片段，根据检查这个参数，<code>Vue</code>编辑器就知道在生成渲染函数时要检查哪些而可以忽略哪些</p><p>最后这些动态标记方法是根据位运算赋予的参数，因为位运算可以最大化提升算法效率~~(这就是细节，蚊子腿也给你抠出来)~~</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>示例详情</button><button type="button" class="tab"><i class="icon"></i>源码分析</button><button type="button" class="tab"><i class="icon"></i>参数一览</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 仅含 <span class="keyword">class</span> 绑定 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 仅含 id 和 value 绑定 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:id</span>=<span class="string">&quot;id&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 仅含文本子节点 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; dynamic &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在这个例子中，分别有三种类型的动态绑定方法，第一个是<code>class</code>类，第二个是<code>Props</code>的参数，第三个则是动态插值，而它们也将对于不同的参数</p></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; normalizeClass <span class="keyword">as</span> _normalizeClass, createElementVNode <span class="keyword">as</span> _createElementVNode, toDisplayString <span class="keyword">as</span> _toDisplayString, <span class="title class_">Fragment</span> <span class="keyword">as</span> _Fragment, openBlock <span class="keyword">as</span> _openBlock, createElementBlock <span class="keyword">as</span> _createElementBlock &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createElementBlock</span>(_Fragment, <span class="literal">null</span>, [</span><br><span class="line">    <span class="title function_">_createElementVNode</span>(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">class</span>: <span class="title function_">_normalizeClass</span>(&#123; <span class="attr">active</span>: _ctx.<span class="property">active</span> &#125;)</span><br><span class="line">    &#125;, <span class="literal">null</span>, <span class="number">2</span> <span class="comment">/* CLASS */</span>),</span><br><span class="line">    <span class="title function_">_createElementVNode</span>(<span class="string">&quot;input&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">id</span>: _ctx.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">value</span>: _ctx.<span class="property">value</span></span><br><span class="line">    &#125;, <span class="literal">null</span>, <span class="number">8</span> <span class="comment">/* PROPS */</span>, [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;value&quot;</span>]),</span><br><span class="line">    <span class="title function_">_createElementVNode</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, <span class="title function_">_toDisplayString</span>(_ctx.<span class="property">dynamic</span>), <span class="number">1</span> <span class="comment">/* TEXT */</span>)</span><br><span class="line">  ], <span class="number">64</span> <span class="comment">/* STABLE_FRAGMENT */</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the console for the AST</span></span><br></pre></td></tr></table></figure><p>从<code>Vue</code>源码中我们可以看到，<code>class</code>对应的参数是<code>2</code>，<code>props</code>为<code>8</code>，而动态插值对应文本标识为<code>1</code>，此外还可以发现，最外层还有一个参数<code>64</code>,这表示多根节点代码段，这个参数说明这个代码段的结构将不会发生改变</p></div><div class="tab-item-content"><p>这里的参数表表示可以被识别的动态类型种类，详情见<a href="https://github.com/vuejs/core/blob/main/packages/shared/src/patchFlags.ts#L130C3-L130C13">patchflag参数表</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">PatchFlagNames</span>: <span class="title class_">Record</span>&lt;<span class="title class_">PatchFlags</span>, string&gt; = &#123;</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">TEXT</span>]: <span class="string">`TEXT`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">CLASS</span>]: <span class="string">`CLASS`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">STYLE</span>]: <span class="string">`STYLE`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">PROPS</span>]: <span class="string">`PROPS`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">FULL_PROPS</span>]: <span class="string">`FULL_PROPS`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">NEED_HYDRATION</span>]: <span class="string">`NEED_HYDRATION`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">STABLE_FRAGMENT</span>]: <span class="string">`STABLE_FRAGMENT`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">KEYED_FRAGMENT</span>]: <span class="string">`KEYED_FRAGMENT`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">UNKEYED_FRAGMENT</span>]: <span class="string">`UNKEYED_FRAGMENT`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">NEED_PATCH</span>]: <span class="string">`NEED_PATCH`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">DYNAMIC_SLOTS</span>]: <span class="string">`DYNAMIC_SLOTS`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">DEV_ROOT_FRAGMENT</span>]: <span class="string">`DEV_ROOT_FRAGMENT`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">CACHED</span>]: <span class="string">`HOISTED`</span>,</span><br><span class="line">  [<span class="title class_">PatchFlags</span>.<span class="property">BAIL</span>]: <span class="string">`BAIL`</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="树结构打平（block-tree）">树结构打平（block tree）</h2><p>从上述两个小点中我们可以看到返回虚拟代码实际上使用一个特殊的函数<code>createElementBlock</code>所创建的，这个创建规则其实就是“区块化”创建，使用了一遍该函数，则称这是一块“区块”，每一块“区块”都会跟踪其中的动态元素，返回的结果将是只包含一个动态元素的数组，渲染时只需要遍历这颗“打平”的树而非整颗虚拟<code>DOM</code>树，由此大大提高编译效率</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>示例详情</button><button type="button" class="tab"><i class="icon"></i>结果展示</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt; &lt;!-- root block --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>         &lt;!-- 不会追踪 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>   &lt;!-- 要追踪 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>                  <span class="comment">&lt;!-- 不会追踪 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; bar &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 要追踪 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>以上是一个区块</p></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">div</span> (block root)</span><br><span class="line">- div 带有 :id 绑定</span><br><span class="line">- div 带有 &#123;&#123; bar &#125;&#125; 绑定</span><br></pre></td></tr></table></figure><p>上述案例将与这个结果打平</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="预字符串化">预字符串化</h2><p>了解了<code>Vue</code>的渲染机制，我们知道<code>Vue</code>渲染<code>DOM</code>节点时封装的<code>vnode</code>最终会被转化为字符串，而预字符串化则是指当<code>Vue</code>编译器遇到大量连续的静态节点时会将这些节点打包成一个字符串，于是，这些字符串就相当于一个普通的节点，因此渲染效率就会相应提升</p><h2 id="缓存事件处理函数">缓存事件处理函数</h2><p><code>Vue</code>中还有一个特性就是在事件处理函数，如<code>data</code>、<code>method</code>运行后会对这个函数进行缓存，下次运行时就能直接调用缓存，从而提高效率</p><h1>组合式api核心</h1><h2 id="setup配置项">setup配置项</h2><div class="note info flat"><p>在大多数情况下，<code>setup()</code>配置项的作用是兼容选项式<code>api</code>，如果要结合单文件组件使用组合式<code>api</code>，始终更推荐<code>&lt;script setup&gt;</code>语法糖的写法</p></div><p><code>setup()</code>配置项算得上组合式<code>api</code>的核心，其使用方式是返回一个对象，而对象中的属性和方法会被暴露给模板和组件实例，这里就体现了“组合式”<code>api</code>的含义了，即需求逻辑可以被组合在一个<code>setup()</code>配置项中，后续无论是属性还是方法都可以直接被调用，由于所有逻辑都写在一块，所以修改起来就要方便得多，所以说组合式是面向需求的<code>api</code>，在大型项目维护上也会更有优势</p><p>这里是一个使用<code>setup</code>配置项的例子</p><details class="folding-tag" blue><summary> 点击查看示例 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值会暴露给模板和其他的选项式 API 钩子</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>) <span class="comment">// 0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>              </div>            </details><p>此外，<code>setup()</code>配置项还有一些默认的参数：<br>第一个参数是<code>props</code>，它用来接收由父组件传出的参数，使用<code>props.xxx</code>来调用</p><div class="note warning flat"><p>与<code>props</code>配置项一样，传入的参数是默认具有响应式的，但如果对其进行结构，参数就会丢失响应式，这时可以用<code>toRef()</code>工具函数来恢复响应式</p></div><p>第二个参数是<code>context</code>,暴露了其他一些组件实例，可以会在<code>setup</code>中调用，包括透传参数<code>attrs</code>、插槽<code>slots</code>、触发事件<code>emit</code>以及暴露选项<code>expose</code>，以下是样例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">    <span class="comment">// 透传 Attributes（非响应式的对象，等价于 $attrs）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">attrs</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插槽（非响应式的对象，等价于 $slots）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">slots</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件（函数，等价于 $emit）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">emit</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露公共属性（函数）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">expose</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>context</code>不具备响应式，所以可以放心解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; attrs, slots, emit, expose &#125;</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="script-setup"><code>&lt;script setup&gt;</code></h2><p>从上节的<code>setup()</code>选项中我们已经了解到了<code>&lt;script setup&gt;</code>是使用组合式<code>api</code>时的语法糖，默认推荐使用该语法糖，因为它具有多种优势，包括</p><blockquote><ol><li>更少的模板内容和更简介的语法</li></ol></blockquote><ol start="2"><li>能使用纯<code>Typescript</code>声明<code>props</code>和自定义事件</li><li>更好的运行性能(其模板会被编译成同一作用域内的渲染函数，避免了渲染上下文代理对象)</li><li>更好的 IDE 类型推导性能 (减少了语言服务器从代码中抽取类型的工作)</li></ol><p>下面是一些有关该语法模式的特性：</p><ol><li>启用<code>setup</code>语法只需要在<code>&lt;script&gt;</code>代码块中添加<code>setup</code>属性即可，在该模块中的代码会被自动编译成<code>setup()</code>配置项的内容</li><li>任何在<code>&lt;script setup&gt;</code>中声明的顶层绑定都能直接在模板中使用，甚至<code>import</code>导入的内容也会被同样方式暴露，而不需要写在<code>methods</code>配置项里，在某种程度上这种模式和<code>mixins</code>配置项高度重合，甚至这种调用方式将更为简单易懂</li><li>在模板中使用<code>ref</code>会自动解包</li><li>支持组件的直接引用，无需注册<code>components</code>配置项，可以用此方法调用自身或组件命名空间(多个组件的入口)</li><li>简化自定义指令，<code>vNameOfDirective</code>格式的属性会被自动识别为自定义指令，以<code>import</code>导入的可以通过别名改为自定义指令</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> vMyDirective = &#123;</span><br><span class="line">  <span class="attr">beforeMount</span>: <span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在元素上做些操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-my-directive</span>&gt;</span>This is a Heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="生命周期钩子">生命周期钩子</h2><p>在<code>&lt;setup&gt;</code>中取消了选项式中生命周期的配置项，取而代之的是一系列生命周期函数<br>生命周期函数一览</p><blockquote><ol><li><code>onMounted()</code>：在组件被挂载时调用</li></ol></blockquote><ol start="2"><li><code>onUpdated()</code>：在组件更新时调用</li><li><code>onUnmounted()</code>：在组件被卸载时调用</li><li><code>onBeforeMount()</code>：在组件挂载前调用</li><li><code>onBeforeUpdate()</code>：在组件更新前调用</li><li><code>onBeforeUnmount()</code>：在组件卸载前调用<br>区别：相对于选项式<code>api</code>去除了<code>created()</code>相关的钩子，将<code>destroy()</code>选项改为了<code>onUnmount()</code></li></ol><div class="note info flat"><p>虽然表现形式不同，但选项式和组合式<code>api</code>对生命周期钩子的底层实现还是一样的，不必拘泥于这种差别</p></div><h1>响应式api</h1><p>响应式<code>api</code>是<code>Vue3</code>中另一个重大变化，在选项式中，无论是<code>data</code>还是<code>props</code>，编译器都给你自动配好了响应式，但组合式<code>api</code>中需要自己设定响应式，一方面是<code>Vue3</code>对响应式做了优化，另一方面是组合式<code>api</code>有多种不同类型的响应式需要自己区分</p><h2 id="ref">ref()</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情描述</button><button type="button" class="tab"><i class="icon"></i>类型源码</button><button type="button" class="tab"><i class="icon"></i>使用示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p>最基本的响应式设置方法，本质是接收一个参数，并返回一个参数的<code>ref</code>代理对象(数据被分装在<code>value</code>属性中)，在脚本中需要调用<code>.value</code>来获取数据，在模板中则会自动解包数据</p><p>如果将一个对象赋值给<code>ref</code>，那么这个对象内部实际上会通过<code>reactive</code>转化为深度响应式，如果想要避免这种转化，只应用浅层响应式，可以使用<code>shallowRef()</code>来代替</p></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ref&lt;T&gt;(<span class="attr">value</span>: T): <span class="title class_">Ref</span>&lt;<span class="title class_">UnwrapRef</span>&lt;T&gt;&gt;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Ref</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">value</span>: T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对数据使用<code>Ref</code>进行包装，包装进<code>value</code>属性中</p></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="computed">computed()</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情描述</button><button type="button" class="tab"><i class="icon"></i>类型源码</button><button type="button" class="tab"><i class="icon"></i>使用示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p>相当于选项式<code>api</code>中的<code>computed:</code>配置项，传入一个箭头函数，默认将返回值封装为一个只读的响应式<code>ref</code>对象</p><p>可以配置一个包含<code>get</code>和<code>set</code>的对象，用来自定义规则，具体结构见类型源码，示例看代码示例</p></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只读</span></span><br><span class="line"><span class="keyword">function</span> computed&lt;T&gt;(</span><br><span class="line">  <span class="attr">getter</span>: <span class="function">(<span class="params">oldValue: T | <span class="literal">undefined</span></span>) =&gt;</span> T,</span><br><span class="line">  <span class="comment">// 查看下方的 &quot;计算属性调试&quot; 链接</span></span><br><span class="line">  debuggerOptions?: <span class="title class_">DebuggerOptions</span></span><br><span class="line">): <span class="title class_">Readonly</span>&lt;<span class="title class_">Ref</span>&lt;<span class="title class_">Readonly</span>&lt;T&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可写的</span></span><br><span class="line"><span class="keyword">function</span> computed&lt;T&gt;(</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="function">(<span class="params">oldValue: T | <span class="literal">undefined</span></span>) =&gt;</span> T</span><br><span class="line">    <span class="attr">set</span>: <span class="function">(<span class="params">value: T</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">  &#125;,</span><br><span class="line">  debuggerOptions?: <span class="title class_">DebuggerOptions</span></span><br><span class="line">): <span class="title class_">Ref</span>&lt;T&gt;</span><br></pre></td></tr></table></figure><p>默认传入箭头函数参数，返回只读的<code>Ref</code>，自定义中传入一个对象，包含<code>get</code>和<code>set</code>配置项</p></div><div class="tab-item-content"><p>只读<code>computed</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> plusOne = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(plusOne.<span class="property">value</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">plusOne.<span class="property">value</span>++ <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>自定义<code>computed</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> plusOne = <span class="title function_">computed</span>(&#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function">() =&gt;</span> count.<span class="property">value</span> + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    count.<span class="property">value</span> = val - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">plusOne.<span class="property">value</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="reactive">reactive()</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情描述</button><button type="button" class="tab"><i class="icon"></i>类型源码</button><button type="button" class="tab"><i class="icon"></i>使用示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p><code>reactive()</code>采用递归的方式将对象转化为响应式，其返回值本质为一个<code>reactive</code>代理对象</p><p>使用<code>reactive()</code>封装<code>ref</code>的对象时，会将其自动解包，无需再使用<code>value</code>调用，但对于原生数组和<code>map</code>则依然需要手动解包</p><p>该响应式是深层的，如果只想保留顶层响应式，可使用<code>shallowReactive()</code>替代</p><div class="note warning flat"><p><code>reactive</code>不能直接封装原始数据类型（如数字、字符串），只能封装对象，且对对象解构后会丢失响应性</p></div></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> reactive&lt;T <span class="keyword">extends</span> object&gt;(<span class="attr">target</span>: T): <span class="title class_">UnwrapNestedRefs</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>封装<code>ref</code>时自动解包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123; count &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ref 会被解包</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">count</span> === count.<span class="property">value</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 会更新 `obj.count`</span></span><br><span class="line">count.<span class="property">value</span>++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">count</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也会更新 `count` ref</span></span><br><span class="line">obj.<span class="property">count</span>++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">count</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>对<code>ref</code>封装的原生数组和<code>Map</code>类型不会自动解包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> books = <span class="title function_">reactive</span>([<span class="title function_">ref</span>(<span class="string">&#x27;Vue 3 Guide&#x27;</span>)])</span><br><span class="line"><span class="comment">// 这里需要 .value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(books[<span class="number">0</span>].<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="title function_">reactive</span>(<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;count&#x27;</span>, <span class="title function_">ref</span>(<span class="number">0</span>)]]))</span><br><span class="line"><span class="comment">// 这里需要 .value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;count&#x27;</span>).<span class="property">value</span>)</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="readonly">readonly()</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情描述</button><button type="button" class="tab"><i class="icon"></i>类型源码</button><button type="button" class="tab"><i class="icon"></i>使用示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p>接收一个对象，将其变为只读数据，本质是封装为一个只读的<code>reactive</code>，所以解包原理等同于<code>reactive</code></p><p>对于深层对象都会是只读的，如果要避免深层转化，使用<code>shallowReadonly()</code>替代</p></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> readonly&lt;T <span class="keyword">extends</span> object&gt;(</span><br><span class="line">  <span class="attr">target</span>: T</span><br><span class="line">): <span class="title class_">DeepReadonly</span>&lt;<span class="title class_">UnwrapNestedRefs</span>&lt;T&gt;&gt;</span><br></pre></td></tr></table></figure><p>返回值对<code>reactive()</code>再进行了一层只读封装</p></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copy = <span class="title function_">readonly</span>(original)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 用来做响应性追踪</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(copy.<span class="property">count</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改源属性会触发其依赖的侦听器</span></span><br><span class="line">original.<span class="property">count</span>++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改该只读副本将会失败，并会得到一个警告</span></span><br><span class="line">copy.<span class="property">count</span>++ <span class="comment">// warning!</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="watchEffect">watchEffect()</h2><p>从某种程度上来说，侦听器和响应式数据非常像，因为它们都是基于数据的变化做出响应式修改，这点在<code>watchEffect</code>上表现地淋漓尽致</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情描述</button><button type="button" class="tab"><i class="icon"></i>类型源码</button><button type="button" class="tab"><i class="icon"></i>使用示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p><code>watchEffect</code>需要传入一个无返回值的函数，<code>api</code>会自动追踪其中的响应式数据并在每次数据更新后执行一遍该函数,可选第二个参数，用来调整变化的发生时机和调试手段</p><p><code>watchEffect</code>设置参数后会立即执行一次该函数，相当于<code>watch</code>配置项的<code>immediate</code>,且<code>watchEffect</code>重复触发时会自动清理上一次未完成的副作用(侦听器封装了<code>onCleanup</code>参数，具体实现需要自己传入相应的执行函数)</p><p>默认<code>flush</code>为<code>pre</code>，即在数据更新前执行副作用，<code>post</code>表示数据更新后使用，同名<code>api</code>为<code>watchPostEffect</code>，<code>sync</code>表示响应变化(可能影响性能)，同名<code>api</code>为<code>watchSyncEffect</code></p><div class="note warning flat"><p><code>watchEffect</code>适合处理简单业务，例如对单个数据的即使副作用处理，如果要分别监听多个数据做不同操作，还是要用<code>watch()</code></p></div></div><div class="tab-item-content"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">watchEffect</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">effect</span>: (onCleanup: OnCleanup) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">  options?: <span class="title class_">WatchEffectOptions</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">WatchHandle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OnCleanup</span> = <span class="function">(<span class="params"><span class="attr">cleanupFn</span>: () =&gt; <span class="built_in">void</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">WatchEffectOptions</span> &#123;</span><br><span class="line">  flush?: <span class="string">&#x27;pre&#x27;</span> | <span class="string">&#x27;post&#x27;</span> | <span class="string">&#x27;sync&#x27;</span> <span class="comment">// 默认：&#x27;pre&#x27;</span></span><br><span class="line">  onTrack?: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DebuggerEvent</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  onTrigger?: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DebuggerEvent</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">WatchHandle</span> &#123;</span><br><span class="line">  (): <span class="built_in">void</span> <span class="comment">// 可调用，与 `stop` 相同</span></span><br><span class="line">  <span class="attr">pause</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">resume</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">stop</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，传入的第一个参数类型为无返回值的函数（该函数可以使用一个函数控制<code>onCleanup</code>清除时执行的操作），第二个参数为一个对象，其中的<code>flush</code>用来控制触发时机，后两个用于调试需求<br>函数返回值为一个接口对象，该对象完成了对<code>pause()</code>暂停、<code>resume()</code>恢复和<code>stop()</code>结束的封装，可以调用相应函数改变侦听器状态</p></div><div class="tab-item-content"><p>直接调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>))</span><br><span class="line"><span class="comment">// -&gt; 输出 0</span></span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span>++</span><br><span class="line"><span class="comment">// -&gt; 输出 1</span></span><br></pre></td></tr></table></figure><p>自定义副作用清理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="title function_">async</span> (onCleanup) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; response, cancel &#125; = <span class="title function_">doAsyncWork</span>(id.<span class="property">value</span>)</span><br><span class="line">  <span class="comment">// `cancel` 会在 `id` 更改时调用</span></span><br><span class="line">  <span class="comment">// 以便取消之前</span></span><br><span class="line">  <span class="comment">// 未完成的请求</span></span><br><span class="line">  <span class="title function_">onCleanup</span>(cancel)</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>改变侦听器状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; stop, pause, resume &#125; = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂停侦听器</span></span><br><span class="line"><span class="title function_">pause</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 稍后恢复</span></span><br><span class="line"><span class="title function_">resume</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止</span></span><br><span class="line"><span class="title function_">stop</span>()</span><br></pre></td></tr></table></figure><p>第二参数改变侦听器触发时机</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="title function_">onTrack</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onTrigger</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="watch">watch()</h2><p><code>watch()</code>可以说是<code>watchEffect()</code>的升级版，两者共享清除<code>onCleanup</code>机制和启动结束机制，但<code>watch</code>总的来说提供了更多的功能，适合应对更加复杂的场景</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情描述</button><button type="button" class="tab"><i class="icon"></i>类型源码</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p><code>watch()</code>接收两个必选参数，第一个参数是监听的对象，第二个参数是回调函数，可选监听第三个参数，即<code>watch</code>的配置项</p><p><code>watch()</code>监听对象包含一个<code>ref</code>、<code>有返回值的函数</code>或一个对象，回调函数接收三个值，分别是新值，旧值和<code>onCleanup</code>清理函数，选项为一个对象包含<code>deep</code>，<code>immediate</code>、<code>flush</code>、调试函数和<code>once</code>(表示只监听一次)</p><p>使用<code>watch</code>监听多个对象时，可在监听对象和回调函数参数部分传入数组，也可以写两个<code>watch</code>(这在<code>watchEffect</code>中是不支持的)</p></div><div class="tab-item-content"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 侦听单个来源</span></span><br><span class="line"><span class="keyword">function</span> watch&lt;T&gt;(</span><br><span class="line">  <span class="attr">source</span>: <span class="title class_">WatchSource</span>&lt;T&gt;,</span><br><span class="line">  <span class="attr">callback</span>: <span class="title class_">WatchCallback</span>&lt;T&gt;,</span><br><span class="line">  options?: <span class="title class_">WatchOptions</span></span><br><span class="line">): <span class="title class_">WatchHandle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听多个来源</span></span><br><span class="line"><span class="keyword">function</span> watch&lt;T&gt;(</span><br><span class="line">  <span class="attr">sources</span>: <span class="title class_">WatchSource</span>&lt;T&gt;[],</span><br><span class="line">  <span class="attr">callback</span>: <span class="title class_">WatchCallback</span>&lt;T[]&gt;,</span><br><span class="line">  options?: <span class="title class_">WatchOptions</span></span><br><span class="line">): <span class="title class_">WatchHandle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">WatchCallback</span>&lt;T&gt; = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="attr">value</span>: T,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="attr">oldValue</span>: T,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="attr">onCleanup</span>: (cleanupFn: () =&gt; <span class="built_in">void</span>) =&gt; <span class="built_in">void</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">WatchSource</span>&lt;T&gt; =</span><br><span class="line">  | <span class="title class_">Ref</span>&lt;T&gt; <span class="comment">// ref</span></span><br><span class="line">  | (<span class="function">() =&gt;</span> T) <span class="comment">// getter</span></span><br><span class="line">  | T <span class="keyword">extends</span> <span class="built_in">object</span></span><br><span class="line">  ? T</span><br><span class="line">  : <span class="built_in">never</span> <span class="comment">// 响应式对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">WatchOptions</span> <span class="keyword">extends</span> <span class="title class_">WatchEffectOptions</span> &#123;</span><br><span class="line">  immediate?: <span class="built_in">boolean</span> <span class="comment">// 默认：false</span></span><br><span class="line">  deep?: <span class="built_in">boolean</span> | <span class="built_in">number</span> <span class="comment">// 默认：false</span></span><br><span class="line">  flush?: <span class="string">&#x27;pre&#x27;</span> | <span class="string">&#x27;post&#x27;</span> | <span class="string">&#x27;sync&#x27;</span> <span class="comment">// 默认：&#x27;pre&#x27;</span></span><br><span class="line">  onTrack?: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DebuggerEvent</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  onTrigger?: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DebuggerEvent</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  once?: <span class="built_in">boolean</span> <span class="comment">// 默认：false (3.4+)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">WatchHandle</span> &#123;</span><br><span class="line">  (): <span class="built_in">void</span> <span class="comment">// 可调用，与 `stop` 相同</span></span><br><span class="line">  <span class="attr">pause</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">resume</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">stop</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调清理和暂停/恢复操作等同于<code>watchEffect()</code></p></div><div class="tab-item-content"><p>基本使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> state.<span class="property">count</span>,</span><br><span class="line">  <span class="function">(<span class="params">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>一个监听器监听多个来源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>([fooRef, barRef], <span class="function">(<span class="params">[foo, bar], [prevFoo, prevBar]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="响应式api工具函数">响应式api工具函数</h2><p>通过<code>Vue</code>自带的工具函数，可以帮助我们鉴别某些响应式<code>api</code></p><blockquote><ul><li><code>isRef()</code>：判断某个值是否为<code>ref</code>类型</li></ul></blockquote><ul><li><code>unref()</code>：如果某个值是<code>ref</code>,返回这个值的参数，否则返回这个值本身</li><li><code>toRef()</code>：将一个值规范化为<code>ref</code>类型</li><li><code>toValue()</code>：将一个对象规范化为它的参数值</li><li><code>toRefs()</code>：将一个对象内部的值都转化为<code>ref</code>类型（对象值一般会是<code>reactive</code>类型，解构时会失去响应式，<code>ref</code>则会保留响应式）</li><li><code>isProxy()</code>：检查一个对象是否是由 <code>reactive()</code>、<code>readonly()</code>、<code>shallowReactive()</code> 或 <code>shallowReadonly()</code> 创建的代理</li><li><code>isReactive()</code>：检查一个对象是否是由 <code>reactive()</code> 或 <code>shallowReactive()</code> 创建的代理。</li><li><code>isReadonly</code>：检查传入的值是否为只读对象。</li></ul><h1>组件参数传递</h1><p>组合式<code>api</code>中区别于选项式的另一大区别是，在<code>setup()</code>配置项中，<code>props</code>、<code>emits</code>、<code>expose</code>等配置项是作为参数被放在<code>setup()</code>函数中的，然而在我们实际开发过程中，绝大多数情况下会使用<code>&lt;script setup&gt;</code>这个语法糖，那么函数参数的位置就不复存在了，所以我们就另外定义了一套标准(宏)来使用这些功能<br>使用宏来定义这些选项还有其他一些好处，比如上下文实例参数传递变得更加直观，又比如可以很好地兼容<code>Typescript</code>进行类型推断</p><h2 id="defineProps">defineProps()</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情描述</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p>由于使用<code>&lt;script setup&gt;</code>语法糖之后没有参数空间给<code>props</code>做引用了，所以在组合式<code>api</code>中引入了宏的概念，使用<code>defineProps()</code>宏来声明<code>props</code>选项，在没有使用<code>&lt;script setup&gt;</code>的组件中，<code>props</code>还是可以使用选项的方式来命名</p><p>和选项的差别基本只在于外层壳的不同，以及去除了<code>this</code>指针，调用时使用<code>propsname</code>宏名称作为前缀</p><p>是用<code>typescript</code>设置泛型类型之后就不需要预先传参了，且这种方式还能提供类型推断，因此更为推荐</p><div class="note primary flat"><p>即使语法格式不一样，它们底层用的都是<code>props</code>配置项，实现层面没有什么区别</p></div></div><div class="tab-item-content"><p>传参的方式，基本等同于<code>props</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 &lt;script setup&gt;</span></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">likes</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非 &lt;script setup&gt;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">likes</span>: <span class="title class_">Number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>ts</code>泛型做类型推断的方式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  title?: <span class="built_in">string</span></span><br><span class="line">  likes?: <span class="built_in">number</span></span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="defineEmits">defineEmits()</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情描述</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p>和<code>defineProps()</code>一样，<code>defineEmits()</code>是基于<code>emits</code>配置项的宏，且只能在<code>&lt;script setup&gt;</code>中使用，使用方式几乎和配置项没有区别</p><p>组合式<code>api</code>只取消了<code>this</code>指针，在模板中还是可以直接使用<code>$emit</code>进行事件传递</p><p>可以使用纯类型标注来使用<code>defineEmits()</code></p></div><div class="tab-item-content"><p>直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="title function_">defineEmits</span>([<span class="string">&#x27;inFocus&#x27;</span>, <span class="string">&#x27;submit&#x27;</span>])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;inFocus&#x27;</span>, <span class="string">&#x27;submit&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">buttonClick</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">emit</span>(<span class="string">&#x27;submit&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>增加校验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>(&#123;</span><br><span class="line">  <span class="comment">// 没有校验</span></span><br><span class="line">  <span class="attr">click</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 校验 submit 事件</span></span><br><span class="line">  <span class="attr">submit</span>: <span class="function">(<span class="params">&#123; email, password &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (email &amp;&amp; password) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Invalid submit event payload!&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">submitForm</span>(<span class="params">email, password</span>) &#123;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">&#x27;submit&#x27;</span>, &#123; email, password &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用<code>ts</code>进行类型标注(触发函数+参数)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">id</span>: <span class="built_in">number</span>): <span class="title function_">void</span></span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;update&#x27;</span>, <span class="attr">value</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="defineModel">defineModel()</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详情描述</button><button type="button" class="tab"><i class="icon"></i>拆解原型</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p><code>defineModel</code>是组件间<code>v-model</code>的宏，由于组件式<code>api</code>的数据响应式和选项式<code>api</code>有一定的区别，所以这个宏也有一定的差别，它返回的数据是使用<code>ref</code>包裹的</p><p>组合式<code>api</code>极大地简化了<code>v-model</code>的写法，原本在选项式<code>api</code>中需要在子组件中自己配置<code>props</code>和事件处理函数，有了<code>defineModel()</code>宏之后只需要用其包裹想要绑定的值即可，在父组件中就可以直接<code>v-model</code>绑定了</p><p><code>defineModel()</code>宏还可以接收参数，用于多个<code>v-model</code>绑定，用<code>v-model:paramsName</code>指定绑定对象，此外还可传入第二个对象参数，用来处理<code>props</code>配置项</p></div><div class="tab-item-content"><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">Child</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;modelValue&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:value</span>=<span class="string">&quot;modelValue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">input</span>=<span class="string">&quot;emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">Parent</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Child</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:modelValue</span>=<span class="string">&quot;foo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  @<span class="attr">update:modelValue</span>=<span class="string">&quot;$event =&gt; (foo = $event)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">Child</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> model = <span class="title function_">defineModel</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  model.<span class="property">value</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Parent bound v-model is: &#123;&#123; model &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="comment">//支持父组件绑定</span></span><br><span class="line">&lt;!-- <span class="title class_">Parent</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-model</span>=<span class="string">&quot;countModel&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>多个<code>v-model</code>绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;<span class="title class_">UserName</span></span><br><span class="line">  v-<span class="attr">model</span>:first-name=<span class="string">&quot;first&quot;</span></span><br><span class="line">  v-<span class="attr">model</span>:last-name=<span class="string">&quot;last&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> firstName = <span class="title function_">defineModel</span>(<span class="string">&#x27;firstName&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> lastName = <span class="title function_">defineModel</span>(<span class="string">&#x27;lastName&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Vue 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点总结（二）选项式api</title>
      <link href="/2024/10/22/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89%E9%80%89%E9%A1%B9%E5%BC%8Fapi/"/>
      <url>/2024/10/22/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89%E9%80%89%E9%A1%B9%E5%BC%8Fapi/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>该系列文章主要基于官方Vue教程，对Vue使用及特性等方面做一个较为系统的总结</p></div><div class="tip bell"><p>官方文档链接<a href="https://cn.vuejs.org/guide/introduction">Vue.js</a></p></div><hr><h1>选项式api简述</h1><div class="note primary flat"><p><code>Vue</code>是一门面向数据的框架，这点在选项式<code>api</code>中尤为明显</p></div><p>选项式<code>api</code>是<code>Vue2</code>中定义组件的一种方法，它采用对象语法，将组件的各项功能划分为不同的选项，如<code>data</code>,<code>computed</code>,<code>methods</code>等，使开发者用配置对象来定义组件的状态，行为和属性</p><blockquote><p>选项式的优点：直观易懂，数据、方法等选项清晰分离，易于维护和管理<br>选项式的缺点：随着组件复杂度的增加，选项式api会逐步变得难以维护</p></blockquote><h1>选项式api配置项</h1><div class="tip sync"><p>配置项是选项式api的核心，通过将配置项注入组件实例，数据才能在组件中被顺利执行</p></div><h2 id="el">el</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>示例代码</button></div><div class="tab-contents"><div class="tab-item-content active"><p><code>el</code>配置项用来指定<code>Vue</code>实例要挂载的<code>DOM</code>元素，可以使用<code>$el</code>实例成员访问挂载的根元素</p><div class="note info flat"><p>一般在局部创建<code>Vue</code>实例的时候使用，效果等同于使用<code>mount()</code>绑定根元素</p></div><div class="note warning flat"><p><code>mount()</code>用于在<code>Vue3</code>中<code>createApp()</code>创建的<code>Vue</code>实例挂载，在<code>Vue2</code>中使用<code>$mount()</code>进行挂载，<code>$mount()</code>在<code>Vue3</code>中已被废弃</p></div></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="data">data()</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>实例代码</button></div><div class="tab-contents"><div class="tab-item-content active"><p>在<code>Vue</code>中使用使用<code>data()</code>配置项创建成员属性，<code>data()</code>本身是个函数，需要<code>return</code>返回一个普通<code>js</code>对象</p><div class="note primary flat"><p><code>data</code>中的数据本身应使用<code>$data</code>实例成员访问属性，但由于配置项中默认给了一个代理，因此可以直接访问具有响应式的数据</p></div></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// 1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$data</span>) <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="computed">computed</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>示例代码</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><code>computed</code>配置项用来保存一些需要依赖其他属性做响应式修改的属性</li><li><code>computed</code>创建属性的方法和函数类似，只不过可以在属性中使用<code>get()</code>和<code>set()</code>自定义修改方式</li></ul><div class="note orange icon-padding flat"><i class="note-icon fas fa-wand-magic"></i><p><code>computed</code>vs<code>methods</code>:由<code>computed</code>配置项定义的属性只有在原始数据进行修改时才会被重复调用，这在面对一些需要重复使用的数据时能够极大地节约性能</p></div></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">   <span class="comment">// 一个计算属性的 getter</span></span><br><span class="line">   <span class="title function_">publishedBooksMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// `this` 指向当前组件实例</span></span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">author</span>.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="methods">methods</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><code>methods</code>用于创建<code>vue</code>实例上的事件处理函数，使用方式和<code>computed</code>类似，使用<code>v-on</code>事件调用</li><li>在<code>methods</code>中使用<code>this</code>指针访问实例属性，使用<code>$event</code>示例成员调用事件自身，使用默认的<code>event</code>参数访问实例方法，<code>event.target</code>则表示选中的<code>dom</code>元素本身</li></ul></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Vue.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 方法中的 `this` 指向当前活跃的组件实例</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>!`</span>)</span><br><span class="line">    <span class="comment">// `event` 是 DOM 原生事件</span></span><br><span class="line">    <span class="keyword">if</span> (event) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button @click=<span class="string">&quot;greet&quot;</span>&gt;<span class="title class_">Greet</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="生命周期钩子">生命周期钩子</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>生命周期api一览</button><button type="button" class="tab"><i class="icon"></i>示例代码</button></div><div class="tab-contents"><div class="tab-item-content active"><p>生命周期钩子是一系列钩子函数，用于处理在页面创建不同执行阶段的相关操作</p><details class="folding-tag" blue><summary> 点击查看生命周期执行图示 </summary>              <div class='content'>              <p><img src="/img/src/lifecycle.png" alt="生命周期图示" title="生命周期图示"></p>              </div>            </details></div><div class="tab-item-content"><ol><li><code>beforeCreate</code>：在组件实例初始化完成后调用，只解析了<code>props</code>传入的数据和<code>setup()</code>钩子</li><li><code>created</code>：处理完数据部分，如<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>，但为挂载，因此还不可调用<code>$el</code></li><li><code>beforeMount</code>：组件完成响应式的设置，但还没有创建<code>DOM</code>节点</li><li><code>mounted</code>：组件被挂载后调用</li><li><code>beforeUpdata</code>：在<code>DOM</code>节点更新之前调用</li><li><code>updated</code>:任何<code>DOM</code>节点更新后调用，可使用<code>nextTick()</code>记录首次更新的结果</li><li><code>beforeUnmount</code>:组件被卸载前调用，调用时组件还具有所有功能</li><li><code>unmounted</code>：组件实例被卸载后调用，可在这个钩子中清理如计时器或事件监听器造成的影响</li></ol></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`the component is now mounted.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="watch侦听器">watch侦听器</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>配置项</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><code>watch</code>侦听器用于监听数据变化，当监听的数据变化时，执行一个特定的函数</li><li><code>watch</code>支持简化写法，即写一个监听属性的同名方法，方法中默认传入<code>old</code>和<code>new</code>两个参数用来描述数据变化前后的两个状态</li><li><code>watch</code>完整写法需要提供一个同名对象，其中可添加一些配置项执行格外操作</li><li>需要侦听嵌套对象内的属性时，简写写法<code>[&quot;obj.a&quot;](new,old)</code>，完整写法<code>&quot;obj.a:{}&quot;</code></li><li>可使用<code>this.$watch(value,(new,old)=&gt;{})</code>创建一个即时监听器，参数配置和定时器类型</li></ul></div><div class="tab-item-content"><blockquote><p><code>handler(new,old)</code>：完整写法中的触发函数<br><code>deep</code>：表示深度监听，如果属性嵌套很深，则使用深度监听会损耗性能<br><code>immediate</code>：表示侦听器创建时立即执行1次函数<br><code>once</code>：表示变化只执行一次</p></blockquote></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello, Vue!&#x27;</span>,</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">message</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`message changed from <span class="subst">$&#123;oldVal&#125;</span> to <span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">count</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count changed from <span class="subst">$&#123;oldVal&#125;</span> to <span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="mixins混入">mixins混入</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>示例代码</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><code>mixins</code>用于在代码中抽离一些公共部分，来实现组件间的共享逻辑，从而优化工程结构</li><li>需要一个外部组件导出一个需要混合的公共项，在内部组件中调用<code>mixins</code>配置项，传递的部分需要一个对象，可以直接传递对象，或者使用函数<code>return</code>一个对象(这种方式可以传递指定参数)</li></ul><div class="note warning flat"><p><code>mixins</code>覆盖顺序取决于配置项在实例中的位置，<code>Vue3</code>中虽然保留了<code>mixins</code>的调用，但由于<code>Vue3</code>中可以手动抽离逻辑体，故在<code>Vue3</code>中这个配置项已经相当少见</p></div></div><div class="tab-item-content"><details class="folding-tag" blue><summary> Mixin文件 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myMixin.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myMixin = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sharedData</span>: <span class="string">&#x27;This is shared data&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mixin created hook called&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sharedMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is a shared method&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 调取文件 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">ComponentA</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; sharedData &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sharedMethod&quot;</span>&gt;</span>Call Shared Method<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; myMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./myMixin&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">mixins</span>: [myMixin],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">componentAData</span>: <span class="string">&#x27;Data specific to Component A&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Component A created hook called&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">componentAMethod</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Method specific to Component A&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h1>选项式api的组件化与参数传递</h1><p>在<code>vue</code>中是以一个个组件构成的整个项目，组件以其功能的区别进行划分，而不同功能之间往往需要进行数据交互，因此组件间的参数传递就必不可少，这节主要描述组件间参数传递的多种方式</p><h2 id="组件注册">组件注册</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li>一个<code>Vue</code>组件在使用前必须先被“注册”，这样<code>Vue</code>才能在渲染时找到对应实现</li><li>在选项式<code>api</code>中组件注册需要使用<code>components</code>配置项，分为局部注册和全局注册两种</li><li>全局注册支持链式注册，但全局注册后，没被使用的组件不会被<code>tree shinking</code></li></ul><div class="note info flat"><p>组件建议使用大驼峰命名法，也可以使用短横线命名法，两者会互相转化</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-wand-magic"></i><p>使用<code>name</code>配置项可以为组件自身命名，组件自身可以用名字调用自身</p></div></div><div class="tab-item-content"><details class="folding-tag" blue><summary> 全局注册 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 局部注册 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ComponentA</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ComponentA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="Props配置项">Props配置项</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>校检参数</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><ul><li><code>props</code>是组件间通信的最常见的方式，使用时需要在子组件中显示声明它所需要接收的<code>props</code>，在父组件中以参数的方式进行传递</li><li><code>props</code>显示声明参数时可以使用字符串数组或对象的形式，并且可以配置校检参数对传递的数据进行校检</li><li>建议使用小驼峰命名法，小驼峰和短横线命名法会相互转化</li></ul><div class="note info flat"><p>参数传递支持动态绑定与直接传递，一般动态绑定传递会比较常见</p></div><div class="note danger flat"><p>props使用单向数据流进行数据传递，因此需要避免在子组件中修改传递的数据的情况</p></div></div><div class="tab-item-content"><ul><li><code>type</code>:表示确定数据类型</li><li><code>required</code>:指定数据是否必须</li><li><code>default</code>:为数据指定默认值</li><li><code>validator</code>:自定义函数校验，具有默认参数<code>value</code>，以<code>return</code>结果判断校验是否通过</li></ul></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 详细写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">likes</span>: <span class="title class_">Number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加校验项</span></span><br><span class="line"><span class="attr">propD</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="literal">null</span>],</span><br><span class="line">  <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="emit事件">$emit事件</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p>通过上一节<code>props</code>的介绍中，我们了解<code>props</code>配置项符合单向数据流，那么如果子组件要传递信息给父组件要怎么做呢，<code>$emit</code>正是为解决子向父传递数据的问题</p><ul><li>子组件使用<code>$emit</code>抛出事件，父组件中使用<code>v-on</code>监听事件触发对应函数</li><li>抛出事件第一个参数为事件名(必填)，第二个参数可以设置传递的参数</li><li>组件内部可以声明<code>emits</code>配置项来显示声明将要抛出的事件,配置项指出数组字符串或对象语法，在完整的对象语法中可以进行事件校验</li></ul><div class="note warning flat"><p>在<code>html</code>模板中可直接使用<code>$emit</code>抛出事件，在选项方法中需要使用<code>this.$emit</code></p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-wand-magic"></i><p>在参数中可传入函数，这个函数可以当作回调函数触发</p></div></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板中使用</span></span><br><span class="line">&lt;button @click=<span class="string">&quot;$emit(&#x27;someEvent&#x27;)&quot;</span>&gt;<span class="title class_">Click</span> <span class="title class_">Me</span>&lt;/button&gt;</span><br><span class="line"><span class="comment">// 配置项中使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;someEvent&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" blue><summary> 配置项写法示例 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简化写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;inFocus&#x27;</span>, <span class="string">&#x27;submit&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整写法加校验</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="comment">// 没有校验</span></span><br><span class="line">    <span class="attr">click</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验 submit 事件</span></span><br><span class="line">    <span class="attr">submit</span>: <span class="function">(<span class="params">&#123; email, password &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (email &amp;&amp; password) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Invalid submit event payload!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">submitForm</span>(<span class="params">email, password</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;submit&#x27;</span>, &#123; email, password &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="组件间的v-model">组件间的v-model</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>原型拆解</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p>在上两小节中我们了解了从父组件向子组件单向传递的<code>props</code>以及由子组件向父组件单向抛出的<code>$emit</code>事件，那么有没有将数据双向绑定的方式呢？有，答案就是<code>v-model</code></p><p><code>v-model</code>的本质是在父组件中动态绑定子组件的某个传递参数，这意味着在子组件中仍需定义<code>props</code>配置项和<code>$emit</code>事件处理函数来接收和发送数据，<code>v-model</code>只是在父组件中对两者合并的简写</p><div class="note info flat"><p>在组合式<code>api</code>中引入了<code>defineModel</code>宏，可以在子组件中也简化写法</p></div><p>在基础认识篇我们了解了<code>v-model</code>对表单元素的双向绑定，这种绑定同时也可以使用在组件上，而两者拆解后格式也差不多</p><ul><li><code>v-model</code>是一个语法糖，是对传递数据以及修改后动态改变数据的合并</li><li><code>v-model</code>绑定的数据也支持修饰符</li></ul></div><div class="tab-item-content"><p>首先，回顾下原生元素中<code>v-model</code>的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">&quot;searchText&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:value</span>=<span class="string">&quot;searchText&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  @<span class="attr">input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><p>在组件中的拆解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">CustomInput</span></span><br><span class="line">  :model-value=<span class="string">&quot;searchText&quot;</span></span><br><span class="line">  @<span class="attr">update</span>:model-value=<span class="string">&quot;newValue =&gt; searchText = newValue&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p><code>:model-value</code>为动态绑定的<code>props</code>,<code>update:model-value</code>是抛出的方法名，数据由父组件中的<code>searchText</code>动态控制</p><div class="note info flat"><p>其中，<code>model-value</code>只是绑定的参数名，可以修改为任意值，比如<code>v-model:first-name=&quot;first&quot;</code>则表示双向绑定<code>first-name</code>，用次方式可以同时绑定多个值</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-wand-magic"></i><p>当然，在组件中修改相应的抛出事件可以修改绑定规则，但一般不建议这么做</p></div></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">UserName</span></span><br><span class="line">  v-<span class="attr">model</span>:first-name=<span class="string">&quot;first&quot;</span></span><br><span class="line">  v-<span class="attr">model</span>:last-name=<span class="string">&quot;last&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">firstName</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">lastName</span>: <span class="title class_">String</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">emits</span>: [<span class="string">&#x27;update:firstName&#x27;</span>, <span class="string">&#x27;update:lastName&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:value</span>=<span class="string">&quot;firstName&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:value</span>=<span class="string">&quot;lastName&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="slot插槽">slot插槽</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>详解插槽</button></div><div class="tab-contents"><div class="tab-item-content active"><p>在调用组件时，我们常常能发现一个问题，即组件中的所有内容都是写死的，如果我仅仅需要修改组件的一部分将变得相当困难，于是，便有了插槽<code>slot</code>，插槽的作用是方便我们自定义组件内部内容，从而增加组件的可延展性</p><ul><li>插槽分为基本插槽、具名插槽、作用域插槽</li><li>插槽中可填入默认内容，插槽添加name参数变为具名插槽，嵌入时，没有用<code>&lt;template&gt;</code>指定名称则进入默认的<code>default</code>插槽中</li><li><code>$slots</code>实例成员中存放所有定义的插槽</li></ul><div class="note warning flat"><p>在父组件中使用插槽时，无法访问子组件的作用域，为此可以使用作用域插槽进行数据传递</p></div></div><div class="tab-item-content"><ol><li>基本插槽：在子组件中使用<code>&lt;slot&gt;&lt;/slot&gt;</code>指定插槽位置，在父组件中嵌入<code>html</code>语句以填充</li></ol><details class="folding-tag" blue><summary> 基本插槽语法 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="comment">&lt;!-- 这里是插槽 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;MyComponent&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MyComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这段文本将被插入到子组件的插槽中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./MyComponent.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">MyComponent</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>              </div>            </details><ol start="2"><li>具名插槽：用于区分多个插槽而诞生，用<code>v-slot:</code>绑定名称，简写为<code>#</code>，没有绑定则默认绑定<code>default</code>插槽</li></ol><details class="folding-tag" blue><summary> 具名插槽语法 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">BaseLayout</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">BaseLayout</span>&gt;</span></span></span><br></pre></td></tr></table></figure>              </div>            </details>3. 条件插槽：`$slots`示例成员中存放所有定义的插槽，可根据`$slots`配合`v-if`来判断插槽存在与否并追加渲染内容<details class="folding-tag" blue><summary> 条件插槽语法 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;$slots.header&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;$slots.default&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;$slots.footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>              </div>            </details>4. 动态插槽：可以绑定动态参数以动态渲染插槽<details class="folding-tag" blue><summary> 动态插槽语法 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>[<span class="attr">dynamicSlotName</span>]&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &lt;!-- 缩写为 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #[<span class="attr">dynamicSlotName</span>]&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure>              </div>            </details>5. 作用域插槽：用来解决子组件向父组件传递数据的问题，在子组件中像`props`一样传递数据，在父组件中就可以通过一个参数接收数据<details class="folding-tag" blue><summary> 作用域插槽语法 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:text</span>=<span class="string">&quot;greetingMessage&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; slotProps.text &#125;&#125; &#123;&#123; slotProps.count &#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span></span><br></pre></td></tr></table></figure>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="跨层级消息传递">跨层级消息传递</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p>在上文我们了解了父子组件传递数据时会使用<code>props</code>,但是<code>props</code>只支持父组件向子组件传递数据，如果组件树层次很复杂，那么使用<code>props</code>的逐级传递会非常麻烦，因此引入了<code>provide</code>和<code>inject</code>用于解决数据的深层次传输问题</p><ul><li>父级组件使用<code>provide</code>配置项提供数据，提供一个对象或者使用函数方式返回一个对象</li><li>后代组件使用<code>inject</code>配置项接收数据，使用方式等同于<code>props</code>，且注入的数据在<code>data()</code>渲染完之前就会获取</li><li>可以自定义注入的本地名称或者指定获取依赖的来源</li><li>在应用层可使用<code>app.provide(name,value)</code>提供全局依赖</li></ul><div class="note warning flat"><p>provide提供的依赖默认不是响应式的，若需将其变成响应式，需要使用computed()api</p></div><div class="note danger flat"><p>在<code>vue2</code>中还有使用事件总线<code>$on</code>、<code>$bus</code>事件总线的方式进行跨层级消息传输的，但在<code>vue3</code>中这种方式已被废弃</p></div></div><div class="tab-item-content"><p><code>provide</code>提供数据的两种方式</p><details class="folding-tag" blue><summary> 使用provide提供依赖 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象提供</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用函数提供</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用函数的形式，可以访问到 `this`</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="variable language_">this</span>.<span class="property">message</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p><code>inject</code>注入的简写和完整写法</p><details class="folding-tag" blue><summary> 使用inject获取依赖 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;message&#x27;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 基于注入值的初始数据</span></span><br><span class="line">      <span class="attr">fullMessage</span>: <span class="variable language_">this</span>.<span class="property">message</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 当声明注入的默认值时</span></span><br><span class="line">  <span class="comment">// 必须使用对象形式</span></span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&#x27;message&#x27;</span>, <span class="comment">// 当与原注入名同名时，这个属性是可选的</span></span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;default value&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="comment">// 对于非基础类型数据，如果创建开销比较大，或是需要确保每个组件实例</span></span><br><span class="line">      <span class="comment">// 需要独立数据的，请使用工厂函数</span></span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>响应式依赖<code>provide</code></p><details class="folding-tag" blue><summary> 完整代码 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 显式提供一个计算属性</span></span><br><span class="line">      <span class="attr">message</span>: <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="Attribute透传">Attribute透传</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细描述</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p>透传指的是一种特性，即当在组件上的属性没有被声明为<code>props</code>或<code>emits</code>时，这个属性会自动加到组件内部的根节点上，比如写入<code>class</code>，这个<code>class</code>找不到对应的<code>props</code>用于接收，那它就会在组件内部加上这个<code>class</code>类,<code>v-on</code>的事件也是同理</p><ul><li><code>$attrs</code>实例对象用以接收所有透传的属性</li><li>可在组件内部用<code>v-bind='$attrs'</code>指定绑定透传的元素</li><li>如果组件内部有多个根节点，则必须指定绑定透传对象，否则将会报错</li></ul></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单根节点绑定</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;btn-wrapper&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多根节点绑定</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">CustomLayout</span> <span class="attr">id</span>=<span class="string">&quot;custom-layout&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeValue&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="ref组件实例获取">ref组件实例获取</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>详细说明</button><button type="button" class="tab"><i class="icon"></i>代码示例</button></div><div class="tab-contents"><div class="tab-item-content active"><p><code>ref</code>是一个特殊的属性，它允许在一个<code>DOM</code>元素或子组件实例被挂载后直接获取它的引用，<code>$ref</code>中存储着所有<code>ref</code>绑定的值，通过<code>ref</code>调用后，我们可以直接访问组件实例，并执行相应行为，例如在父组件中控制子组件的函数，<code>ref</code>还有如下特性</p><ul><li><code>ref</code>绑定<code>v-for</code>时，相应引用中包含的是一个数组，但值得注意的是<code>ref</code>并不保证数组顺序相同，故尽量不要使用</li><li>通过子组件的<code>expose</code>选项可以显示声明可以被暴露到父组件的方法或属性，由此确保安全性</li></ul></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件调用ref</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Child</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.$refs.child 是 &lt;Child /&gt; 组件的实例</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件确认暴露对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">expose</span>: [<span class="string">&#x27;publicData&#x27;</span>, <span class="string">&#x27;publicMethod&#x27;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">publicData</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">      <span class="attr">privateData</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">publicMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">privateMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h1>总结</h1><p>本文以选项式<code>api</code>的核心<strong>配置项</strong>为标准详细描述了日常中使用选项式<code>api</code>会遇到的绝大部分场景，其中主要包括三部分内容，分别是基础选项、组件选项、参数传递选项，其中，基础选项中包括<code>el</code>、<code>data()</code>、<code>computed</code>、<code>methods</code>、生命周期钩子、侦听器<code>watch</code>以及混入<code>mixins</code>，组件选项中包括<code>components</code>注册组件，组件透传<code>attribute</code>的特性以及<code>slot</code>插槽对组件化的完善，另外还有通过<code>ref</code>进行组件调用，引入了<code>expose</code>配置项声明暴露的属性。最后的参数传递选项，包括<code>props</code>和<code>emits</code>两个最基本的单向数据传递选项，介绍了组件中的<code>v-model</code>语法糖，此外，还有<code>provide</code>和<code>inject</code>两个选项，完善了组件数据传递的场景</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点总结（五）状态管理</title>
      <link href="/2024/10/22/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%94%EF%BC%89%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2024/10/22/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%94%EF%BC%89%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>该系列文章主要基于官方Vue教程，对Vue使用及特性等方面做一个较为系统的总结</p></div><div class="tip bell"><p>Vue官方文档链接<a href="https://cn.vuejs.org/guide/introduction">Vue.js</a><br>Pinia官方文档链接<a href="https://pinia.vuejs.org/zh/getting-started.html">Pinia</a></p></div><hr><h1>pinia实例创建</h1><p>安装依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line"># 或者使用 npm</span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><p>创建一个<code>pinia</code>实例并将其注入<code>Vue</code>当中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用<code>Vue2</code>时，还需要格外引入一个插件<code>PiniaVuePlugin</code></p><details class="folding-tag" blue><summary> Vue2引入pinia </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia, <span class="title class_">PiniaVuePlugin</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">PiniaVuePlugin</span>)</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// 其他配置...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 请注意，同一个`pinia&#x27;实例</span></span><br><span class="line">  <span class="comment">// 可以在同一个页面的多个 Vue 应用中使用。</span></span><br><span class="line">  pinia,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>              </div>            </details><h1>store数据仓库</h1><h2 id="Store是什么">Store是什么</h2><p><code>Store</code>（数据仓库）是一个保存业务状态和逻辑的实体，它并不存在于组件树中，而是一个独立存在的实体部分。换句话说，它承载着全局状态，存储在<code>store</code>中的数据面向每一个组件，即每一个组件都能够读取它，（就像全局注入<code>provide</code>），但它提供的功能要比注入更加丰富。</p><p><code>Store</code>中有三个概念<code>state</code>、<code>getter</code>和<code>action</code>相当于选项式中的配置项<code>data</code>、<code>computed</code>和<code>methods</code></p><h2 id="Store使用工作流">Store使用工作流</h2><p>在全局将<code>pinia</code>注册为插件后，<code>pinia</code>就像<code>Vue</code>一样全局提供了一些<code>api</code>，使用<code>defineStore()</code>创建一个仓库，代码示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你可以任意命名 `defineStore()` 的返回值，但最好使用 store 的名字，同时以 `use` 开头且以 `Store` 结尾。</span></span><br><span class="line"><span class="comment">// (比如 `useUserStore`，`useCartStore`，`useProductStore`)</span></span><br><span class="line"><span class="comment">// 第一个参数是你的应用中 Store 的唯一 ID。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAlertsStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;alerts&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 其他配置...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>随后在要使用该仓库的组件中导入这个仓库，随后便可以在任意位置访问仓库了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/counter&#x27;</span></span><br><span class="line"><span class="comment">// 可以在组件中的任意位置访问 `store` 变量 ✨</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useCounterStore</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>每个仓库需要一个独一无二的<code>id</code>，可以将其作为第一个参数传入，也可以写作配置项的形式，第二个参数接受两个值，<code>option</code>对象或<code>setup</code>函数</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-wand-magic"></i><p>仓库返回函数命名建议使用<code>useXXXStore</code>的形式，以便产生习惯性的用法</p></div><h2 id="Option-Store">Option Store</h2><p>与<code>Vue</code>的选项式<code>api</code>类似，我们可以传入一个带有<code>state</code>、<code>getter</code>和<code>action</code>的<code>Option</code>对象，代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span> &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种方式与<code>Vuex</code>非常相似，适合做仓库间的迁移，同时<code>option api</code>也更加简单直观</p><h2 id="Setup-Store">Setup Store</h2><p><code>Store</code>中也支持使用<code>setup</code>创建组合式<code>api</code>的形式，使用这种方式需要传入一个函数，并返回一个我们想暴露的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; count, doubleCount, increment &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>ref()</code>就是<code>state</code>属性（<code>state</code>自带响应式，一般情况下都需要响应式数据）</li></ul></blockquote><ul><li><code>computed()</code>就是 <code>getter</code></li><li><code>function</code>就是<code>actions</code></li></ul><div class="note info flat"><p>在仓库中也可以使用全局提供的属性，比如用<code>useRoute()</code>调取页面路由，用<code>infect</code>获取注入的数据</p></div><h2 id="storeToRefs">storeToRefs</h2><p>可以直接对仓库中的数据进行解构，但一旦解构后数据就会失去响应性，故需要使用<code>storeToRefs()</code>为其赋予响应性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useCounterStore</span>()</span><br><span class="line"><span class="comment">// `name` 和 `doubleCount` 是响应式的 ref</span></span><br><span class="line"><span class="comment">// 同时通过插件添加的属性也会被提取为 ref</span></span><br><span class="line"><span class="comment">// 并且会跳过所有的 action 或非响应式 (不是 ref 或 reactive) 的属性</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, doubleCount &#125; = <span class="title function_">storeToRefs</span>(store)</span><br><span class="line"><span class="comment">// 作为 action 的 increment 可以直接解构</span></span><br><span class="line"><span class="keyword">const</span> &#123; increment &#125; = store</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1>store配置项</h1><h2 id="仓库ID">仓库ID</h2><p>不要忘记每个仓库的必备标识符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 其他配置项...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="State">State</h2><p><code>state</code>是每个仓库的核心，在<code>state</code>中预定义能代表整个仓库的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;storeId&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 为了完整类型推理，推荐使用箭头函数</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 所有这些属性都将自动推断出它们的类型</span></span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span>,</span><br><span class="line">      <span class="attr">isAdmin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">items</span>: [],</span><br><span class="line">      <span class="attr">hasChanged</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="getter">getter</h2><p><code>getter</code>用于存储计算属性的状态，往往依赖于<code>state</code>中的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他配置项...</span></span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><div class="note warning flat"><p><code>store</code>中的<code>this</code>指针指向整个<code>store</code>实例，故可以通过<code>this</code>来访问仓库中的其他数据</p></div><h2 id="actions">actions</h2><p>相当于仓库中的方法</p><div class="note info flat"><p><code>pinia</code>中的<code>actions</code>中定义的方法可以自然处理异步函数</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他配置项...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1>辅助函数</h1><p><code>pinia</code>中还提供了一系列的辅助函数用来帮你完成一些任务</p><h2 id="mapState">mapState</h2><p><code>mapState</code>是用于映射仓库状态(<code>state</code>)的方法，使得组件能够直接访问仓库的状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/counter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = <span class="title function_">useCounterStore</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 mapState 映射状态</span></span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="title function_">mapState</span>(counterStore, [<span class="string">&#x27;count&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; count &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="mapGetter">mapGetter</h2><p><code>mapGetter</code>用于映射计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/counter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = <span class="title function_">useCounterStore</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 mapGetters 映射计算属性</span></span><br><span class="line">    <span class="keyword">const</span> &#123; doubleCount &#125; = <span class="title function_">mapGetters</span>(counterStore, [<span class="string">&#x27;doubleCount&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; doubleCount &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="mapActions">mapActions</h2><p>同理，<code>mapActions</code>用于映射方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/counter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = <span class="title function_">useCounterStore</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 mapActions 映射动作</span></span><br><span class="line">    <span class="keyword">const</span> &#123; increment &#125; = <span class="title function_">mapActions</span>(counterStore, [<span class="string">&#x27;increment&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; increment &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点总结（四）路由实例</title>
      <link href="/2024/10/22/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B7%AF%E7%94%B1%E5%AE%9E%E4%BE%8B/"/>
      <url>/2024/10/22/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B7%AF%E7%94%B1%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>该系列文章主要基于官方Vue教程，对Vue使用及特性等方面做一个较为系统的总结</p></div><div class="tip bell"><p>Vue官方文档链接<a href="https://cn.vuejs.org/guide/introduction">Vue.js</a><br>VueRouter官方文档链接<a href="https://router.vuejs.org/zh/introduction.html">VueRouter</a></p></div><hr><h1>路由实例创建</h1><p>一般使用脚手架工具创建<code>vue</code>实例的同时都会同步导入<code>VueRouter</code>的<code>npm</code>安装，如果需要单独导入，可使用<code>npm</code>导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><p>这里同样提供<code>CDN</code>链接：<code>https://unpkg.com/vue-router@4.0.15/dist/vue-router.global.js</code></p><div class="note warning flat"><p><code>VueRouter</code>中<code>router4</code>对应<code>Vue3</code>，<code>router3</code>对应<code>Vue2</code>,故引包时需要格外看清<code>VueRouter</code>的版本，@后跟随的就是版本号</p></div><h2 id="在Vue中创建路由实例-router">在Vue中创建路由实例(router)</h2><p>接下来分别讲一下在<code>Vue2</code>和<code>Vue3</code>中创建路由实例的方法</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>Vue3</button><button type="button" class="tab"><i class="icon"></i>完整代码示例</button><button type="button" class="tab"><i class="icon"></i>Vue2</button></div><div class="tab-contents"><div class="tab-item-content active"><p>在<code>Vue3</code>中使用<code>createRouter api</code>进行路由实例创建</p><blockquote><ol><li>引包：npm install vue-router@4</li></ol></blockquote><ol start="2"><li>引入：import {createRouter ，createMemoryHistory}  from ‘vue-router’</li><li>安装注册并挂载：createAPP(App).use(router).mount(‘#app’)</li><li>创建路由对象：const router = createRoute（{<br>history：createMemoryHistory<br>routes<br>}）</li></ol></div><div class="tab-item-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMemoryHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;./HomeView.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AboutView</span> <span class="keyword">from</span> <span class="string">&#x27;./AboutView.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeView</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutView</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createMemoryHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册插件并挂载</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">  .<span class="title function_">use</span>(router)</span><br><span class="line">  .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p><code>Vue2</code>中多了一步注入的步骤</p><blockquote><ol><li>引包：npm install vue-router@3.6.5(Vue2 为3.x Vue3为4.x)</li></ol></blockquote><ol start="2"><li>引入：import VueRouter from ‘vue-router’</li><li>安装注册：Vue.use(VueRouter)</li><li>创建路由对象： const router = new VueRouter（{ routes }）</li><li>注入：new Vue({<br>render: h=&gt;h(app)<br>router<br>}).$mount(‘#app’)</li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note info flat"><p>这里在介绍下用<code>use()</code>注册为路由插件后实际上干了啥，首先是引入了<code>RouterView</code>和<code>RouterLink</code>两个组件，用于基本跳转，以及在选项式<code>api</code>中加入了<code>$router</code>和<code>$route</code>实例，在组合式<code>api</code>中加入了<code>useRouter()</code>和<code>useRoute()</code>函数，最后在使用<code>mount()</code>将其挂载到<code>Vue</code>当中去</p></div><h2 id="路由规则创建-router配置项">路由规则创建(router配置项)</h2><p>上述小节讲述了如何在<code>Vue</code>中创建路由，这一小节讲讲如何创建匹配规则</p><p>可以看到在创建的<code>router</code>中是可以添加配置项的，配置项以对象的形式添加</p><h3 id="routes">routes</h3><p><code>routes</code>是路由的核心配置项，添加了路由导航的详细信息，<code>routes</code>配置项是一个数组，每一个路由页面由一个对象组成，可以使用<code>children</code>配置嵌套路由<br><code>routes</code>配置项一览：</p><blockquote><ul><li><code>path</code>:定义路由路径</li></ul></blockquote><ul><li><code>component</code>:路由对应的组件</li><li><code>name</code>:用来命名路由,传入名字对象添加参数属性来替代路径以做到命名路由</li><li><code>redirect</code>:自定义重定向路径</li><li><code>alias</code>:路由别名,路由别名定义的路径等同于<code>path</code>中的路径</li><li><code>children</code>:定义嵌套路由，规则等同于顶级路由</li><li><code>meta</code>:路由元信息，用以将格外信息如标题等附加到路由上</li></ul><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>, </span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">HomePage</span>, </span><br><span class="line">  <span class="attr">alias</span>: [<span class="string">&#x27;/start&#x27;</span>, <span class="string">&#x27;/begin&#x27;</span>], </span><br><span class="line">  <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;  <span class="comment">// 只有经过身份验证的用户才能创建帖子</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在<code>Vue2</code>中可以使用<code>this.$route</code>实例成员获取当前页面的路由信息，在<code>Vue3</code>中使用<code>useRoute()</code>函数获取路由信息</p><div class="note warning flat"><p>在最后配置<code>path: &quot;*&quot;</code>用来匹配<code>404</code>页面</p></div><h3 id="activeLinks">activeLinks</h3><p>通过配置<code>linkActiveClass</code>和<code>linkExactActveClass</code>配置项来修改对应导航激活时的类名</p><h3 id="history模式">history模式</h3><p><code>history</code>配置项允许我们在不同的历史模式中进行选择</p><blockquote><ol><li><code>hash</code>模式：在具体路径前添加一个<code>#</code>，可以会对<code>SEO</code>造成一定影响，配置<code>createWebHashHistory()</code></li></ol></blockquote><ol start="2"><li><code>Memory</code>模式：适合<code>node</code>环境和<code>SSR</code>，使用<code>createMemoryHistory()</code>创建</li><li><code>Html5</code>模式：最&quot;正常&quot;的模式，配置<code>createWebHistory()</code>创建</li></ol><h3 id="路由懒加载">路由懒加载</h3><p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。</p><p>具体的做法是将组件的静态导入改为动态导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserDetails</span> <span class="keyword">from</span> <span class="string">&#x27;./views/UserDetails.vue&#x27;</span></span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserDetails</span> &#125;</span><br><span class="line">    <span class="comment">// 或在路由定义里直接使用它</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>) &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>路由匹配</h1><p>在完成了路由的创建以及配置后，下一步就是如何在具体的页面中使用路由进行跳转，路由跳转的本质是往浏览器的历史记录中添加历史，然后通过在路由中<code>push</code>完成跳转操作，本节将围绕<code>push()</code>、<code>&lt;router-link&gt;</code>以及<code>&lt;router-view&gt;</code>展开</p><div class="note info flat"><p><code>push()</code>是向浏览历史中添加一条记录，还有一种不添加记录的方式，就是<code>replace()</code>方法，方法如其名，直接替换，不添加历史</p></div><h2 id="路由出入口配置-RouterLink、RouterView">路由出入口配置(RouterLink、RouterView)</h2><p>在<code>VueRouter</code>中使用<code>RouterLink</code>替代<code>html</code>中的<code>&lt;a&gt;</code>,从而更好地兼容<code>SPA</code>单页应用</p><div class="note primary flat"><p>在最初使用<code>use()</code>注册路由之后，<code>RouterLink</code>和<code>RouterView</code>两个组件就相当于被全局注册了</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-wand-magic"></i><p>在<code>Vue</code>模板中使用<code>RouterLink</code>大驼峰命名法和<code>router-link</code>短横杠命名法都是被允许的，但是在<code>html</code>的<code>DOM</code>中则只能使用短横杠命名法(大驼峰是<code>Vue3</code>后引入的规范，故对于早期版本也有可能会报错)</p></div><p>使用<code>&lt;router-link&gt;</code>设置跳转规则使用<code>&lt;router-view&gt;</code>定位路由出口，即跳转后页面的显示位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;url&quot;</span>&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>配置路由出口:<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p><h2 id="路由匹配规则">路由匹配规则</h2><p>路由<code>router</code>使用<code>push()</code>进行跳转，<code>push()</code>被注册到路由实例中，<code>Vue2</code>使用<code>this.$router</code>访问，<code>Vue3</code>中使用<code>useRouter()</code>访问</p><div class="note warning flat"><p>下文中都将使用<code>this.$router</code>和<code>this.$route</code>进行演示，这和那两个函数方法作用上是完全一致的</p></div><h3 id="动态路由匹配">动态路由匹配</h3><p>在路由中可以配置动态<strong>路径参数</strong>将具有相同模式的路由进行分组，从而将具有相同规则的<code>url</code>映射到同一个路由<br>路径参数为<code>:</code><br>在使用<code>&lt;router-link&gt;</code>进行路由跳转时，可以根据路径参数精确匹配</p><blockquote><p>语法：</p></blockquote><ul><li>配置路由：<code>/path/:参数名</code></li><li>跳转：<code>to=&quot;/path/:id&quot;</code></li><li>获取：<code>this.$route.params</code></li></ul><h3 id="查询参数匹配">查询参数匹配</h3><p>使用查询参数可以为路由添加格外信息，相当于参数附加在基础路径上</p><blockquote><p>语法：</p></blockquote><ul><li>跳转：<code>to=&quot;/url/?参数名1=值&amp;参数名2=值&quot;</code></li><li>获取：<code>this.$route.query.参数名</code></li></ul><h3 id="其他匹配方式">其他匹配方式</h3><p>在使用路由时还有别的路由匹配的方法，比如可以使用正则式定义匹配或者使用<code>hash</code>进行锚点匹配</p><p><code>this.$route</code>实例中提供了<code>params</code>表示路径参数，<code>query</code>表示查询规则，<code>hash</code>表示<code>hash</code>值</p><p>在路由跳转时也可以以用这些参数，以便更精确定位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;NotFound&#x27;</span>,</span><br><span class="line">  <span class="comment">// 保留当前路径并删除第一个字符，以避免目标 URL 以 `//` 开头。</span></span><br><span class="line">  <span class="attr">params</span>: &#123; <span class="attr">pathMatch</span>: <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span>.<span class="title function_">substring</span>(<span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>) &#125;,</span><br><span class="line">  <span class="comment">// 保留现有的查询和 hash 值，如果有的话</span></span><br><span class="line">  <span class="attr">query</span>: route.<span class="property">query</span>,</span><br><span class="line">  <span class="attr">hash</span>: route.<span class="property">hash</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="router-link属性">router-link属性</h2><p><code>&lt;router-link&gt;</code>组件中还可以添加一些属性，比如<code>to</code>就是配置跳转路径，其余一些属性还可以配置其他内容</p><blockquote><ol><li><code>exact</code>:配置精确匹配，在<code>&lt;router-link&gt;</code>中添加<code>exact</code>后只有当路由精确匹配路径时才会是激活状态</li></ol></blockquote><ol start="2"><li><code>router-link-active</code>:模糊匹配状态下，对应导航激活时的默认样式类名</li><li><code>router-link-exact-active</code>：精确匹配状态下，对应导航激活时的默认样式类名</li></ol><p>在<code>router</code>中可添加配置项<code>linkActiveClass</code>和<code>linkExactActiveClass</code>可以手动配置激活状态下的类名</p><h1>路由守卫</h1><p>路由守卫，用于在路由跳转的时候添加某些副作用，根据触发时机可以分为前置守卫或后置守卫，根据守卫范围可分为全局守卫或局部守卫</p><h2 id="全局前置守卫">全局前置守卫</h2><p>可以使用<code>router.beforeEach()</code>创建一个全局前置守卫<br>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 返回 false 以取消导航</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>参数：</p></blockquote><ul><li><code>to</code>：表示即将进入的目标</li><li><code>from</code>：表示离开的对象<br>返回值：</li><li><code>false</code>: 表示取消该次跳转</li><li><code>&#123;name:'routername'&#125;</code>:表示重定向到目标路由</li><li><code>none</code>:没有返回值表示路由是有效的</li></ul><h2 id="全局后置钩子">全局后置钩子</h2><p>不同于前置守卫，后置钩子并不会改变导航本身，它们主要的用途是更改页面标题，分析页面信息等辅助功能<br>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 表达式 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由独享守卫">路由独享守卫</h2><p>在具体路由配置项(<code>routes</code>)中定义<code>beforeEnter</code>配置项</p><p>该守卫只在进入该路由时触发，不会在<code>params</code>、<code>query</code>、<code>hash</code>改变时触发，即只有跨越配置项时触发<br>定义语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reject the navigation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><div class="note info flat"><p>在嵌套路由中，如果路由独享守卫被定义在父级路由中，则子级路由间的跳转不会触发路由独享守卫</p></div><h2 id="组件内路由守卫">组件内路由守卫</h2><p>可在具体组件内部定义组件内守卫，<code>router</code>提供了三个组件内守卫的<code>api</code>,分别是：</p><blockquote><ul><li><code>beforeRouteEnter</code>:在渲染组件前调用</li></ul></blockquote><ul><li><code>beforeRouteUpdate</code>:组件动态参数改变时调用</li><li><code>beforeRouteLeave</code>:离开组件渲染时调用</li></ul><p>在组合式<code>api</code>中提供了<code>onBeforeRouteUpdate()</code>和<code>onBeforeRouteLeave()</code>分别添加<code>update</code>和<code>leave</code>守卫</p><h2 id="路由守卫触发流程">路由守卫触发流程</h2><blockquote><ol><li>导航触发</li></ol></blockquote><ol start="2"><li>离开的组件触发<code>beforeRouteLeave</code></li><li>全局<code>beforeEach</code>守卫</li><li>重用组件的<code>beforeRouteUpdate</code></li><li>独享配置项中的<code>beforeEnter</code></li><li>解析异步路由组件</li><li>进入的组件触发<code>beforeRouteEnter</code></li><li>导航确认</li><li>全局<code>afterEach</code>钩子</li><li>触发<code>DOM</code>更新</li></ol><div class="note warning flat"><p>不要在路由守卫中修改具体组件的<code>DOM</code>，如果要做全局性判断，则在外层进行修改，否则在对应组件的生命周期内进行修改，任何路由守卫都不支持或者不建议直接操作导航对象的<code>DOM</code></p></div>]]></content>
      
      
      
        <tags>
            
            <tag> Vue 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly导航栏魔改</title>
      <link href="/2024/10/22/butterfly%E5%AF%BC%E8%88%AA%E6%A0%8F%E9%AD%94%E6%94%B9/"/>
      <url>/2024/10/22/butterfly%E5%AF%BC%E8%88%AA%E6%A0%8F%E9%AD%94%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>导航栏样式主要参考Fomalhaut的博客，魔改教程主要参考安知鱼的文章</p></div><div class="note warning flat"><p>本篇文章记述<code>butterfly</code>导航栏的魔改过程,基于<code>butterfly v5.0.0</code>,主要解决了由于<code>butterfly</code>升级造成的新的兼容性问题<s>新版本升级后不仅动了很多地方的代码，甚至连文件结构都有变化</s>,改着改着发现很多地方代码结构都变了，所以很多地方直接动了核心逻辑<s>造屎山</s>，所以文中有大量修改主题文件的代码，参考需谨慎。</p></div><h1>前言</h1><details class="folding-tag" blue><summary> 写在最前 </summary>              <div class='content'>              <blockquote><p>虽然有已经有很多大佬对导航栏的魔改出过了不少教程，但随着<code>butterfly</code>版本的更新，博客代码结构部分会有许多不一样的改动，使得魔改人们不能愉快地复刻某些好看的样式<s>不能愉快地cv了</s>~，于是，便想着写篇文章来记述自己的魔改经历，毕竟有句话说得好，代码写完两个月，之后就只有你的电脑知道你写的是什么了，所以趁还记得就趁早记录，方便后续回顾。</p></blockquote>              </div>            </details><details class="folding-tag" blue><summary> 参考教程 </summary>              <div class='content'>              <table><thead><tr><th style="text-align:center">作者</th><th style="text-align:center">教程原帖</th></tr></thead><tbody><tr><td style="text-align:center">安知鱼</td><td style="text-align:center"><a href="https://blog.anheyu.com/posts/8e53.html">butterfly导航栏修改方案</a></td></tr><tr><td style="text-align:center">Fomalhaut</td><td style="text-align:center"><a href="https://www.fomal.cc/posts/d1927166.html">博客魔改教程(五)</a></td></tr></tbody></table>              </div>            </details><h1>功能点一览</h1><details class="folding-tag" cyan open><summary> 基于原生butterfly主题，做了如下功能点改动: </summary>              <div class='content'>              <blockquote><p>导航栏状态：</p></blockquote><ol><li>鼠标滚轮下滑时，显示导航栏列表</li><li>鼠标滚轮上滑时，根据页面显示不同内容，主页显示预设内容，文章页显示文章标题</li><li>滚动到文章顶部时，使导航栏与背景融合</li></ol><blockquote><p>导航栏样式：</p></blockquote><ol><li>将导航栏位置移动至中心，将子栏变为横向显示</li><li>添加过渡效果，为变化添加一定动画效果</li></ol><blockquote><p>行为逻辑：</p></blockquote><ol><li>点击主页图标回到主页</li><li>显示文章标题时，点击回到文章顶部</li></ol>              </div>            </details><h1>导航栏横向居中</h1><p>在<code>/source/css/</code>中添加文件<code>nav_menu.css</code>，将下列代码复制进文件中，并在主题文件中注入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 导航栏魔改 */</span></span><br><span class="line"><span class="comment">/* 一级菜单居中 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: max-content <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* transform: translate(-50%) !important; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 子菜单横向展示 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.menus_item_child</span> &#123; </span><br><span class="line">  <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */</span></span><br><span class="line"><span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">135px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">38px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">23px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>导航栏结构修改</h1><p>修改<code>/themes/butterfly/layout/includes/header</code>,修改下列代码</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">nav#nav</span><br><span class="line">  span#blog-info</span><br><span class="line">    a.nav-site-title(href=url_for(&#x27;/&#x27;))</span><br><span class="line">      if theme.nav.logo</span><br><span class="line">        img.site-icon(src=url_for(theme.nav.logo) alt=&#x27;Logo&#x27;)</span><br><span class="line">      if theme.nav.display_title</span><br><span class="line"><span class="addition">+        span,green i.fa-solid.fa-house  //首页鼠标悬浮时home图标  </span></span><br><span class="line">        span.site-name=config.title</span><br><span class="line">    if is_post()</span><br><span class="line">      a.nav-page-title(href=url_for(&#x27;/&#x27;))</span><br><span class="line">        span.site-name=(page.title || config.title)</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+ //鼠标下滑时的文章标题显示</span></span><br><span class="line"><span class="addition">+  div.mask-name-container</span></span><br><span class="line"><span class="addition">+    center(id=&quot;name-container&quot;)</span></span><br><span class="line"><span class="addition">+      a(id=&quot;page-name&quot; href=&quot;javascript:btf.scrollToDest(0, 500)&quot;) PAGE_NAME</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">  #menus</span><br><span class="line">    if theme.search.use</span><br><span class="line">      #search-button</span><br><span class="line">        span.site-page.social-icon.search</span><br><span class="line">          i.fas.fa-search.fa-fw</span><br><span class="line">          span= &#x27; &#x27; + _p(&#x27;search.title&#x27;)</span><br><span class="line">    if theme.menu</span><br><span class="line">      != partial(&#x27;includes/header/menu_item&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">      #toggle-menu</span><br><span class="line">        span.site-page</span><br><span class="line">          i.fas.fa-bars.fa-fw </span><br></pre></td></tr></table></figure><p>修改<code>/themes/butterfly/layout/includes/header/menu_item.pug</code>,直接替换为如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">if theme.menu</span><br><span class="line">  .menus_items</span><br><span class="line">    each value, label in theme.menu</span><br><span class="line">      if typeof value !== &#x27;object&#x27;</span><br><span class="line">        .menus_item</span><br><span class="line">          - const valueArray = value.split(&#x27;||&#x27;)</span><br><span class="line">          a.site-page.faa-parent.animated-hover(href=url_for(trim(value.split(&#x27;||&#x27;)[0])))</span><br><span class="line">            if valueArray[1]</span><br><span class="line">              i.fa-fw(class=trim(valueArray[1]))</span><br><span class="line">              - var icon_value = trim(value.split(&#x27;||&#x27;)[1])</span><br><span class="line">              - var anima_value = value.split(&#x27;||&#x27;)[2] ? trim(value.split(&#x27;||&#x27;)[2]) : &#x27;faa-tada&#x27;</span><br><span class="line">              if icon_value.substring(0,2)==&quot;fa&quot;      </span><br><span class="line">                i.fa-fw(class=icon_value + &#x27; &#x27; + anima_value)</span><br><span class="line">              else if icon_value.substring(0,4)==&quot;icon&quot;          </span><br><span class="line">                svg.icon(aria-hidden=&quot;true&quot; class=anima_value)</span><br><span class="line">                  use(xlink:href=`#`+ icon_value)</span><br><span class="line">            span=&#x27; &#x27;+label</span><br><span class="line">      else</span><br><span class="line">        .menus_item</span><br><span class="line">          - const labelArray = label.split(&#x27;||&#x27;)</span><br><span class="line">          - const hideClass = labelArray[3] &amp;&amp; trim(labelArray[3]) === &#x27;hide&#x27; ? &#x27;hide&#x27; : &#x27;&#x27;</span><br><span class="line">          a.site-page.group.faa-parent.animated-hover(class=`$&#123;hideClass&#125;` href=&#x27;javascript:void(0);&#x27;)</span><br><span class="line">            if labelArray[1]</span><br><span class="line">              - var icon_label = trim(label.split(&#x27;||&#x27;)[1])</span><br><span class="line">              - var anima_label = label.split(&#x27;||&#x27;)[2] ? trim(label.split(&#x27;||&#x27;)[2]) : &#x27;faa-tada&#x27;</span><br><span class="line">              if icon_label.substring(0,2)==&quot;fa&quot;      </span><br><span class="line">                i.fa-fw(class=icon_label + &#x27; &#x27; + anima_label)</span><br><span class="line">              else if icon_label.substring(0,4)==&quot;icon&quot;    </span><br><span class="line">                svg.icon(aria-hidden=&quot;true&quot; class=anima_label)</span><br><span class="line">                  use(xlink:href=`#`+ icon_label)</span><br><span class="line">            span=&#x27; &#x27;+ trim(labelArray[0])</span><br><span class="line">            i.fas.fa-chevron-down</span><br><span class="line">          ul.menus_item_child</span><br><span class="line">            each val,lab in value </span><br><span class="line">              - const valArray = val.split(&#x27;||&#x27;)</span><br><span class="line">              li</span><br><span class="line">                a.site-page.child.faa-parent.animated-hover(href=url_for(trim(val.split(&#x27;||&#x27;)[0])))</span><br><span class="line">                  if valArray[1]</span><br><span class="line">                    - var icon_val = trim(val.split(&#x27;||&#x27;)[1])</span><br><span class="line">                    - var anima_val = val.split(&#x27;||&#x27;)[2] ? trim(val.split(&#x27;||&#x27;)[2]) : &#x27;faa-tada&#x27;</span><br><span class="line">                    if icon_val.substring(0,2)==&quot;fa&quot;      </span><br><span class="line">                      i.fa-fw(class=icon_val + &#x27; &#x27; + anima_val)</span><br><span class="line">                    else if icon_val.substring(0,4)==&quot;icon&quot;</span><br><span class="line">                      svg.icon(aria-hidden=&quot;true&quot; class=anima_val)</span><br><span class="line">                        use(xlink:href=`#`+ icon_val)                    </span><br><span class="line">                  span=&#x27; &#x27;+ lab</span><br></pre></td></tr></table></figure><h1>导航栏触发逻辑修改</h1><p>修改<code>/themes/butterfly/layout/includes/header/index.pug</code>,主要修改不同情况下的状态，主要通过类的增减</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-</span></span><br><span class="line">  const returnTopImg = img =&gt; img !== false ? img || theme.default_top_img : false</span><br><span class="line">  const isFixedClass = theme.nav.fixed ? &#x27; fixed&#x27; : &#x27;&#x27;</span><br><span class="line">  var top_img = false</span><br><span class="line">  let headerClassName = &#x27;not-top-img&#x27;</span><br><span class="line"><span class="deletion">-  //- let headerClassName = &#x27;full-page&#x27;</span></span><br><span class="line">  var bg_img = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">if !theme.disable_top_img &amp;&amp; page.top_img !== false</span><br><span class="line">  if is_post()</span><br><span class="line">    - top_img = page.top_img || page.cover || theme.default_top_img</span><br><span class="line">  else if is_page()</span><br><span class="line">    - top_img = page.top_img || theme.default_top_img</span><br><span class="line">  else if is_tag()</span><br><span class="line">    - top_img = theme.tag_per_img &amp;&amp; theme.tag_per_img[page.tag]</span><br><span class="line">    - top_img = top_img || returnTopImg(theme.tag_img)</span><br><span class="line">  else if is_category()</span><br><span class="line">    - top_img = theme.category_per_img &amp;&amp; theme.category_per_img[page.category]</span><br><span class="line">    - top_img = top_img || returnTopImg(theme.category_img)</span><br><span class="line">  else if is_home()</span><br><span class="line">    - top_img = returnTopImg(theme.index_img)</span><br><span class="line">  else if is_archive()</span><br><span class="line">    - top_img = returnTopImg(theme.archive_img)</span><br><span class="line">  else</span><br><span class="line">    - top_img = page.top_img || theme.default_top_img</span><br><span class="line"></span><br><span class="line">  if top_img !== false</span><br><span class="line">    - bg_img = getBgPath(top_img)</span><br><span class="line">    - headerClassName = is_home() ? &#x27;full_page&#x27; : is_post() ? &#x27;post-bg&#x27; : &#x27;not-home-page&#x27;</span><br><span class="line"><span class="deletion">-    //- - headerClassName = is_home() ? &#x27;full_page&#x27; : is_post() ? &#x27;post-bg&#x27; : &#x27;full_page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+header#page-header(class=`$&#123;headerClassName + isFixedClass&#125; nav-visible` style=bg_img)</span></span><br><span class="line">  include ./nav.pug</span><br><span class="line">  if top_img !== false</span><br><span class="line">    if is_post()</span><br><span class="line">      include ./post-info.pug</span><br><span class="line">      section.main-hero-waves-area.waves-area</span><br><span class="line">        svg.waves-svg(xmlns=&#x27;http://www.w3.org/2000/svg&#x27;, xlink=&#x27;http://www.w3.org/1999/xlink&#x27;, viewBox=&#x27;0 24 150 28&#x27;, preserveAspectRatio=&#x27;none&#x27;, shape-rendering=&#x27;auto&#x27;)</span><br><span class="line">          defs</span><br><span class="line">            path#gentle-wave(d=&#x27;M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z&#x27;)</span><br><span class="line">          g.parallax</span><br><span class="line">            use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;0&#x27;)</span><br><span class="line">            use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;3&#x27;)</span><br><span class="line">            use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;5&#x27;)</span><br><span class="line">            use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;7&#x27;)</span><br><span class="line">    else if is_home()</span><br><span class="line">      #site-info</span><br><span class="line">        h1#site-title=config.title</span><br><span class="line">        if theme.subtitle.enable</span><br><span class="line">          - var loadSubJs = true</span><br><span class="line">          #site-subtitle</span><br><span class="line">            span#subtitle</span><br><span class="line">        if theme.social</span><br><span class="line">          #site_social_icons</span><br><span class="line">            !=partial(&#x27;includes/header/social&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">      #scroll-down</span><br><span class="line">        i.fas.fa-angle-down.scroll-down-effects</span><br><span class="line">    else</span><br><span class="line">      #page-site-info</span><br><span class="line">        h1#site-title=page.title || page.tag || page.category</span><br><span class="line">  else</span><br><span class="line">    //- improvement seo</span><br><span class="line">    if !is_post()</span><br><span class="line">      h1.title-seo=page.title || page.tag || page.category || config.title</span><br></pre></td></tr></table></figure><p>修改<code>/themes/butterfly/source/js/main.js</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  const scrollTask = btf.throttle(() =&gt; &#123;</span><br><span class="line">      const currentTop = window.scrollY || document.documentElement.scrollTop</span><br><span class="line">      const isDown = scrollDirection(currentTop)</span><br><span class="line">      if (currentTop &gt; 56) &#123;</span><br><span class="line">        if (flag <span class="comment">=== &#x27;&#x27;) &#123;</span></span><br><span class="line">          $header.classList.add(&#x27;nav-fixed&#x27;)</span><br><span class="line"><span class="deletion">-          // $header.classList.add(&#x27;nav-visible&#x27;)</span></span><br><span class="line">          $rightside.classList.add(&#x27;rightside-show&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (isDown) &#123;</span><br><span class="line">          if (flag !== &#x27;down&#x27;) &#123;</span><br><span class="line">            $header.classList.remove(&#x27;nav-visible&#x27;)</span><br><span class="line">            isChatBtn &amp;&amp; window.chatBtn.hide()</span><br><span class="line">            flag = &#x27;down&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          if (flag !== &#x27;up&#x27;) &#123;</span><br><span class="line">            $header.classList.add(&#x27;nav-visible&#x27;)</span><br><span class="line">            isChatBtn &amp;&amp; window.chatBtn.show()</span><br><span class="line">            flag = &#x27;up&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        flag = &#x27;&#x27;</span><br><span class="line">        if (currentTop <span class="comment">=== 0) &#123;</span></span><br><span class="line"><span class="addition">+          $header.classList.remove(&#x27;nav-fixed&#x27;)</span></span><br><span class="line"><span class="addition">+          $header.classList.add(&#x27;nav-visible&#x27;)</span></span><br><span class="line">        &#125;</span><br><span class="line">        $rightside.classList.remove(&#x27;rightside-show&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isShowPercent &amp;&amp; rightsideScrollPercent(currentTop)</span><br><span class="line">      checkDocumentHeight()</span><br><span class="line">    &#125;, 300)</span><br><span class="line"></span><br><span class="line">    btf.addEventListenerPjax(window, &#x27;scroll&#x27;, scrollTask, &#123; passive: true &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1>样式修改</h1><div class="note primary flat"><p>导航栏修改的大头，改动太多了，直接看代码吧</p></div><p>修改<code>/themes/butterfly/source/css/_layout/head.styl</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line">#post-info</span><br><span class="line"></span><br><span class="line"> &amp;.not-top-img</span><br><span class="line">   margin-bottom: 10px</span><br><span class="line">   height: 60px</span><br><span class="line">   background: 0</span><br><span class="line"></span><br><span class="line">   .title-seo</span><br><span class="line">     display: none</span><br><span class="line"></span><br><span class="line">   #nav</span><br><span class="line">     background: rgba(255, 255, 255, .4)</span><br><span class="line">     box-shadow: 0 5px 6px -5px rgba(133, 133, 133, .6)</span><br><span class="line"></span><br><span class="line">     a,</span><br><span class="line">     span.site-page,</span><br><span class="line">     .site-name</span><br><span class="line">       color: var(--font-color)</span><br><span class="line">       text-shadow: none</span><br><span class="line"></span><br><span class="line"> &amp;.nav-fixed</span><br><span class="line">   #nav</span><br><span class="line">     position: fixed</span><br><span class="line">     top: -60px</span><br><span class="line">     z-index: 91</span><br><span class="line">     background: rgba(255, 255, 255, .8)</span><br><span class="line">     box-shadow: 0 5px 6px -5px alpha($grey, .6)</span><br><span class="line">     transition: transform .2s ease-in-out, opacity .2s ease-in-out</span><br><span class="line">     will-change: transform</span><br><span class="line"></span><br><span class="line">     #blog-info</span><br><span class="line">       display: flex</span><br><span class="line">       color: var(--font-color)</span><br><span class="line">       // display: block</span><br><span class="line">       &amp;:hover</span><br><span class="line">         color: $light-blue</span><br><span class="line">     </span><br><span class="line">     .nav-site-title</span><br><span class="line">       display: flex</span><br><span class="line">       justify-content: center</span><br><span class="line">       align-items: center</span><br><span class="line">       border-radius: 15px</span><br><span class="line">       padding: 0 4px</span><br><span class="line">       transition: all .3s </span><br><span class="line">       transform: translate(5px)</span><br><span class="line">       i</span><br><span class="line">         position: absolute</span><br><span class="line">         opacity: 0</span><br><span class="line">         transform: scale(1.35)</span><br><span class="line">         transition: all .3s ease</span><br><span class="line"></span><br><span class="line">       &amp;:hover</span><br><span class="line">         background: $light-blue</span><br><span class="line">         box-shadow:0 0 2px $light-blue</span><br><span class="line">         transform: translate(5px) scale(1.03)</span><br><span class="line"></span><br><span class="line">       &amp;:hover .site-name</span><br><span class="line">         opacity: 0</span><br><span class="line">         color: var(--font-color)</span><br><span class="line"></span><br><span class="line">       &amp;:hover i </span><br><span class="line">         opacity: 1</span><br><span class="line">         transform: scale(1.01)</span><br><span class="line">         color: white</span><br><span class="line"></span><br><span class="line">       .site-name</span><br><span class="line">         text-shadow: none</span><br><span class="line">         font-size: .9em</span><br><span class="line">         // transition: all .3s ease-in-out</span><br><span class="line"></span><br><span class="line">       &amp; &gt; a:first-child</span><br><span class="line">         display: none</span><br><span class="line"></span><br><span class="line">       &amp; &gt; a:last-child</span><br><span class="line">         display: inline</span><br><span class="line"></span><br><span class="line">     a,</span><br><span class="line">     span.site-page,</span><br><span class="line">     #toggle-menu</span><br><span class="line">       color: var(--font-color)</span><br><span class="line">       text-shadow: none</span><br><span class="line"></span><br><span class="line">       &amp;:hover</span><br><span class="line">         color: $light-blue</span><br><span class="line"></span><br><span class="line">   &amp;.fixed</span><br><span class="line">     #nav</span><br><span class="line">       top: 0</span><br><span class="line">       transition: all .5s</span><br><span class="line"> // &amp;.nav-visible:not(.fixed)</span><br><span class="line"> // &amp;.nav-visible</span><br><span class="line"> //   #nav</span><br><span class="line"> //     transition: all .5s</span><br><span class="line"> //     transform: translate3d(0, -100%, 0)</span><br><span class="line"></span><br><span class="line"> //   &amp; + .layout</span><br><span class="line"> //     &amp; &gt; .aside-content &gt; .sticky_layout</span><br><span class="line"> //       top: 70px</span><br><span class="line"> //       transition: top .5s</span><br><span class="line"></span><br><span class="line"> &amp;.fixed</span><br><span class="line">   #nav</span><br><span class="line">     position: fixed</span><br><span class="line">     #blog-info</span><br><span class="line">       display: flex</span><br><span class="line">       color: var(--font-color)</span><br><span class="line">       // display: block</span><br><span class="line">       &amp;:hover</span><br><span class="line">         color: $light-blue</span><br><span class="line">     .nav-site-title</span><br><span class="line">       display: flex</span><br><span class="line">       justify-content: center</span><br><span class="line">       align-items: center</span><br><span class="line">       border-radius: 15px</span><br><span class="line">       padding: 0 4px</span><br><span class="line">       transition: all .1s </span><br><span class="line">       i</span><br><span class="line">         position: absolute</span><br><span class="line">         opacity: 0</span><br><span class="line">         transform: scale(1.35)</span><br><span class="line">         transition: all .3s ease</span><br><span class="line">       &amp;:hover</span><br><span class="line">         background: $light-blue</span><br><span class="line">         box-shadow:0 0 2px $light-blue</span><br><span class="line"></span><br><span class="line">       &amp;:hover .site-name</span><br><span class="line">         opacity: 0</span><br><span class="line">         color: var(--font-color)</span><br><span class="line"></span><br><span class="line">       &amp;:hover i </span><br><span class="line">         opacity: 1</span><br><span class="line">         transform: scale(1.01)</span><br><span class="line">         color: white</span><br><span class="line"></span><br><span class="line">       .site-name</span><br><span class="line">         text-shadow: none</span><br><span class="line">         font-size: .9em</span><br><span class="line">         // transition: all .3s ease-in-out</span><br><span class="line"></span><br><span class="line">     .mask-name-container</span><br><span class="line">       max-width: 1200px</span><br><span class="line">       width: 50%</span><br><span class="line">       height: 100%</span><br><span class="line">       position: absolute</span><br><span class="line">       overflow: hidden</span><br><span class="line">       left: 50%</span><br><span class="line">       transform: translateX(-50%)</span><br><span class="line">       display: flex</span><br><span class="line">       justify-content: center</span><br><span class="line">       align-items: center</span><br><span class="line">     @media screen and (max-width: 992px) &#123;</span><br><span class="line">       .mask-name-container &#123;</span><br><span class="line">         width: 65%;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     @media screen and (max-width: 768px) &#123;</span><br><span class="line">       .mask-name-container &#123;</span><br><span class="line">         display: none;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @media screen and (max-width: 900px) &#123;</span><br><span class="line">       .mask-name-container &#123;</span><br><span class="line">         display: none;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">   &amp;.nav-visible #name-container </span><br><span class="line">     transition: 0.3s;</span><br><span class="line">     transform: translate(-50%, 60px);</span><br><span class="line">   </span><br><span class="line">   &amp;.nav-visible #menus .menus_items </span><br><span class="line">     transform: translate(-50%)</span><br><span class="line">     transition: 0.3s</span><br><span class="line"></span><br><span class="line">   #page-name::before &#123;</span><br><span class="line">     font-size: 18px;</span><br><span class="line">     position: absolute;</span><br><span class="line">     width: 100%;</span><br><span class="line">     height: 100%;</span><br><span class="line">     border-radius: 15px;</span><br><span class="line">     color: white !important;</span><br><span class="line">     top: 0;</span><br><span class="line">     left: 0;</span><br><span class="line">     content: &quot;回到顶部&quot;;</span><br><span class="line">     background-color: $light-blue;</span><br><span class="line">     transition: all 0.3s;</span><br><span class="line">     -webkit-transition: all 0.3s;</span><br><span class="line">     -moz-transition: all 0.3s;</span><br><span class="line">     -ms-transition: all 0.3s;</span><br><span class="line">     -o-transition: all 0.3s;</span><br><span class="line">     opacity: 0;</span><br><span class="line">     box-shadow: 0 0 2px $light-blue;</span><br><span class="line">     line-height: 50px; /*如果垂直位置不居中可以微调此值，也可以删了*/</span><br><span class="line">   &#125;</span><br><span class="line">   #page-name:hover:before &#123;</span><br><span class="line">     opacity: 1;</span><br><span class="line">   &#125;</span><br><span class="line">   #name-container &#123;</span><br><span class="line">     transition: all 0.3s;</span><br><span class="line">     -webkit-transition: all 0.3s;</span><br><span class="line">     -moz-transition: all 0.3s;</span><br><span class="line">     -ms-transition: all 0.3s;</span><br><span class="line">     -o-transition: all 0.3s;</span><br><span class="line">   &#125;</span><br><span class="line">   #name-container:hover &#123;</span><br><span class="line">     transform: translateX(-50%) scale(1.03);</span><br><span class="line">   &#125;</span><br><span class="line">   #page-name &#123;</span><br><span class="line">     position: relative;</span><br><span class="line">     padding: 10px 30px;</span><br><span class="line">     -webkit-animation-timing-function: ease-out;</span><br><span class="line">     // font-family: &#x27;Arial&#x27;;</span><br><span class="line">     font-weight: bold;</span><br><span class="line">     font-size: .9em;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   center#name-container &#123;</span><br><span class="line">     position: absolute;</span><br><span class="line">     width: 100%;</span><br><span class="line">     left: 50%;</span><br><span class="line">     transform: translateX(-50%);</span><br><span class="line">     // font-family: &quot;ZhuZiAYuanJWD&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">   #menus .menus_items &#123;</span><br><span class="line">     transform: translate(-50%, -60px);</span><br><span class="line">     transition: 0.3s;</span><br><span class="line">   &#125;</span><br><span class="line">   #name-container &#123;</span><br><span class="line">     transition: 0.3s;</span><br><span class="line">   &#125;</span><br><span class="line"> //   &amp; + .layout</span><br><span class="line"> //     &amp; &gt; .aside-content &gt; .sticky_layout</span><br><span class="line"> //       top: 70px</span><br><span class="line"> //       transition: top .5s</span><br><span class="line"></span><br><span class="line"> //     #card-toc</span><br><span class="line"> //       .toc-content</span><br><span class="line"> //         max-height: calc(100vh - 170px)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo 魔改记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客系统相关指令</title>
      <link href="/2024/10/22/hexo%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/10/22/hexo%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<!-- # 本地初始化hexo博客系统 --><ul><li>npm install hexo-cli -g  //一键安装博客程序</li><li>hexo init &lt;foldname&gt;  //初始化</li><li>cd &lt;foldname&gt; //进入初始化文件夹</li><li>npm install //安装依赖</li><li>hexo clean  //清理缓存</li><li>hexo generate(g)  //生成静态文件</li><li>hexo serve(s)  //本地运行博客</li><li>npm install hexo-browsersync --save  //动态更新网页的依赖</li></ul><p>将静态文件部署到github上</p><ul><li>npm install hexo-deployer-git --save  //安装部署插件</li><li>hexo deploy(d)  //将静态文件部署到github中</li></ul><p>github双分支结构：</p><ul><li>注：使用hexo进行网站部署后，github page指定网页只会显示静态文件，故需要单独开一个分支用以存储源文件</li><li>在main分支外创建dev分支，用于存储源码</li><li>main分支用以存放生成的静态网页</li><li>dev分支用以存放网站的原始文件</li></ul><p>代码提交：</p><ul><li>源码提交到source分支</li><li>项目部署使用hexo clean，hexo g，hexo d，文件静态资源将自动部署到预先配置的github分支上</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈数据分析（一）基于Python爬虫的数据分析</title>
      <link href="/2024/10/22/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E4%BA%8EPython%E7%88%AC%E8%99%AB%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2024/10/22/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E4%BA%8EPython%E7%88%AC%E8%99%AB%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>本文将对数据分析流程做一个综述以及探讨下<code>Python</code>爬虫的使用</p></div><div class="tip warning"><p>对最近做的<strong>Python</strong>数据分析项目做一个记录，主要涉及技术实现部分，市场部分基本一笔带过，想要深入了解数据分析请参考专业教程</p></div><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什么是数据分析"><a href="#什么是数据分析" class="headerlink" title="什么是数据分析"></a>什么是数据分析</h2><p>数据分析即从原始数据中提取有价值的信息，通过对收集的信息进行统计分类，市场比较，以及机器学习等手段，发现数据中潜在的规律、趋势以及模式，从而达到支持决策，优化过程，发掘市场潜力等目的</p><h2 id="数据分析主要流程"><a href="#数据分析主要流程" class="headerlink" title="数据分析主要流程"></a>数据分析主要流程</h2><p>数据分析的主要流程由如下部分构成：</p><blockquote><ol><li>市场需求分析：为什么做这个数据分析？有什么实际需求</li><li>数据挖掘：通过<code>Python</code>爬虫等数据挖掘工具收集原始数据，原始数据是后续一切分析的基础</li><li>数据清洗：包括处理缺失值，异常值，删除重复数据等</li><li>数据处理：将数据格式化为可以被识别或处理的统一格式，如表格等</li><li>数据可视化：将处理后的数据进行可视化操作，便于分析</li><li>数据分析：基于数据模型对数据进行进一步详细分析</li></ol></blockquote><h1 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h1><p>在确定初步需求分析之后就可以进行原始数据挖掘了，如下面将演示使用<code>Python</code>爬虫挖掘豆瓣<code>top250</code>电影数据<br><div class="note warning flat"><p>爬虫只是进行数据挖掘最常见的方式之一，并不是说数据挖掘只有这一种方式</p></div></p><h2 id="必要库安装"><a href="#必要库安装" class="headerlink" title="必要库安装"></a>必要库安装</h2><p>命令行输入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests beautifulsoup4 lxml</span><br></pre></td></tr></table></figure><br>文件中引入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br></pre></td></tr></table></figure><br><div class="note info flat"><p><code>request</code>库用于发送请求，<code>BeautifulSoup</code>库用来解析页面<code>html</code>，<code>csv</code>库用来导出数据</p></div></p><h2 id="解析页面数据"><a href="#解析页面数据" class="headerlink" title="解析页面数据"></a>解析页面数据</h2><p>设置请求<code>URL</code>地址和请求头<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://movie.douban.com/top250&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>配置页面解析函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_html</span>(<span class="params">html, writer</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    movie_list = soup.find(<span class="string">&#x27;ol&#x27;</span>, class_=<span class="string">&#x27;grid_view&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> movie <span class="keyword">in</span> movie_list:</span><br><span class="line">        title = movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;hd&#x27;</span>).find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;title&#x27;</span>).get_text()</span><br><span class="line">        rating_num = movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;star&#x27;</span>).find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;rating_num&#x27;</span>).get_text()</span><br><span class="line">        comment_num = movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;star&#x27;</span>).find_all(<span class="string">&#x27;span&#x27;</span>)[-<span class="number">1</span>].get_text()</span><br><span class="line">        info = movie.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;bd&#x27;</span>).find(<span class="string">&#x27;p&#x27;</span>).get_text().strip().split(<span class="string">&#x27;\n&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        movie_year = info.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        movie_area = info.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        movie_type = info.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">2</span>].strip()</span><br><span class="line">        writer.writerow([title, rating_num, comment_num,movie_year, movie_area, movie_type])</span><br></pre></td></tr></table></figure><br><div class="note orange icon-padding flat"><i class="note-icon fas fa-wand-magic"></i><p>解析页面<code>html</code>时对<code>DOM</code>元素的搜索和<code>css</code>选择器有些相似，不需要逐级查找，只需要确保从父级节点往下的顺序即可</p></div></p><h2 id="页面数据保存"><a href="#页面数据保存" class="headerlink" title="页面数据保存"></a>页面数据保存</h2><p>将数据导出到<code>.csv</code>表格中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存数据函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_data</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./douban_movie_top100.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        writer.writerow([<span class="string">&#x27;电影名称&#x27;</span>, <span class="string">&#x27;评分&#x27;</span>, <span class="string">&#x27;评价人数&#x27;</span>, <span class="string">&#x27;年份&#x27;</span>, <span class="string">&#x27;地区&#x27;</span>, <span class="string">&#x27;类型&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):  <span class="comment"># 每页25条记录，配置查询页数</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.get(url + <span class="string">&#x27;?start=&#x27;</span> + <span class="built_in">str</span>(i*<span class="number">25</span>) + <span class="string">&#x27;&amp;filter=&#x27;</span>, headers=headers)</span><br><span class="line">                response.raise_for_status()  <span class="comment"># 检查请求是否成功</span></span><br><span class="line">                parse_html(response.text, writer)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Error fetching page <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>最后执行主程序:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    save_data()</span><br></pre></td></tr></table></figure></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><details class="folding-tag" blue><summary> 查看完整代码与结果 </summary>              <div class='content'>              <div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>代码</button><button type="button" class="tab"><i class="icon"></i>结果查看</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求URL</span></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/top250&#x27;</span></span><br><span class="line"><span class="comment"># 请求头部</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析页面函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_html</span>(<span class="params">html, writer</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    movie_list = soup.find(<span class="string">&#x27;ol&#x27;</span>, class_=<span class="string">&#x27;grid_view&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> movie <span class="keyword">in</span> movie_list:</span><br><span class="line">        title = movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;hd&#x27;</span>).find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;title&#x27;</span>).get_text()</span><br><span class="line">        rating_num = movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;star&#x27;</span>).find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;rating_num&#x27;</span>).get_text()</span><br><span class="line">        comment_num = movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;star&#x27;</span>).find_all(<span class="string">&#x27;span&#x27;</span>)[-<span class="number">1</span>].get_text()</span><br><span class="line">        info = movie.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;bd&#x27;</span>).find(<span class="string">&#x27;p&#x27;</span>).get_text().strip().split(<span class="string">&#x27;\n&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        movie_year = info.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        movie_area = info.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        movie_type = info.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">2</span>].strip()</span><br><span class="line">        writer.writerow([title, rating_num, comment_num,movie_year, movie_area, movie_type])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_data</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./douban_movie_top100.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        writer.writerow([<span class="string">&#x27;电影名称&#x27;</span>, <span class="string">&#x27;评分&#x27;</span>, <span class="string">&#x27;评价人数&#x27;</span>, <span class="string">&#x27;年份&#x27;</span>, <span class="string">&#x27;地区&#x27;</span>, <span class="string">&#x27;类型&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):  <span class="comment"># 确保抓取所有10页的电影数据</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.get(url + <span class="string">&#x27;?start=&#x27;</span> + <span class="built_in">str</span>(i*<span class="number">25</span>) + <span class="string">&#x27;&amp;filter=&#x27;</span>, headers=headers)</span><br><span class="line">                response.raise_for_status()  <span class="comment"># 检查请求是否成功</span></span><br><span class="line">                parse_html(response.text, writer)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Error fetching page <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    save_data()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><div class="table-container"><table><thead><tr><th style="text-align:center">电影名称</th><th>评分</th><th>评价人数</th><th>年份</th><th>地区</th><th>类型</th></tr></thead><tbody><tr><td style="text-align:center">肖申克的救赎</td><td>9.7</td><td>3087928人评价</td><td>1994</td><td>美国</td><td>犯罪 剧情</td></tr></tbody></table></div><p>…</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>              </div>            </details><h1 id="数据清洗与处理"><a href="#数据清洗与处理" class="headerlink" title="数据清洗与处理"></a>数据清洗与处理</h1><p>在数据挖掘的过程中，难免会遇到数据缺失，数据重复、数据异常等问题，数据清洗就是做这类工作，如处理缺失值、重复数据、异常值等。</p><p>在简单地对数据进行初步筛检后，下一步就是对数据格式化规范化处理，变成能识别的数据格式。</p><div class="tip sync"><p>从某种程度上来说，数据处理和后端的工作逻辑很相似，因为都是面向数据？</p></div><p>基于上述<code>top100</code>电影数据的案例做以下处理：<br><details class="folding-tag" blue><summary> 查看完整代码 </summary>              <div class='content'>              <div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="icon"></i>评分</button><button type="button" class="tab"><i class="icon"></i>类型</button><button type="button" class="tab"><i class="icon"></i>发布地区</button><button type="button" class="tab"><i class="icon"></i>发布时间</button></div><div class="tab-contents"><div class="tab-item-content active"><p>从<code>csv</code>表格中提取数据并导出评分与数量关系<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;douban_movie_top100.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个评分对应的数量</span></span><br><span class="line">rating_counts = df[<span class="string">&#x27;评分&#x27;</span>].value_counts().reset_index()</span><br><span class="line">rating_counts.columns = [<span class="string">&#x27;评分&#x27;</span>, <span class="string">&#x27;数量&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示统计结果</span></span><br><span class="line"><span class="built_in">print</span>(rating_counts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将统计结果导出为 CSV 文件</span></span><br><span class="line">rating_counts.to_csv(<span class="string">&#x27;rating_counts.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content"><p>导出类型关系<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;douban_movie_top100.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将类型列拆分成多个类型</span></span><br><span class="line">df[<span class="string">&#x27;类型&#x27;</span>] = df[<span class="string">&#x27;类型&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展开类型列</span></span><br><span class="line">df_exploded = df.explode(<span class="string">&#x27;类型&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每种类型出现的数量</span></span><br><span class="line">type_counts = df_exploded[<span class="string">&#x27;类型&#x27;</span>].value_counts().reset_index()</span><br><span class="line">type_counts.columns = [<span class="string">&#x27;类型&#x27;</span>, <span class="string">&#x27;数量&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示统计结果</span></span><br><span class="line"><span class="built_in">print</span>(type_counts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将统计结果导出为 CSV 文件</span></span><br><span class="line">type_counts.to_csv(<span class="string">&#x27;type_counts.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content"><p>导出电影发布地区与权重<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;douban_movie_top100.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将地区列拆分成多个地区</span></span><br><span class="line">df[<span class="string">&#x27;地区&#x27;</span>] = df[<span class="string">&#x27;地区&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展开地区列</span></span><br><span class="line">df_exploded = df.explode(<span class="string">&#x27;地区&#x27;</span>)</span><br><span class="line"></span><br><span class="line">region_translation = &#123;</span><br><span class="line">    <span class="string">&#x27;中国大陆&#x27;</span>: <span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;中国香港&#x27;</span>: <span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;美国&#x27;</span>: <span class="string">&#x27;United States&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;日本&#x27;</span>: <span class="string">&#x27;Japan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;意大利&#x27;</span>: <span class="string">&#x27;Italy&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;法国&#x27;</span>: <span class="string">&#x27;France&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;墨西哥&#x27;</span>: <span class="string">&#x27;Mexico&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;英国&#x27;</span>: <span class="string">&#x27;United Kingdom&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;加拿大&#x27;</span>: <span class="string">&#x27;Canada&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;德国&#x27;</span>: <span class="string">&#x27;Germany&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;瑞士&#x27;</span>: <span class="string">&#x27;Switzerland&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;黎巴嫩&#x27;</span>: <span class="string">&#x27;Lebanon&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;塞浦路斯&#x27;</span>: <span class="string">&#x27;Cyprus&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;卡塔尔&#x27;</span>: <span class="string">&#x27;Qatar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;韩国&#x27;</span>: <span class="string">&#x27;South Korea&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;印度&#x27;</span>: <span class="string">&#x27;India&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;中国台湾&#x27;</span>: <span class="string">&#x27;Taiwan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;新西兰&#x27;</span>: <span class="string">&#x27;New Zealand&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;波兰&#x27;</span>: <span class="string">&#x27;Poland&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;西班牙&#x27;</span>: <span class="string">&#x27;Spain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;丹麦&#x27;</span>: <span class="string">&#x27;Denmark&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;瑞典&#x27;</span>: <span class="string">&#x27;Sweden&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 翻译地区名称</span></span><br><span class="line">df_exploded[<span class="string">&#x27;地区&#x27;</span>] = df_exploded[<span class="string">&#x27;地区&#x27;</span>].<span class="built_in">map</span>(region_translation).fillna(df_exploded[<span class="string">&#x27;地区&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个地区出现的数量</span></span><br><span class="line">region_counts = df_exploded[<span class="string">&#x27;地区&#x27;</span>].value_counts().reset_index()</span><br><span class="line">region_counts.columns = [<span class="string">&#x27;地区&#x27;</span>, <span class="string">&#x27;数量&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示统计结果</span></span><br><span class="line"><span class="built_in">print</span>(region_counts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将统计结果导出为 CSV 文件</span></span><br><span class="line">region_counts.to_csv(<span class="string">&#x27;region_counts.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content"><p>导出电影发布年份与数量关系<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;douban_movie_top100.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个年份出现的数量</span></span><br><span class="line">year_counts = df[<span class="string">&#x27;年份&#x27;</span>].value_counts().reset_index()</span><br><span class="line">year_counts.columns = [<span class="string">&#x27;年份&#x27;</span>, <span class="string">&#x27;数量&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示统计结果</span></span><br><span class="line"><span class="built_in">print</span>(year_counts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将统计结果导出为 CSV 文件</span></span><br><span class="line">year_counts.to_csv(<span class="string">&#x27;year_counts.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>              </div>            </details></p><h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><p>对处理完成的数据进行可视化处理，方便后续数据分析，详见<a href="">浅谈数据分析（二）</a></p><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><p>从某种意义上说，对原始数据的分析是整个数据分析流程中做重要的一个环节<del>名字都叫数据分析了，不重要才怪</del>，上述所有步骤最终都是数据分析的基石，但具体数据分析要根据实际需求来制定，要符合市场期望，因此根本没有统一的方法论，这里就一笔带过了…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python 数据分析 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
